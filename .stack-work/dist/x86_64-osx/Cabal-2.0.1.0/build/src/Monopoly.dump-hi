
==================== FINAL INTERFACE ====================
2018-03-20 11:31:58.776203 UTC

interface monopoly-0.1-EHoOAVlKhvJDKzSG2oZd5j:Monopoly 8022
  interface hash: dc2c32baeabad7cdaa047baeed585068
  ABI hash: 1be2582dab5cc1125ef409c67e97b03e
  export-list hash: aa53de3dae5f640ef6bc8ea8a68685de
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 0451a77cc0d8e5d99d548d6441c7dd35
  sig of: Nothing
  used TH splices: False
  where
exports:
  Monopoly.canGo
  Monopoly.chanceCard
  Monopoly.changePlayerCell
  Monopoly.doStep
  Monopoly.drawGameState
  Monopoly.drawPayMenu
  Monopoly.drawPiece
  Monopoly.drawPlayingField
  Monopoly.getPlayerPosition
  Monopoly.getTypeCell
  Monopoly.handleGame
  Monopoly.handlePay
  Monopoly.initGame
  Monopoly.initPay
  Monopoly.isPay
  Monopoly.isStep
  Monopoly.isntPay
  Monopoly.loadImages
  Monopoly.makeMove
  Monopoly.makePay
  Monopoly.makeStepFeatures
  Monopoly.move
  Monopoly.movePlayer
  Monopoly.payTax
  Monopoly.satelliteRotationSpeed
  Monopoly.screenHeight
  Monopoly.screenWidth
  Monopoly.startGame
  Monopoly.streetMove
  Monopoly.throwCubes
  Monopoly.ufoAccel
  Monopoly.updateGameState
  Monopoly.updatePay
  Monopoly.Cubes{Monopoly.Cubes firstCube secondCube}
  Monopoly.GameState{Monopoly.GameState cubes gamePlayer haveWinner land players typeStep}
  Monopoly.Images{Monopoly.Images imagePayMenu imagePieceBlue imagePieceGreen imagePieceRed imagePieceYellow imagePlayingField}
  Monopoly.Physical{Monopoly.getCell Monopoly.getPosition Monopoly.setCell Monopoly.setPosition}
  Monopoly.Player{Monopoly.Player colour money playerCell playerPosition property}
  Monopoly.Street{Monopoly.Street isRent name owner price priceRent}
module dependencies:
package dependencies: GLURaw-2.0.0.3 GLUT-2.7.0.12
                      JuicyPixels-3.2.9.4 ObjectName-1.1.0.1 OpenGL-3.0.2.0
                      OpenGLRaw-3.2.7.0 StateVar-1.1.0.4 array-0.5.2.0 base-4.10.1.0
                      binary-0.8.5.1 bmp-1.2.6.3 bytestring-0.10.8.2 containers-0.5.10.2
                      deepseq-1.4.3.0 fixed-0.2.1.1 ghc-prim-0.5.1.1 gloss-1.11.1.1
                      gloss-juicy-0.2.2 gloss-rendering-1.11.1.1 half-0.2.2.3
                      integer-gmp-1.0.1.0 mtl-2.2.1 primitive-0.6.3.0 random-1.1
                      stm-2.4.5.0 text-1.2.2.2 time-1.8.0.2 transformers-0.5.2.0
                      vector-0.12.0.1 zlib-0.6.1.2
orphans: vector-0.12.0.1:Data.Vector.Unboxed
         gloss-rendering-1.11.1.1:Graphics.Gloss.Internals.Data.Picture
         stm-2.4.5.0:Control.Monad.STM text-1.2.2.2:Data.Text
         binary-0.8.5.1:Data.Binary.Generic text-1.2.2.2:Data.Text.Show
         bytestring-0.10.8.2:Data.ByteString.Builder
         vector-0.12.0.1:Data.Vector.Fusion.Bundle
         transformers-0.5.2.0:Control.Monad.Trans.Error
         time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian base-4.10.1.0:GHC.Float
         base-4.10.1.0:GHC.Base
family instance modules: JuicyPixels-3.2.9.4:Codec.Picture.Tga
                         JuicyPixels-3.2.9.4:Codec.Picture.Tiff
                         JuicyPixels-3.2.9.4:Codec.Picture.Types
                         base-4.10.1.0:Control.Applicative base-4.10.1.0:Data.Complex
                         base-4.10.1.0:Data.Either base-4.10.1.0:Data.Functor.Compose
                         base-4.10.1.0:Data.Functor.Const
                         base-4.10.1.0:Data.Functor.Identity
                         base-4.10.1.0:Data.Functor.Product base-4.10.1.0:Data.Functor.Sum
                         base-4.10.1.0:Data.List.NonEmpty base-4.10.1.0:Data.Monoid
                         base-4.10.1.0:Data.Semigroup base-4.10.1.0:Data.Type.Equality
                         base-4.10.1.0:Data.Version base-4.10.1.0:Data.Void
                         base-4.10.1.0:GHC.Exts base-4.10.1.0:GHC.Generics
                         base-4.10.1.0:GHC.IO.Exception base-4.10.1.0:GHC.TypeLits
                         base-4.10.1.0:GHC.TypeNats containers-0.5.10.2:Data.IntMap.Internal
                         containers-0.5.10.2:Data.IntSet.Internal
                         containers-0.5.10.2:Data.Map.Internal
                         containers-0.5.10.2:Data.Sequence.Internal
                         containers-0.5.10.2:Data.Set.Internal containers-0.5.10.2:Data.Tree
                         primitive-0.6.3.0:Control.Monad.Primitive
                         primitive-0.6.3.0:Data.Primitive.Array
                         primitive-0.6.3.0:Data.Primitive.ByteArray text-1.2.2.2:Data.Text
                         vector-0.12.0.1:Data.Vector vector-0.12.0.1:Data.Vector.Primitive
                         vector-0.12.0.1:Data.Vector.Storable
                         vector-0.12.0.1:Data.Vector.Unboxed
                         vector-0.12.0.1:Data.Vector.Unboxed.Base
                         zlib-0.6.1.2:Codec.Compression.Zlib.Stream
import  -/  base-4.10.1.0:Data.Foldable 9ed87455d68e87ff2b5b8725eae9897e
import  -/  base-4.10.1.0:GHC.Base 782fd99b5e36f3698a26179a49afca64
import  -/  base-4.10.1.0:GHC.List e3060fbeb44ce0038e6b4dedf2dd9cf1
import  -/  base-4.10.1.0:GHC.Num 6e1dc5d36d99a802edb39b92bb1923b8
import  -/  base-4.10.1.0:GHC.Real 3c62834bc25e762eabc44149c4cc142d
import  -/  base-4.10.1.0:Prelude 31945b7d0084063347fc52506d3a4020
import  -/  ghc-prim-0.5.1.1:GHC.Classes 93e2660065dce9329577e83d76d8f0d4
import  -/  ghc-prim-0.5.1.1:GHC.Types b1fd0716441595db508c1a74387bf394
import  -/  gloss-1.11.1.1:Graphics.Gloss.Data.Color b7424de5bb205cca1a09501f98c59664
import  -/  gloss-1.11.1.1:Graphics.Gloss.Data.Display 1752ab407945af39220fa83fbf976e16
import  -/  gloss-1.11.1.1:Graphics.Gloss.Data.Picture 0c9db8efb71853e503896b57a301b5c6
import  -/  gloss-1.11.1.1:Graphics.Gloss.Data.Vector 44dc1145b0e25cb800e2c55d0895dbe5
import  -/  gloss-1.11.1.1:Graphics.Gloss.Interface.Pure.Game 247150559a96abad68d2b57b64100a3e
import  -/  gloss-1.11.1.1:Graphics.Gloss.Internals.Interface.Backend.Types 06ea8efd16f2e1213f3498c72fd3e865
import  -/  gloss-1.11.1.1:Graphics.Gloss.Internals.Interface.Event f16844b468f3b0afda143b6d1f143412
import  -/  gloss-juicy-0.2.2:Graphics.Gloss.Juicy 46a9eca8d76b0eb9834882dca76d1776
import  -/  gloss-rendering-1.11.1.1:Graphics.Gloss.Internals.Data.Picture d666c96398fc251f92f60389aa7562f8
import  -/  random-1.1:System.Random c9dfbade5c0e5bc4ae42c058f948952b
78cf08954a4a97e6e70eb90650024072
  $fPhysicalPlayer :: Monopoly.Physical Monopoly.Player
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Monopoly.Player
                  Monopoly.playerPosition
                  Monopoly.playerCell
                  Monopoly.$fPhysicalPlayer_$csetPosition
                  Monopoly.$fPhysicalPlayer_$csetCell -}
3c3dd55184011285e4e152bf31df1b59
  $fPhysicalPlayer_$csetCell ::
    GHC.Types.Int -> Monopoly.Player -> Monopoly.Player
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,1*U(U,U,U,A,U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ (new :: GHC.Types.Int) (player :: Monopoly.Player) ->
                 case player of wild { Monopoly.Player ds ds1 ds2 ds3 ds4 ->
                 Monopoly.Player ds ds1 ds2 new ds4 }) -}
ed2905adb5afd4c601c9d00ac1187c73
  $fPhysicalPlayer_$csetPosition ::
    Graphics.Gloss.Internals.Data.Picture.Point
    -> Monopoly.Player -> Monopoly.Player
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,1*U(U,U,U,U,A)>m,
     Unfolding: InlineRule (2, True, False)
                (\ (new :: Graphics.Gloss.Internals.Data.Picture.Point)
                   (player :: Monopoly.Player) ->
                 case player of wild { Monopoly.Player ds ds1 ds2 ds3 ds4 ->
                 Monopoly.Player ds ds1 ds2 ds3 new }) -}
fc9186785ba14620b9084b210c1b166a
  $tc'C:Physical :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14831751462758654905##
                   579143389657864245##
                   Monopoly.$trModule
                   Monopoly.$tc'C:Physical2
                   1#
                   Monopoly.$tc'C:Physical1) -}
8fe2c7f3808e65f955ef2e7a72d44cd3
  $tc'C:Physical1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
df17e651a73788749aceb26834ca495d
  $tc'C:Physical2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Monopoly.$tc'C:Physical3) -}
d8637616c5a72615cd75219cf1400ed4
  $tc'C:Physical3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'C:Physical"#) -}
4fd734913533a9e56e3bf6a91e55daa8
  $tc'Cubes :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2478442684350867704##
                   6878546648676259711##
                   Monopoly.$trModule
                   Monopoly.$tc'Cubes2
                   0#
                   Monopoly.$tc'Cubes1) -}
5b3e72fa1d10317be44d675b83244cd9
  $tc'Cubes1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
af2422e52fe9c79ec1050049576f4280
  $tc'Cubes2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Monopoly.$tc'Cubes3) -}
a2f29976d6b5a780c5e341a9b82b002d
  $tc'Cubes3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Cubes"#) -}
611c5d82dc55ad4f6cf382224ae0c8fa
  $tc'GameState :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12445474607304345465##
                   13319973760133085921##
                   Monopoly.$trModule
                   Monopoly.$tc'GameState2
                   0#
                   Monopoly.$tc'GameState1) -}
fb443d0fc994baff5b05bfa0aeed3054
  $tc'GameState1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
355afac42cc6cfdd1a78951e70b1d1b8
  $tc'GameState2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Monopoly.$tc'GameState3) -}
2ac2c7e6bb5969e9d786305b9ff85640
  $tc'GameState3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'GameState"#) -}
1930d7d64a718758ff5818706e64f822
  $tc'Images :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11650600398452566689##
                   15916080695264304172##
                   Monopoly.$trModule
                   Monopoly.$tc'Images2
                   0#
                   Monopoly.$tc'Images1) -}
bcc7e74e28483d68401b39550702561b
  $tc'Images1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
70974c2ef628691d505cc1bf1a010b12
  $tc'Images2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Monopoly.$tc'Images3) -}
93fa539d5697b555ab2e20f95e47f704
  $tc'Images3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Images"#) -}
e738694526b50d2327d9fe9a51adfa29
  $tc'Player :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2354238558275237365##
                   8235264906853959260##
                   Monopoly.$trModule
                   Monopoly.$tc'Player2
                   0#
                   Monopoly.$tc'Player1) -}
bc55aebdc187289b58dd671525366ffc
  $tc'Player1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
d2ccaa28513dc18035b82de81b9f5dfc
  $tc'Player2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Monopoly.$tc'Player3) -}
2d8c7fb117dcc20c333b581e8ff6440f
  $tc'Player3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Player"#) -}
f8c1c30b16402f02accd0ea623e6e4ed
  $tc'Street :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6393891865602144051##
                   11140179470289761440##
                   Monopoly.$trModule
                   Monopoly.$tc'Street2
                   0#
                   Monopoly.$tc'Street1) -}
a53c933256e245ec4bb8c9476b5e9970
  $tc'Street1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
1756e763ae91c4f3f5432262279ffd03
  $tc'Street2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Monopoly.$tc'Street3) -}
071483ae1c3214f23afdb0be8a73f870
  $tc'Street3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Street"#) -}
dba68f381283720c77d13121d1fcb3e3
  $tcCubes :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14035284667219622413##
                   1095780005506541569##
                   Monopoly.$trModule
                   Monopoly.$tcCubes1
                   0#
                   GHC.Types.krep$*) -}
6b3aed28e2eb0fa8081a18be28fa89b0
  $tcCubes1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Monopoly.$tcCubes2) -}
f3fc5cb295f4b2c1722b6947ab7e3ce4
  $tcCubes2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Cubes"#) -}
5f0655b8952dd696aefa829f5749ee15
  $tcGameState :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6127510352924701552##
                   645970733515722312##
                   Monopoly.$trModule
                   Monopoly.$tcGameState1
                   0#
                   GHC.Types.krep$*) -}
007b239d0767f3122a0f8ccbee899f7b
  $tcGameState1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Monopoly.$tcGameState2) -}
773fa10161979e6bf57b73602434334f
  $tcGameState2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("GameState"#) -}
a4c7b6f3f629b4884bee4caa24815fbd
  $tcImages :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16892324885821936704##
                   17610217353859363776##
                   Monopoly.$trModule
                   Monopoly.$tcImages1
                   0#
                   GHC.Types.krep$*) -}
536c3732174e16efbb54afa0dba5c4e0
  $tcImages1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Monopoly.$tcImages2) -}
ed924718553fda7220337758f0812b76
  $tcImages2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Images"#) -}
a4f36d67fb898dc5312ac51778c81042
  $tcPhysical :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9895433282512726895##
                   9461575238866704718##
                   Monopoly.$trModule
                   Monopoly.$tcPhysical2
                   0#
                   Monopoly.$tcPhysical1) -}
e7ee8f4a118676259094f392f54fdf1e
  $tcPhysical1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
7187e3271f096db685d8a91d2038a89d
  $tcPhysical2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Monopoly.$tcPhysical3) -}
f4135ba9e0bbb4f96c397e2707542c11
  $tcPhysical3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Physical"#) -}
40a09ddeb7360a3a4ba86297b983c241
  $tcPlayer :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7736844479821361884##
                   162166766463859196##
                   Monopoly.$trModule
                   Monopoly.$tcPlayer1
                   0#
                   GHC.Types.krep$*) -}
e0f6a46de0cfa4489104c2517aa2812e
  $tcPlayer1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Monopoly.$tcPlayer2) -}
d7bf0718b0ea801964bbdbbe1e417e59
  $tcPlayer2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Player"#) -}
52dbe3fbdd7504018d9c2d5752e3676b
  $tcStreet :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10051777567812766565##
                   7730598809882436407##
                   Monopoly.$trModule
                   Monopoly.$tcStreet1
                   0#
                   GHC.Types.krep$*) -}
27bbf32392bf5d687f1ab8202d2a362f
  $tcStreet1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Monopoly.$tcStreet2) -}
2821eccbb9cb93db48af522bd94316b2
  $tcStreet2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Street"#) -}
4d3dcae2be777542e34d4c0400d24879
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Monopoly.$trModule3
                   Monopoly.$trModule1) -}
07fae8abc71983e63ded8eb7cff22d1e
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Monopoly.$trModule2) -}
962f795020def0b493c7d216096efcd9
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Monopoly"#) -}
11987e1c44bb9a5648e4d2579b8e9166
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Monopoly.$trModule4) -}
6624772ab9c75abafc5223b63e38b65f
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("monopoly-0.1-EHoOAVlKhvJDKzSG2oZd5j"#) -}
f25812646d845b956ae4f53cd09693b8
  $wchangePlayerCell ::
    [Monopoly.Player]
    -> GHC.Types.Int
    -> GHC.Base.Maybe GHC.Types.Int
    -> Monopoly.Cubes
    -> [Monopoly.Street]
    -> (# [Monopoly.Player], GHC.Types.Int,
          GHC.Base.Maybe GHC.Types.Int, Monopoly.Cubes, [Monopoly.Street],
          GHC.Base.String #)
  {- Arity: 5, Strictness: <L,U><L,U(U)><L,U><L,U(U(U),U(U))><L,U>,
     Inline: [0],
     Unfolding: (\ (ww :: [Monopoly.Player])
                   (ww1 :: GHC.Types.Int)
                   (ww2 :: GHC.Base.Maybe GHC.Types.Int)
                   (ww3 :: Monopoly.Cubes)
                   (ww4 :: [Monopoly.Street]) ->
                 let {
                   cubesSum :: GHC.Types.Int
                   = case ww3 of wild { Monopoly.Cubes ds ds1 ->
                     case ds of wild1 { GHC.Types.I# x ->
                     case ds1 of wild2 { GHC.Types.I# y ->
                     GHC.Types.I# (GHC.Prim.+# x y) } } }
                 } in
                 let {
                   player :: Monopoly.Player
                   = case ww1 of wild { GHC.Types.I# x ->
                     GHC.List.$w!! @ Monopoly.Player ww (GHC.Prim.-# x 1#) }
                 } in
                 (# case ww1 of wild { GHC.Types.I# x ->
                    let {
                      y :: GHC.Prim.Int# = GHC.Prim.-# x 1#
                    } in
                    let {
                      n :: Monopoly.Player
                      = case player of ww5 { Monopoly.Player ww6 ww7 ww8 ww9 ww10 ->
                        Monopoly.Player
                          ww6
                          ww7
                          ww8
                          (case ww9 of wild1 { GHC.Types.I# x1 ->
                           case cubesSum of wild2 { GHC.Types.I# y1 ->
                           case GHC.Classes.modInt#
                                  (GHC.Prim.-# (GHC.Prim.+# x1 y1) 1#)
                                  40# of ww11 { DEFAULT ->
                           GHC.Types.I# (GHC.Prim.+# ww11 1#) } } })
                          (case ww9 of wild1 { GHC.Types.I# x1 ->
                           case cubesSum of wild2 { GHC.Types.I# y1 ->
                           case GHC.Classes.modInt#
                                  (GHC.Prim.-# (GHC.Prim.+# x1 y1) 1#)
                                  40# of ww11 { DEFAULT ->
                           case Monopoly.$wgetPlayerPosition
                                  wild
                                  (GHC.Prim.+# ww11 1#) of ww12 { (#,#) ww13 ww14 ->
                           (ww13, ww14) } } } }) }
                    } in
                    let {
                      n1 :: [Monopoly.Player]
                      = case GHC.List.$wlenAcc
                               @ Monopoly.Player
                               ww
                               0# of ww5 { DEFAULT ->
                        let {
                          y1 :: GHC.Prim.Int# = GHC.Prim.-# ww5 x
                        } in
                        case GHC.Prim.tagToEnum#
                               @ GHC.Types.Bool
                               (GHC.Prim.<# 0# y1) of wild1 {
                          GHC.Types.False -> Monopoly.changePlayerCell17
                          GHC.Types.True
                          -> GHC.List.reverse1
                               @ Monopoly.Player
                               (GHC.List.$wunsafeTake
                                  @ Monopoly.Player
                                  y1
                                  (GHC.List.reverse1
                                     @ Monopoly.Player
                                     ww
                                     (GHC.Types.[] @ Monopoly.Player)))
                               (GHC.Types.[] @ Monopoly.Player) } }
                    } in
                    let {
                      n2 :: [Monopoly.Player] = GHC.Types.: @ Monopoly.Player n n1
                    } in
                    case GHC.Prim.tagToEnum#
                           @ GHC.Types.Bool
                           (GHC.Prim.<# 0# y) of wild1 {
                      GHC.Types.False -> n2
                      GHC.Types.True
                      -> letrec {
                           $wgo :: [Monopoly.Player] -> GHC.Prim.Int# -> [Monopoly.Player]
                             {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0] -}
                           = \ (w :: [Monopoly.Player]) (ww5 :: GHC.Prim.Int#) ->
                             case w of wild2 {
                               [] -> n2
                               : y1 ys
                               -> case ww5 of ds1 {
                                    DEFAULT
                                    -> GHC.Types.:
                                         @ Monopoly.Player
                                         y1
                                         ($wgo ys (GHC.Prim.-# ds1 1#))
                                    1# -> GHC.Types.: @ Monopoly.Player y1 n2 } }
                         } in
                         $wgo ww y } },
                    ww1, ww2, ww3, ww4,
                    case player of ww5 { Monopoly.Player ww6 ww7 ww8 ww9 ww10 ->
                    case ww9 of wild { GHC.Types.I# x ->
                    case cubesSum of wild1 { GHC.Types.I# y ->
                    case GHC.Classes.modInt#
                           (GHC.Prim.-# (GHC.Prim.+# x y) 1#)
                           40# of ww11 { DEFAULT ->
                    Monopoly.$wgetTypeCell (GHC.Prim.+# ww11 1#) } } } } #)) -}
85677049d80ce1ea5f789d3228fe8c7e
  $wdrawGameState ::
    Monopoly.Images
    -> [Monopoly.Player]
    -> GHC.Base.String
    -> Graphics.Gloss.Internals.Data.Picture.Picture
  {- Arity: 3, Strictness: <L,U(1*U,1*U,1*U,1*U,1*U,1*U)><L,U><S,U>,
     Inline: [0] -}
aed6c94f772de239690a9084eab7107b
  $wgetPlayerPosition ::
    GHC.Types.Int
    -> GHC.Prim.Int# -> (# GHC.Types.Float, GHC.Types.Float #)
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*U(U)><S,U>,
     Inline: [0],
     Unfolding: (\ (w :: GHC.Types.Int) (ww :: GHC.Prim.Int#) ->
                 let {
                   $j :: (# GHC.Types.Float, GHC.Types.Float #) <join 0>
                   = let {
                       $j1 :: (# GHC.Types.Float, GHC.Types.Float #) <join 0>
                       = case GHC.Prim.tagToEnum#
                                @ GHC.Types.Bool
                                (GHC.Prim.>=# ww 22#) of wild {
                           GHC.Types.False
                           -> (# GHC.Types.F#
                                   (GHC.Prim.int2Float#
                                      (GHC.Prim.-# 365# (GHC.Prim.*# (GHC.Prim.-# ww 30#) 60#))),
                                 case w of wild1 { GHC.Types.I# x ->
                                 GHC.Types.F#
                                   (GHC.Prim.int2Float#
                                      (GHC.Prim.+# -360# (GHC.Prim.*# x 15#))) } #)
                           GHC.Types.True
                           -> case GHC.Prim.tagToEnum#
                                     @ GHC.Types.Bool
                                     (GHC.Prim.<=# ww 31#) of wild1 {
                                GHC.Types.False
                                -> (# GHC.Types.F#
                                        (GHC.Prim.int2Float#
                                           (GHC.Prim.-#
                                              365#
                                              (GHC.Prim.*# (GHC.Prim.-# ww 30#) 60#))),
                                      case w of wild2 { GHC.Types.I# x ->
                                      GHC.Types.F#
                                        (GHC.Prim.int2Float#
                                           (GHC.Prim.+# -360# (GHC.Prim.*# x 15#))) } #)
                                GHC.Types.True
                                -> (# case w of wild2 { GHC.Types.I# x ->
                                      GHC.Types.F#
                                        (GHC.Prim.int2Float#
                                           (GHC.Prim.-# 360# (GHC.Prim.*# x 15#))) },
                                      GHC.Types.F#
                                        (GHC.Prim.int2Float#
                                           (GHC.Prim.-#
                                              365#
                                              (GHC.Prim.*# (GHC.Prim.-# ww 20#) 60#))) #) } }
                     } in
                     case GHC.Prim.tagToEnum#
                            @ GHC.Types.Bool
                            (GHC.Prim.>=# ww 12#) of wild {
                       GHC.Types.False -> $j1
                       GHC.Types.True
                       -> case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.<=# ww 21#) of wild1 {
                            GHC.Types.False -> $j1
                            GHC.Types.True
                            -> (# GHC.Types.F#
                                    (GHC.Prim.int2Float#
                                       (GHC.Prim.+# -365# (GHC.Prim.*# (GHC.Prim.-# ww 10#) 60#))),
                                  case w of wild2 { GHC.Types.I# x ->
                                  GHC.Types.F#
                                    (GHC.Prim.int2Float#
                                       (GHC.Prim.-# 360# (GHC.Prim.*# x 15#))) } #) } }
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 1#) of wild {
                   GHC.Types.False -> $j
                   GHC.Types.True
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.<=# ww 11#) of wild1 {
                        GHC.Types.False -> $j
                        GHC.Types.True
                        -> (# case w of wild2 { GHC.Types.I# x ->
                              GHC.Types.F#
                                (GHC.Prim.int2Float# (GHC.Prim.+# -360# (GHC.Prim.*# x 15#))) },
                              GHC.Types.F#
                                (GHC.Prim.int2Float#
                                   (GHC.Prim.+# -350# (GHC.Prim.*# ww 60#))) #) } }) -}
8c41d93dd2c933fe6b14b2a87bca36ce
  $wgetTypeCell :: GHC.Prim.Int# -> [GHC.Types.Char]
  {- Arity: 1, Strictness: <S,1*U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#) ->
                 case ww of wild {
                   DEFAULT -> Monopoly.changePlayerCell15
                   1# -> Monopoly.changePlayerCell13
                   3# -> Monopoly.changePlayerCell11
                   5# -> Monopoly.changePlayerCell9
                   8# -> Monopoly.changePlayerCell7
                   11# -> Monopoly.changePlayerCell5
                   18# -> Monopoly.changePlayerCell11
                   21# -> Monopoly.changePlayerCell5
                   23# -> Monopoly.changePlayerCell7
                   31# -> Monopoly.changePlayerCell3
                   34# -> Monopoly.changePlayerCell11
                   37# -> Monopoly.changePlayerCell7
                   39# -> Monopoly.changePlayerCell1 }) -}
bad03acef8ee0b70fe7001269c377ec2
  $wisPay ::
    GHC.Prim.Float# -> GHC.Types.Float -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><L,U(U)>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Float#) (ww1 :: GHC.Types.Float) ->
                 let {
                   $j :: GHC.Base.Maybe GHC.Types.Bool <join 0>
                   = case GHC.Prim.tagToEnum#
                            @ GHC.Types.Bool
                            (GHC.Prim.gtFloat# ww 0.0#) of wild {
                       GHC.Types.False -> GHC.Base.Nothing @ GHC.Types.Bool
                       GHC.Types.True
                       -> case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.ltFloat# ww 100.0#) of wild1 {
                            GHC.Types.False -> GHC.Base.Nothing @ GHC.Types.Bool
                            GHC.Types.True
                            -> case ww1 of wild2 { GHC.Types.F# x ->
                               case GHC.Prim.tagToEnum#
                                      @ GHC.Types.Bool
                                      (GHC.Prim.gtFloat# x -50.0#) of wild3 {
                                 GHC.Types.False -> GHC.Base.Nothing @ GHC.Types.Bool
                                 GHC.Types.True
                                 -> case GHC.Prim.tagToEnum#
                                           @ GHC.Types.Bool
                                           (GHC.Prim.ltFloat# x 50.0#) of wild4 {
                                      GHC.Types.False -> GHC.Base.Nothing @ GHC.Types.Bool
                                      GHC.Types.True -> Monopoly.handleGame2 } } } } }
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.ltFloat# ww 0.0#) of wild {
                   GHC.Types.False -> $j
                   GHC.Types.True
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.gtFloat# ww -100.0#) of wild1 {
                        GHC.Types.False -> $j
                        GHC.Types.True
                        -> case ww1 of wild2 { GHC.Types.F# x ->
                           case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.gtFloat# x -50.0#) of wild3 {
                             GHC.Types.False -> $j
                             GHC.Types.True
                             -> case GHC.Prim.tagToEnum#
                                       @ GHC.Types.Bool
                                       (GHC.Prim.ltFloat# x 50.0#) of wild4 {
                                  GHC.Types.False -> $j
                                  GHC.Types.True -> Monopoly.handleGame1 } } } } }) -}
749b93015cfcfb3015751dc2a66918fd
  $wmakeStepFeatures ::
    [Monopoly.Player]
    -> GHC.Types.Int
    -> GHC.Base.Maybe GHC.Types.Int
    -> Monopoly.Cubes
    -> [Monopoly.Street]
    -> GHC.Base.String
    -> (# [Monopoly.Player], GHC.Types.Int,
          GHC.Base.Maybe GHC.Types.Int, Monopoly.Cubes, [Monopoly.Street],
          GHC.Base.String #)
  {- Arity: 6, Strictness: <L,U><L,U(U)><L,U><L,U><L,U><S,U>,
     Inline: [0],
     Unfolding: (\ (ww :: [Monopoly.Player])
                   (ww1 :: GHC.Types.Int)
                   (ww2 :: GHC.Base.Maybe GHC.Types.Int)
                   (ww3 :: Monopoly.Cubes)
                   (ww4 :: [Monopoly.Street])
                   (ww5 :: GHC.Base.String) ->
                 case GHC.Base.eqString ww5 Monopoly.changePlayerCell13 of wild {
                   GHC.Types.False
                   -> case GHC.Base.eqString ww5 Monopoly.changePlayerCell9 of wild1 {
                        GHC.Types.False
                        -> case GHC.Base.eqString ww5 Monopoly.changePlayerCell1 of wild2 {
                             GHC.Types.False
                             -> case GHC.Base.eqString ww5 Monopoly.changePlayerCell5 of wild3 {
                                  GHC.Types.False
                                  -> case ww1 of ww6 { GHC.Types.I# ww7 ->
                                     case GHC.List.$w!!
                                            @ Monopoly.Player
                                            ww
                                            (GHC.Prim.-#
                                               ww7
                                               1#) of wild4 { Monopoly.Player ds ds1 ds2 ds3 ds4 ->
                                     case ds3 of wild5 { GHC.Types.I# x ->
                                     case GHC.List.$w!!
                                            @ Monopoly.Street
                                            ww4
                                            (GHC.Prim.-#
                                               x
                                               1#) of wild6 { Monopoly.Street ds5 ds6 ds7 ds8 ds9 ->
                                     case ds7 of wild7 {
                                       GHC.Types.False -> (# ww, ww6, ww2, ww3, ww4, ww5 #)
                                       GHC.Types.True
                                       -> Monopoly.$wpayTax ww ww6 ww2 ww3 ww4 ww5 ds8 } } } } }
                                  GHC.Types.True
                                  -> (# ww,
                                        case ww1 of wild4 { GHC.Types.I# x ->
                                        GHC.Types.I# (GHC.Prim.+# (GHC.Prim.andI# x 3#) 1#) },
                                        ww2, ww3, ww4, ww5 #) }
                             GHC.Types.True
                             -> Monopoly.$wpayTax
                                  ww
                                  ww1
                                  ww2
                                  ww3
                                  ww4
                                  ww5
                                  Monopoly.makeStepFeatures2 }
                        GHC.Types.True
                        -> Monopoly.$wpayTax
                             ww
                             ww1
                             ww2
                             ww3
                             ww4
                             ww5
                             Monopoly.makeStepFeatures1 }
                   GHC.Types.True -> (# ww, ww1, ww2, ww3, ww4, ww5 #) }) -}
b0adcd5982e7913be1cfc403d8778ea9
  $wpayTax ::
    [Monopoly.Player]
    -> GHC.Types.Int
    -> GHC.Base.Maybe GHC.Types.Int
    -> Monopoly.Cubes
    -> [Monopoly.Street]
    -> GHC.Base.String
    -> GHC.Types.Int
    -> (# [Monopoly.Player], GHC.Types.Int,
          GHC.Base.Maybe GHC.Types.Int, Monopoly.Cubes, [Monopoly.Street],
          GHC.Base.String #)
  {- Arity: 7,
     Strictness: <L,U><L,U(U)><L,U><L,U><L,U><L,U><L,1*U(U)>,
     Inline: [0],
     Unfolding: (\ (ww :: [Monopoly.Player])
                   (ww1 :: GHC.Types.Int)
                   (ww2 :: GHC.Base.Maybe GHC.Types.Int)
                   (ww3 :: Monopoly.Cubes)
                   (ww4 :: [Monopoly.Street])
                   (ww5 :: GHC.Base.String)
                   (w :: GHC.Types.Int) ->
                 (# case ww1 of wild { GHC.Types.I# x ->
                    let {
                      y :: GHC.Prim.Int# = GHC.Prim.-# x 1#
                    } in
                    let {
                      n :: Monopoly.Player
                      = case GHC.List.$w!!
                               @ Monopoly.Player
                               ww
                               y of wild1 { Monopoly.Player ds ds1 ds2 ds3 ds4 ->
                        Monopoly.Player
                          ds
                          (case ds1 of wild2 { GHC.Types.I# x1 ->
                           case w of wild3 { GHC.Types.I# y1 ->
                           GHC.Types.I# (GHC.Prim.-# x1 y1) } })
                          ds2
                          ds3
                          ds4 }
                    } in
                    let {
                      n1 :: [Monopoly.Player]
                      = case GHC.List.$wlenAcc
                               @ Monopoly.Player
                               ww
                               0# of ww6 { DEFAULT ->
                        let {
                          y1 :: GHC.Prim.Int# = GHC.Prim.-# ww6 x
                        } in
                        case GHC.Prim.tagToEnum#
                               @ GHC.Types.Bool
                               (GHC.Prim.<# 0# y1) of wild1 {
                          GHC.Types.False -> Monopoly.changePlayerCell17
                          GHC.Types.True
                          -> GHC.List.reverse1
                               @ Monopoly.Player
                               (GHC.List.$wunsafeTake
                                  @ Monopoly.Player
                                  y1
                                  (GHC.List.reverse1
                                     @ Monopoly.Player
                                     ww
                                     (GHC.Types.[] @ Monopoly.Player)))
                               (GHC.Types.[] @ Monopoly.Player) } }
                    } in
                    let {
                      n2 :: [Monopoly.Player] = GHC.Types.: @ Monopoly.Player n n1
                    } in
                    case GHC.Prim.tagToEnum#
                           @ GHC.Types.Bool
                           (GHC.Prim.<# 0# y) of wild1 {
                      GHC.Types.False -> n2
                      GHC.Types.True
                      -> letrec {
                           $wgo :: [Monopoly.Player] -> GHC.Prim.Int# -> [Monopoly.Player]
                             {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0] -}
                           = \ (w1 :: [Monopoly.Player]) (ww6 :: GHC.Prim.Int#) ->
                             case w1 of wild2 {
                               [] -> n2
                               : y1 ys
                               -> case ww6 of ds1 {
                                    DEFAULT
                                    -> GHC.Types.:
                                         @ Monopoly.Player
                                         y1
                                         ($wgo ys (GHC.Prim.-# ds1 1#))
                                    1# -> GHC.Types.: @ Monopoly.Player y1 n2 } }
                         } in
                         $wgo ww y } },
                    case ww1 of wild1 { GHC.Types.I# x ->
                    GHC.Types.I# (GHC.Prim.+# (GHC.Prim.andI# x 3#) 1#) },
                    ww2, ww3, ww4, ww5 #)) -}
d15a78157415196aa8616bbb4f87e4e1
  data Cubes
    = Cubes {firstCube :: GHC.Types.Int, secondCube :: GHC.Types.Int}
e82b4e3318daaeb987adaca730bd19d2
  data GameState
    = GameState {players :: [Monopoly.Player],
                 gamePlayer :: GHC.Types.Int,
                 haveWinner :: GHC.Base.Maybe GHC.Types.Int,
                 cubes :: Monopoly.Cubes,
                 land :: [Monopoly.Street],
                 typeStep :: GHC.Base.String}
9704b783e118453906eb0535e16ebb5e
  data Images
    = Images {imagePieceRed :: Graphics.Gloss.Internals.Data.Picture.Picture,
              imagePieceBlue :: Graphics.Gloss.Internals.Data.Picture.Picture,
              imagePieceGreen :: Graphics.Gloss.Internals.Data.Picture.Picture,
              imagePieceYellow :: Graphics.Gloss.Internals.Data.Picture.Picture,
              imagePlayingField :: Graphics.Gloss.Internals.Data.Picture.Picture,
              imagePayMenu :: Graphics.Gloss.Internals.Data.Picture.Picture}
78cf08954a4a97e6e70eb90650024072
  class Physical a where
    getPosition :: a -> Graphics.Gloss.Internals.Data.Picture.Point
    getCell :: a -> GHC.Types.Int
    setPosition :: Graphics.Gloss.Internals.Data.Picture.Point
                   -> a -> a
    setCell :: GHC.Types.Int -> a -> a
    {-# MINIMAL getPosition, getCell, setPosition, setCell #-}
0a10b1c475ab42bce8e36804deec12c5
  data Player
    = Player {colour :: GHC.Types.Int,
              money :: GHC.Types.Int,
              property :: [Monopoly.Street],
              playerCell :: GHC.Types.Int,
              playerPosition :: Graphics.Gloss.Internals.Data.Picture.Point}
b6b00bf78dc3a464729bafe1bdc8000f
  data Street
    = Street {name :: GHC.Base.String,
              price :: GHC.Types.Int,
              isRent :: GHC.Types.Bool,
              priceRent :: GHC.Types.Int,
              owner :: GHC.Types.Int}
2f45452b58e09d1354de9100ae106f2c
  canGo :: Monopoly.GameState -> GHC.Base.Maybe Monopoly.GameState
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>m2,
     Unfolding: InlineRule (0, True, True)
                (GHC.Base.Just @ Monopoly.GameState) -}
4e3710782c66e4ab48b87ceda8911d02
  chanceCard :: Monopoly.GameState -> Monopoly.GameState
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U,U,U,U,U,U)>m,
     Unfolding: InlineRule (1, True, True)
                (\ (gameState :: Monopoly.GameState) -> gameState) -}
5765d8b6c89ce6d73672a3f721160584
  changePlayerCell :: Monopoly.GameState -> Monopoly.GameState
  {- Arity: 1, Strictness: <S,1*U(U,U(U),U,U(U(U),U(U)),U,A)>m,
     Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Monopoly.GameState) ->
                 case w of ww { Monopoly.GameState ww1 ww2 ww3 ww4 ww5 ww6 ->
                 case Monopoly.$wchangePlayerCell
                        ww1
                        ww2
                        ww3
                        ww4
                        ww5 of ww7 { (#,,,,,#) ww8 ww9 ww10 ww11 ww12 ww13 ->
                 Monopoly.GameState ww8 ww9 ww10 ww11 ww12 ww13 } }) -}
b391cef512292acd0a43b1cfb6737c2a
  changePlayerCell1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCStringUtf8#
                   Monopoly.changePlayerCell2) -}
3362c2a8ca0ea6e1df3e5a3a7e683dde
  changePlayerCell10 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("\\208\\189\\208\\176\\208\\187\\208\\190\\208\\179"#) -}
2c3dc01d380a781efa110a4a66546fa7
  changePlayerCell11 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCStringUtf8#
                   Monopoly.changePlayerCell12) -}
f51f6f41186854a57e0a4df077fd4dc8
  changePlayerCell12 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("\\208\\186\\208\\176\\208\\183\\208\\189\\208\\176"#) -}
d169c794ec4d6689e95453be176e23d2
  changePlayerCell13 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCStringUtf8#
                   Monopoly.changePlayerCell14) -}
246fe6afc7174413e1692894a35a6864
  changePlayerCell14 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("\\209\\129\\209\\130\\208\\176\\209\\128\\209\\130"#) -}
054ce920e65960aeab4efc47dde1581c
  changePlayerCell15 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCStringUtf8#
                   Monopoly.changePlayerCell16) -}
09beff40332bf720d57581a86e53858e
  changePlayerCell16 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("\\209\\131\\208\\187\\208\\184\\209\\134\\208\\176"#) -}
cd3f089b02584dc53534088eec965f92
  changePlayerCell17 :: [Monopoly.Player]
  {- Unfolding: (GHC.List.reverse1
                   @ Monopoly.Player
                   (GHC.Types.[] @ Monopoly.Player)
                   (GHC.Types.[] @ Monopoly.Player)) -}
fc0be2d4fbf86a7401778308b516830a
  changePlayerCell2 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("\\209\\129\\208\\178\\208\\181\\209\\128\\209\\133\\208\\189\\208\\176\\208\\187\\208\\190\\208\\179"#) -}
799c498ee2d6cf79c08b24d47ed29ed3
  changePlayerCell3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCStringUtf8#
                   Monopoly.changePlayerCell4) -}
563bcad3b6e0cd81668b189a2aad3978
  changePlayerCell4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("\\209\\130\\209\\142\\209\\128\\209\\140\\208\\188\\208\\176"#) -}
c5fbbc02688e5e717f7677f441277bdb
  changePlayerCell5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCStringUtf8#
                   Monopoly.changePlayerCell6) -}
db064de95049ef5015b25b8570ef6dee
  changePlayerCell6 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("\\209\\129\\209\\130\\208\\190\\209\\143\\208\\189\\208\\186\\208\\176"#) -}
4504dbc5290fa36d931966c1e62289e5
  changePlayerCell7 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCStringUtf8#
                   Monopoly.changePlayerCell8) -}
02fb028924f8a123fe5118217867ad7c
  changePlayerCell8 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("\\209\\136\\208\\176\\208\\189\\209\\129"#) -}
2ecec5dcb1804cc450cf8643f5a5f0ed
  changePlayerCell9 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCStringUtf8#
                   Monopoly.changePlayerCell10) -}
0a10b1c475ab42bce8e36804deec12c5
  colour :: Monopoly.Player -> GHC.Types.Int
  RecSel Left Monopoly.Player
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(SLLLL),1*U(1*U(U),A,A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Monopoly.Player) ->
                 case ds of wild { Monopoly.Player ds1 ds2 ds3 ds4 ds5 -> ds1 }) -}
e82b4e3318daaeb987adaca730bd19d2
  cubes :: Monopoly.GameState -> Monopoly.Cubes
  RecSel Left Monopoly.GameState
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLSLL),1*U(A,A,A,1*U(U,U),A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Monopoly.GameState) ->
                 case ds of wild { Monopoly.GameState ds1 ds2 ds3 ds4 ds5 ds6 ->
                 ds4 }) -}
308dfd1dfd5b5728d906936b51f34bf8
  doStep ::
    Graphics.Gloss.Internals.Data.Picture.Point
    -> Monopoly.GameState -> Monopoly.GameState
  {- Arity: 2, Strictness: <L,A><S(LLSLLL),1*U(U,U(U),U,U,U,U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ (point :: Graphics.Gloss.Internals.Data.Picture.Point)
                   (gameState :: Monopoly.GameState) ->
                 case gameState of wild { Monopoly.GameState ds ds1 ds2 ds3 ds4 ds5 ->
                 case ds2 of wild1 {
                   GHC.Base.Nothing
                   -> Monopoly.makeStepFeatures
                        (Monopoly.changePlayerCell
                           (Monopoly.GameState
                              ds
                              ds1
                              (GHC.Base.Nothing @ GHC.Types.Int)
                              Monopoly.doStep1
                              ds4
                              ds5))
                   GHC.Base.Just ds6 -> wild } }) -}
88424d588f1f0fead46d259cb72975ae
  doStep1 :: Monopoly.Cubes
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (Monopoly.Cubes Monopoly.doStep3 Monopoly.doStep2) -}
c86669d5b4861b468052a683a135defa
  doStep2 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 2#) -}
1955f56437b5e0131ffc5e903a43dc48
  doStep3 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 1#) -}
4ce82b3f8518877fa679e2bac16de926
  drawGameState ::
    Monopoly.Images
    -> Monopoly.GameState
    -> Graphics.Gloss.Internals.Data.Picture.Picture
  {- Arity: 2,
     Strictness: <L,U(U,U,U,U,U,U)><S(LLLLLS),1*U(U,A,A,A,A,U)>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Monopoly.Images) (w1 :: Monopoly.GameState) ->
                 case w1 of ww { Monopoly.GameState ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Monopoly.$wdrawGameState w ww1 ww6 }) -}
7f0fec3a60b72a70082be1161931190b
  drawPayMenu ::
    Graphics.Gloss.Internals.Data.Picture.Picture
    -> Graphics.Gloss.Internals.Data.Picture.Picture
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>m11,
     Unfolding: InlineRule (1, True, False)
                (\ (image :: Graphics.Gloss.Internals.Data.Picture.Picture) ->
                 Graphics.Gloss.Internals.Data.Picture.Translate
                   Monopoly.drawPayMenu1
                   Monopoly.drawPayMenu1
                   image) -}
a65cf89efc0e2f8ec821805c3ced99e9
  drawPayMenu1 :: GHC.Types.Float
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.F# 0.0#) -}
356c1896fd38ef7c9bdd27a0bd780924
  drawPiece ::
    Graphics.Gloss.Internals.Data.Picture.Picture
    -> Monopoly.Player -> Graphics.Gloss.Internals.Data.Picture.Picture
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,U><L,1*U(A,A,A,A,1*U(1*U,1*U))>m11,
     Unfolding: InlineRule (2, True, False)
                (\ (image :: Graphics.Gloss.Internals.Data.Picture.Picture)
                   (player :: Monopoly.Player) ->
                 let {
                   ds :: (GHC.Types.Float, GHC.Types.Float)
                   = case player of wild { Monopoly.Player ds1 ds2 ds3 ds4 ds5 ->
                     ds5 }
                 } in
                 Graphics.Gloss.Internals.Data.Picture.Translate
                   (case ds of wild { (,) x y -> x })
                   (case ds of wild { (,) x y -> y })
                   (Graphics.Gloss.Internals.Data.Picture.Scale
                      Monopoly.drawPiece_r
                      Monopoly.drawPiece_r
                      image)) -}
d15b86109c92e41c8e972ede2658785b
  drawPiece_r :: GHC.Types.Float
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.F# 2.0#) -}
140c283ba138ad4af45fd4b5b514cdd8
  drawPlayingField ::
    Graphics.Gloss.Internals.Data.Picture.Picture
    -> Graphics.Gloss.Internals.Data.Picture.Picture
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>m11,
     Unfolding: InlineRule (1, True, False)
                (\ (image :: Graphics.Gloss.Internals.Data.Picture.Picture) ->
                 Graphics.Gloss.Internals.Data.Picture.Translate
                   Monopoly.drawPayMenu1
                   Monopoly.drawPayMenu1
                   image) -}
d15a78157415196aa8616bbb4f87e4e1
  firstCube :: Monopoly.Cubes -> GHC.Types.Int
  RecSel Left Monopoly.Cubes
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SL),1*U(1*U(U),A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Monopoly.Cubes) ->
                 case ds of wild { Monopoly.Cubes ds1 ds2 -> ds1 }) -}
e82b4e3318daaeb987adaca730bd19d2
  gamePlayer :: Monopoly.GameState -> GHC.Types.Int
  RecSel Left Monopoly.GameState
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LSLLLL),1*U(A,1*U(U),A,A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Monopoly.GameState) ->
                 case ds of wild { Monopoly.GameState ds1 ds2 ds3 ds4 ds5 ds6 ->
                 ds2 }) -}
b655285bd9c24a5669506db8d0aa31f4
  getPlayerPosition ::
    GHC.Types.Int
    -> GHC.Types.Int -> Graphics.Gloss.Internals.Data.Picture.Point
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*U(U)><S(S),1*U(U)>m,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int) (w1 :: GHC.Types.Int) ->
                 case w1 of ww { GHC.Types.I# ww1 ->
                 case Monopoly.$wgetPlayerPosition w ww1 of ww2 { (#,#) ww3 ww4 ->
                 (ww3, ww4) } }) -}
d2d7e1aa8cdf55698718289f8fc1cb99
  getTypeCell :: GHC.Types.Int -> GHC.Base.String
  {- Arity: 1, Strictness: <S(S),1*U(1*U)>, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: GHC.Types.Int) ->
                 case w of ww { GHC.Types.I# ww1 -> Monopoly.$wgetTypeCell ww1 }) -}
3b9dc76a5e246c84ff8bedcb4db5c93a
  handleGame ::
    Graphics.Gloss.Internals.Interface.Event.Event
    -> Monopoly.GameState -> Monopoly.GameState
  {- Arity: 2, Strictness: <S,1*U><S,1*U(U,U(U),U,U,U,U)>m,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Graphics.Gloss.Internals.Interface.Event.Event)
                   (w1 :: Monopoly.GameState) ->
                 case w1 of ww { Monopoly.GameState ww1 ww2 ww3 ww4 ww5 ww6 ->
                 case w of wild {
                   DEFAULT -> Monopoly.GameState ww1 ww2 ww3 ww4 ww5 ww6
                   Graphics.Gloss.Internals.Interface.Event.EventKey ds ds1 ds2 mouse
                   -> case ds of wild1 {
                        DEFAULT -> Monopoly.GameState ww1 ww2 ww3 ww4 ww5 ww6
                        Graphics.Gloss.Internals.Interface.Backend.Types.MouseButton ds3
                        -> case ds3 of wild2 {
                             DEFAULT -> Monopoly.GameState ww1 ww2 ww3 ww4 ww5 ww6
                             Graphics.Gloss.Internals.Interface.Backend.Types.LeftButton
                             -> case ds1 of wild3 {
                                  Graphics.Gloss.Internals.Interface.Backend.Types.Down
                                  -> case GHC.Base.eqString ww6 Monopoly.handleGame3 of wild4 {
                                       GHC.Types.False
                                       -> case GHC.Base.eqString
                                                 ww6
                                                 Monopoly.changePlayerCell15 of wild5 {
                                            GHC.Types.False
                                            -> Monopoly.GameState ww1 ww2 ww3 ww4 ww5 ww6
                                            GHC.Types.True
                                            -> case mouse of ww7 { (,) ww8 ww9 ->
                                               case ww8 of ww10 { GHC.Types.F# ww11 ->
                                               case Monopoly.$wisPay ww11 ww9 of wild6 {
                                                 GHC.Base.Nothing
                                                 -> Monopoly.GameState ww1 ww2 ww3 ww4 ww5 ww6
                                                 GHC.Base.Just ds4
                                                 -> case ds4 of wild7 {
                                                      GHC.Types.False
                                                      -> Monopoly.GameState
                                                           ww1
                                                           (case ww2 of wild8 { GHC.Types.I# x ->
                                                            GHC.Types.I#
                                                              (GHC.Prim.+#
                                                                 (GHC.Prim.andI# x 3#)
                                                                 1#) })
                                                           ww3
                                                           ww4
                                                           ww5
                                                           Monopoly.handleGame3
                                                      GHC.Types.True
                                                      -> Monopoly.GameState
                                                           ww1
                                                           (case ww2 of wild8 { GHC.Types.I# x ->
                                                            GHC.Types.I#
                                                              (GHC.Prim.+#
                                                                 (GHC.Prim.andI# x 3#)
                                                                 1#) })
                                                           ww3
                                                           ww4
                                                           ww5
                                                           Monopoly.handleGame3 } } } } }
                                       GHC.Types.True
                                       -> case ww3 of wild5 {
                                            GHC.Base.Nothing
                                            -> case Monopoly.$wchangePlayerCell
                                                      ww1
                                                      ww2
                                                      (GHC.Base.Nothing @ GHC.Types.Int)
                                                      Monopoly.doStep1
                                                      ww5 of ww7 { (#,,,,,#) ww8 ww9 ww10 ww11 ww12 ww13 ->
                                               case Monopoly.$wmakeStepFeatures
                                                      ww8
                                                      ww9
                                                      ww10
                                                      ww11
                                                      ww12
                                                      ww13 of ww14 { (#,,,,,#) ww15 ww16 ww17 ww18 ww19 ww20 ->
                                               Monopoly.GameState ww15 ww16 ww17 ww18 ww19 ww20 } }
                                            GHC.Base.Just ds4
                                            -> Monopoly.GameState ww1 ww2 wild5 ww4 ww5 ww6 } }
                                  Graphics.Gloss.Internals.Interface.Backend.Types.Up
                                  -> Monopoly.GameState ww1 ww2 ww3 ww4 ww5 ww6 } } } } }) -}
151fa07d901abba15afb8ca0099ee487
  handleGame1 :: GHC.Base.Maybe GHC.Types.Bool
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Base.Just @ GHC.Types.Bool GHC.Types.True) -}
6189111d8b9fd76692e8e3bf2c9ed65e
  handleGame2 :: GHC.Base.Maybe GHC.Types.Bool
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Base.Just @ GHC.Types.Bool GHC.Types.False) -}
567cb98c19df4500c63593302226198d
  handleGame3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCStringUtf8#
                   Monopoly.handleGame4) -}
370eee20576c5a19a59e84e2092991ae
  handleGame4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("\\209\\133\\208\\190\\208\\180"#) -}
673baba606b4ecd2b46d40f8691dca28
  handlePay ::
    Graphics.Gloss.Internals.Interface.Event.Event
    -> Monopoly.GameState -> Monopoly.GameState
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S,1*U><S,1*U(U,U,U,U,U,U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: Graphics.Gloss.Internals.Interface.Event.Event)
                   (eta :: Monopoly.GameState) ->
                 case ds of wild {
                   DEFAULT -> eta
                   Graphics.Gloss.Internals.Interface.Event.EventKey ds1 ds2 ds3 mouse
                   -> case ds1 of wild1 {
                        DEFAULT -> eta
                        Graphics.Gloss.Internals.Interface.Backend.Types.MouseButton ds4
                        -> case ds4 of wild2 {
                             DEFAULT -> eta
                             Graphics.Gloss.Internals.Interface.Backend.Types.LeftButton
                             -> case ds2 of wild3 { DEFAULT -> eta } } } }) -}
e82b4e3318daaeb987adaca730bd19d2
  haveWinner :: Monopoly.GameState -> GHC.Base.Maybe GHC.Types.Int
  RecSel Left Monopoly.GameState
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLSLLL),1*U(A,A,1*U,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Monopoly.GameState) ->
                 case ds of wild { Monopoly.GameState ds1 ds2 ds3 ds4 ds5 ds6 ->
                 ds3 }) -}
9704b783e118453906eb0535e16ebb5e
  imagePayMenu ::
    Monopoly.Images -> Graphics.Gloss.Internals.Data.Picture.Picture
  RecSel Left Monopoly.Images
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLS),1*U(A,A,A,A,A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Monopoly.Images) ->
                 case ds of wild { Monopoly.Images ds1 ds2 ds3 ds4 ds5 ds6 ->
                 ds6 }) -}
9704b783e118453906eb0535e16ebb5e
  imagePieceBlue ::
    Monopoly.Images -> Graphics.Gloss.Internals.Data.Picture.Picture
  RecSel Left Monopoly.Images
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LSLLLL),1*U(A,1*U,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Monopoly.Images) ->
                 case ds of wild { Monopoly.Images ds1 ds2 ds3 ds4 ds5 ds6 ->
                 ds2 }) -}
9704b783e118453906eb0535e16ebb5e
  imagePieceGreen ::
    Monopoly.Images -> Graphics.Gloss.Internals.Data.Picture.Picture
  RecSel Left Monopoly.Images
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLSLLL),1*U(A,A,1*U,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Monopoly.Images) ->
                 case ds of wild { Monopoly.Images ds1 ds2 ds3 ds4 ds5 ds6 ->
                 ds3 }) -}
9704b783e118453906eb0535e16ebb5e
  imagePieceRed ::
    Monopoly.Images -> Graphics.Gloss.Internals.Data.Picture.Picture
  RecSel Left Monopoly.Images
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(SLLLLL),1*U(1*U,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Monopoly.Images) ->
                 case ds of wild { Monopoly.Images ds1 ds2 ds3 ds4 ds5 ds6 ->
                 ds1 }) -}
9704b783e118453906eb0535e16ebb5e
  imagePieceYellow ::
    Monopoly.Images -> Graphics.Gloss.Internals.Data.Picture.Picture
  RecSel Left Monopoly.Images
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLSLL),1*U(A,A,A,1*U,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Monopoly.Images) ->
                 case ds of wild { Monopoly.Images ds1 ds2 ds3 ds4 ds5 ds6 ->
                 ds4 }) -}
9704b783e118453906eb0535e16ebb5e
  imagePlayingField ::
    Monopoly.Images -> Graphics.Gloss.Internals.Data.Picture.Picture
  RecSel Left Monopoly.Images
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLSL),1*U(A,A,A,A,1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Monopoly.Images) ->
                 case ds of wild { Monopoly.Images ds1 ds2 ds3 ds4 ds5 ds6 ->
                 ds5 }) -}
d3fc263873253c6dd4ef9e6814a3a85a
  initGame :: Monopoly.GameState
  {- Strictness: m,
     Unfolding: (Monopoly.GameState
                   Monopoly.initGame214
                   Monopoly.doStep3
                   (GHC.Base.Nothing @ GHC.Types.Int)
                   Monopoly.initGame213
                   Monopoly.initGame1
                   Monopoly.handleGame3) -}
9ded3b4ab8701f277e564a74624e8614
  initGame1 :: [Monopoly.Street]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Monopoly.Street
                   Monopoly.initGame206
                   Monopoly.initGame2) -}
6a779bb39cf8d656a26ced54a9395fe3
  initGame10 :: [Monopoly.Street]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Monopoly.Street
                   Monopoly.initGame172
                   Monopoly.initGame11) -}
5133123ce6e3b86d42680f4a756a995b
  initGame100 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 260#) -}
8a8a888ccab1b7684fb0a7aeeaab612c
  initGame101 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCStringUtf8#
                   Monopoly.initGame102) -}
312bf7c4c87e49537e9fc821828ea703
  initGame102 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("\\208\\144\\208\\161\\208\\146\\208\\154 \\208\\155\\208\\146\\208\\154"#) -}
077f32dcac8a4c280f50b74e9b2becbe
  initGame103 :: Monopoly.Street
  {- Strictness: m,
     Unfolding: (Monopoly.Street
                   Monopoly.initGame104
                   Monopoly.initGame100
                   GHC.Types.False
                   Monopoly.initGame42
                   Monopoly.initGame42) -}
d21e342eef0e7b5b03569800688b27ba
  initGame104 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCStringUtf8#
                   Monopoly.initGame105) -}
b0d55fe47636a8f184ff133c2c5ff354
  initGame105 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("\\208\\144\\208\\161\\208\\146\\208\\154 \\208\\155\\208\\145\\208\\152\\208\\161"#) -}
068efe1df208dc11faf5167cf68287cb
  initGame106 :: Monopoly.Street
  {- Strictness: m,
     Unfolding: (Monopoly.Street
                   Monopoly.initGame107
                   Monopoly.makeStepFeatures1
                   GHC.Types.False
                   Monopoly.initGame42
                   Monopoly.initGame42) -}
b1b5226f8aea47654b85681a7214572c
  initGame107 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCStringUtf8#
                   Monopoly.initGame108) -}
046510bc7d998186ef91eb306cd6ffec
  initGame108 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("\\208\\156\\208\\176\\209\\136\\208\\183\\208\\176\\208\\187 3"#) -}
901378eff2c335b98c0f39600bfa0eda
  initGame109 :: Monopoly.Street
  {- Strictness: m,
     Unfolding: (Monopoly.Street
                   Monopoly.initGame111
                   Monopoly.initGame110
                   GHC.Types.False
                   Monopoly.initGame42
                   Monopoly.initGame42) -}
43b784d0d40f9f29fa04ca4e5f51b2b8
  initGame11 :: [Monopoly.Street]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Monopoly.Street
                   Monopoly.initGame165
                   Monopoly.initGame12) -}
a742fcd23ae490f08e974a76e253a1b0
  initGame110 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 240#) -}
b4e41cb85acfaddf91f8f55826daf1d0
  initGame111 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCStringUtf8#
                   Monopoly.initGame112) -}
76e31fdfbcedfe2538b0618ac10f6e04
  initGame112 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("\\208\\156\\208\\144\\208\\162\\208\\161\\208\\162\\208\\144\\208\\162 \\208\\156\\208\\158\\208\\162\\208\\146\\208\\171"#) -}
da8178ff52cd942a45252d3de0f37776
  initGame113 :: Monopoly.Street
  {- Strictness: m,
     Unfolding: (Monopoly.Street
                   Monopoly.initGame115
                   Monopoly.initGame114
                   GHC.Types.False
                   Monopoly.initGame42
                   Monopoly.initGame42) -}
d87e3ee4b961263401326e653e653d1e
  initGame114 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 220#) -}
4ca6b4153d58d000b043a22030542c81
  initGame115 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCStringUtf8#
                   Monopoly.initGame116) -}
d3a57e52606e8d6b301a35644f063bf9
  initGame116 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("\\208\\156\\208\\144\\208\\162\\208\\161\\208\\162\\208\\144\\208\\162 \\208\\148\\208\\147\\208\\156\\208\\161"#) -}
e7ee8f517b50153a57c201a0156834a9
  initGame117 :: Monopoly.Street
  {- Strictness: m,
     Unfolding: (Monopoly.Street
                   Monopoly.initGame61
                   Monopoly.initGame121
                   Monopoly.initGame120
                   Monopoly.initGame119
                   Monopoly.initGame118) -}
dd90afafbd3d601e394801fbca3890fa
  initGame118 :: GHC.Types.Int
  {- Strictness: x -}
f97aae5ca74adbc628abd01b0f6905b7
  initGame119 :: GHC.Types.Int
  {- Strictness: x -}
917b00e93077dd67e629a9d43598be33
  initGame12 :: [Monopoly.Street]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Monopoly.Street
                   Monopoly.initGame162
                   Monopoly.initGame13) -}
530e85557264608b0a9d8936e1361bfd
  initGame120 :: GHC.Types.Bool
  {- Strictness: x -}
6901997c917f91af68873759c547ebb2
  initGame121 :: GHC.Types.Int
  {- Strictness: x -}
fd299a9510a043f9685d744d0d73192c
  initGame122 :: Monopoly.Street
  {- Strictness: m,
     Unfolding: (Monopoly.Street
                   Monopoly.initGame123
                   Monopoly.initGame114
                   GHC.Types.False
                   Monopoly.initGame42
                   Monopoly.initGame42) -}
19222a0c7aea16d25c614277dd790a87
  initGame123 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCStringUtf8#
                   Monopoly.initGame124) -}
430575de93a5faf64b956f66e35ec262
  initGame124 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("\\208\\156\\208\\144\\208\\162\\208\\161\\208\\162\\208\\144\\208\\162 \\208\\162\\208\\181\\208\\190\\209\\128\\208\\184\\209\\143 \\209\\128\\208\\184\\209\\129\\208\\186\\208\\190\\208\\178"#) -}
0c1633ff9b063f47ef19338f3e8bed91
  initGame125 :: Monopoly.Street
  {- Strictness: m,
     Unfolding: (Monopoly.Street
                   Monopoly.initGame130
                   Monopoly.initGame129
                   Monopoly.initGame128
                   Monopoly.initGame127
                   Monopoly.initGame126) -}
b2bd02c73c92796f0060c0e5602083c4
  initGame126 :: GHC.Types.Int
  {- Strictness: x -}
56906a64b8d7217f8c2c4814baa13e25
  initGame127 :: GHC.Types.Int
  {- Strictness: x -}
a8f3104793c46a806a71845a733a66ca
  initGame128 :: GHC.Types.Bool
  {- Strictness: x -}
da5c684069588a7b414b605e37dbed83
  initGame129 :: GHC.Types.Int
  {- Strictness: x -}
4704e9f6e2c45c684e2c8542d9f5f399
  initGame13 :: [Monopoly.Street]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Monopoly.Street
                   Monopoly.initGame159
                   Monopoly.initGame14) -}
48cf60a586f034f27c5bc9591295224f
  initGame130 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCStringUtf8#
                   Monopoly.initGame131) -}
aa7a3b5af731cbd187670328350fcd1a
  initGame131 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("\\208\\145\\208\\181\\209\\129\\208\\191\\208\\187\\208\\176\\209\\130\\208\\189\\208\\176\\209\\143 \\208\\186\\209\\131\\209\\128\\208\\184\\208\\187\\208\\186\\208\\176"#) -}
81d44a433037b73519c6f4c5c26967f4
  initGame132 :: Monopoly.Street
  {- Strictness: m,
     Unfolding: (Monopoly.Street
                   Monopoly.initGame133
                   Monopoly.makeStepFeatures1
                   GHC.Types.False
                   Monopoly.initGame42
                   Monopoly.initGame42) -}
d58a001da973f13883d99cf4eee7c1fc
  initGame133 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCStringUtf8#
                   Monopoly.initGame134) -}
c1299aaeaab6e1577146db3cbc4a19a8
  initGame134 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("\\208\\152\\208\\158 \\208\\148\\208\\181\\208\\189\\208\\184\\209\\129\\208\\190\\208\\178"#) -}
cd3471ccd408ff9d3be691043b900945
  initGame135 :: Monopoly.Street
  {- Strictness: m,
     Unfolding: (Monopoly.Street
                   Monopoly.initGame137
                   Monopoly.initGame136
                   GHC.Types.False
                   Monopoly.initGame42
                   Monopoly.initGame42) -}
2fecb95f64a82c84439f2ab4a6822ea4
  initGame136 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 180#) -}
403b390df1f9c79bde9313920c744e22
  initGame137 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCStringUtf8#
                   Monopoly.initGame138) -}
912483ec4430f37789032f5649b09625
  initGame138 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("\\208\\152\\208\\158 \\208\\157\\208\\190\\208\\178\\208\\184\\208\\186\\208\\190\\208\\178\\208\\176"#) -}
c4ca305c27a0f1850f55c0c5d56b55ef
  initGame139 :: Monopoly.Street
  {- Strictness: m,
     Unfolding: (Monopoly.Street
                   Monopoly.initGame143
                   Monopoly.initGame142
                   GHC.Types.False
                   Monopoly.initGame141
                   Monopoly.initGame140) -}
cff77d2f2169ea444f5f6830cd22d5f3
  initGame14 :: [Monopoly.Street]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Monopoly.Street
                   Monopoly.initGame155
                   Monopoly.initGame15) -}
bd514a06ebb1fbe3e9d7b0f93ef124c5
  initGame140 :: GHC.Types.Int
  {- Strictness: x -}
cd0b4fe7617db8aa53680671e94035c2
  initGame141 :: GHC.Types.Int
  {- Strictness: x -}
c15c3e03f91890e05a29637856677804
  initGame142 :: GHC.Types.Int
  {- Strictness: x -}
58b22a4f84ce3ebe14ded01acc6f8caf
  initGame143 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCStringUtf8#
                   Monopoly.initGame144) -}
492596c6b673b06fff7ccc486ef987e8
  initGame144 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("\\208\\158\\208\\177\\209\\137\\208\\181\\209\\129\\209\\130\\208\\178\\208\\181\\208\\189\\208\\189\\208\\176\\209\\143 \\208\\186\\208\\176\\208\\183\\208\\189\\208\\176"#) -}
646fba1ca5b820585f1780d70f831c80
  initGame145 :: Monopoly.Street
  {- Strictness: m,
     Unfolding: (Monopoly.Street
                   Monopoly.initGame146
                   Monopoly.initGame136
                   GHC.Types.False
                   Monopoly.initGame42
                   Monopoly.initGame42) -}
a1758c02be381517db1baf0e7377b846
  initGame146 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCStringUtf8#
                   Monopoly.initGame147) -}
96b6b59fc899ae1e1ff7c25cf412e45b
  initGame147 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("\\208\\152\\208\\158 \\208\\156\\208\\190\\209\\128\\208\\190\\208\\183\\208\\190\\208\\178"#) -}
2ebf888ed4e8b2cb7104740564c9c224
  initGame148 :: Monopoly.Street
  {- Strictness: m,
     Unfolding: (Monopoly.Street
                   Monopoly.initGame149
                   Monopoly.makeStepFeatures1
                   GHC.Types.False
                   Monopoly.initGame42
                   Monopoly.initGame42) -}
ed114f2a4dd83434a6285f87b59b81f9
  initGame149 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCStringUtf8#
                   Monopoly.initGame150) -}
00d13f69e431dc37ecf486e658e7d928
  initGame15 :: [Monopoly.Street]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Monopoly.Street
                   Monopoly.initGame151
                   Monopoly.initGame16) -}
6332374813b9473fb066406461c3c8b4
  initGame150 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("\\208\\156\\208\\176\\209\\136\\208\\183\\208\\176\\208\\187 2"#) -}
055e3e482ebd30f1f79d50ef6c391ebb
  initGame151 :: Monopoly.Street
  {- Strictness: m,
     Unfolding: (Monopoly.Street
                   Monopoly.initGame153
                   Monopoly.initGame152
                   GHC.Types.False
                   Monopoly.initGame42
                   Monopoly.initGame42) -}
e9abe3d7c76d3b18df414f53c359abe0
  initGame152 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 160#) -}
39df0dda4c0f48cdb54932aa7628fd09
  initGame153 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCStringUtf8#
                   Monopoly.initGame154) -}
d7b2a8f4e4bc7cab395772011e3a163a
  initGame154 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("\\208\\156\\208\\176\\209\\130\\208\\186\\208\\184\\208\\177 \\208\\148\\208\\184\\209\\129\\208\\186\\209\\128\\208\\181\\209\\130\\208\\189\\209\\139\\208\\185 \\208\\176\\208\\189\\208\\176\\208\\187\\208\\184\\208\\183"#) -}
9a3453b23f1c3f75b029260d86d0df26
  initGame155 :: Monopoly.Street
  {- Strictness: m,
     Unfolding: (Monopoly.Street
                   Monopoly.initGame157
                   Monopoly.initGame156
                   GHC.Types.False
                   Monopoly.initGame42
                   Monopoly.initGame42) -}
d4855cad160bcbfda873668a5e2ca590
  initGame156 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 140#) -}
15e0f70053c7ea8fad86fe2208db8240
  initGame157 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCStringUtf8#
                   Monopoly.initGame158) -}
9db49072fd3ad9ab8c360c051a475358
  initGame158 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("\\208\\156\\208\\176\\209\\130\\208\\154\\208\\184\\208\\177 \\208\\148\\208\\164\\208\\161\\208\\144"#) -}
24725fe2d9bed3455cd05725e961a475
  initGame159 :: Monopoly.Street
  {- Strictness: m,
     Unfolding: (Monopoly.Street
                   Monopoly.initGame160
                   Monopoly.initGame96
                   GHC.Types.False
                   Monopoly.initGame42
                   Monopoly.initGame42) -}
1dde2697bfa7f5eaa0f4afa3f0d73bd1
  initGame16 :: [Monopoly.Street]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Monopoly.Street
                   Monopoly.initGame148
                   Monopoly.initGame17) -}
2a7c332f62afac7805607c4e3d9eebe1
  initGame160 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCStringUtf8#
                   Monopoly.initGame161) -}
c185bddd69fb817647b7950163719aae
  initGame161 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("\\208\\159\\208\\190\\209\\130\\208\\181\\209\\128\\209\\143\\209\\136\\208\\186\\208\\184"#) -}
a8e7b78a10246f93f384e1d49ff44e90
  initGame162 :: Monopoly.Street
  {- Strictness: m,
     Unfolding: (Monopoly.Street
                   Monopoly.initGame163
                   Monopoly.initGame156
                   GHC.Types.False
                   Monopoly.initGame42
                   Monopoly.initGame42) -}
2e1c138c7f242e7601b67533939f1aef
  initGame163 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCStringUtf8#
                   Monopoly.initGame164) -}
a6625195f868efe5c1ce58a58457f22b
  initGame164 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("\\208\\156\\208\\176\\209\\130\\208\\154\\208\\184\\208\\177 \\208\\148\\208\\156\\208\\156\\208\\154"#) -}
2b343587c74cc9896321d54ead803d4d
  initGame165 :: Monopoly.Street
  {- Strictness: m,
     Unfolding: (Monopoly.Street
                   Monopoly.initGame170
                   Monopoly.initGame169
                   Monopoly.initGame168
                   Monopoly.initGame167
                   Monopoly.initGame166) -}
b5b07f225ec8ae980555e4ed3020ad56
  initGame166 :: GHC.Types.Int
  {- Strictness: x -}
d117d84f6ae87e27ec47cf0f737be3ec
  initGame167 :: GHC.Types.Int
  {- Strictness: x -}
7f2bbd2d680b6c9baf4fac71d5ef356a
  initGame168 :: GHC.Types.Bool
  {- Strictness: x -}
fa0f598c5c25dc1a2d915f31058d71d0
  initGame169 :: GHC.Types.Int
  {- Strictness: x -}
84e452a9ca52f8a384bae8f5a55f6575
  initGame17 :: [Monopoly.Street]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Monopoly.Street
                   Monopoly.initGame145
                   Monopoly.initGame18) -}
976f183a9cf6b83cd5182b3727936f32
  initGame170 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCStringUtf8#
                   Monopoly.initGame171) -}
1e5c7924fcd878c7bc0c2835233e09ed
  initGame171 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("\\208\\144\\208\\186\\208\\176\\208\\180\\208\\181\\208\\188"#) -}
40ac129dc162aafd58ec0f4ac62c80f1
  initGame172 :: Monopoly.Street
  {- Strictness: m,
     Unfolding: (Monopoly.Street
                   Monopoly.initGame174
                   Monopoly.initGame173
                   GHC.Types.False
                   Monopoly.initGame42
                   Monopoly.initGame42) -}
d7b7fa404a109ec09fd86c6c9c8c4b02
  initGame173 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 120#) -}
8cf3ed3e8c0706d5010cfb3d8e5e66ed
  initGame174 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCStringUtf8#
                   Monopoly.initGame175) -}
5e66cd7e7335b9218191c356f1e6ffc8
  initGame175 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("\\208\\161\\208\\159 \\208\\154\\208\\190\\209\\128\\209\\128\\208\\181\\208\\186\\209\\130\\208\\189\\208\\190\\209\\129\\209\\130\\209\\140 \\208\\191\\209\\128\\208\\190\\208\\179\\209\\128\\208\\176\\208\\188\\208\\188"#) -}
8411040aa456929fc3247f808ebd3d86
  initGame176 :: Monopoly.Street
  {- Strictness: m,
     Unfolding: (Monopoly.Street
                   Monopoly.initGame177
                   Monopoly.makeStepFeatures2
                   GHC.Types.False
                   Monopoly.initGame42
                   Monopoly.initGame42) -}
a150431a3bbd0f59c73c5027fd11acb4
  initGame177 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCStringUtf8#
                   Monopoly.initGame178) -}
7c5d77fe299dee3ed72b1435315f4498
  initGame178 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("\\208\\161\\208\\159 \\208\\163\\208\\148\\208\\152\\208\\161"#) -}
257eb2bfee667e20bc5181bca84eb81f
  initGame179 :: Monopoly.Street
  {- Strictness: m,
     Unfolding: (Monopoly.Street
                   Monopoly.initGame61
                   Monopoly.initGame183
                   Monopoly.initGame182
                   Monopoly.initGame181
                   Monopoly.initGame180) -}
2f0c8e75dc20d133ba8d20bf753db7b8
  initGame18 :: [Monopoly.Street]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Monopoly.Street
                   Monopoly.initGame139
                   Monopoly.initGame19) -}
77bdc44207b41a14970b9f61feb9cf7f
  initGame180 :: GHC.Types.Int
  {- Strictness: x -}
82338cb5613e1617acf2dd28c93880b4
  initGame181 :: GHC.Types.Int
  {- Strictness: x -}
f91c399269d6ded26878dd917e8c9843
  initGame182 :: GHC.Types.Bool
  {- Strictness: x -}
34a7fbbf72456c2dd99eeb1031883eb6
  initGame183 :: GHC.Types.Int
  {- Strictness: x -}
888f072410f879cea0ab73e922faff2e
  initGame184 :: Monopoly.Street
  {- Strictness: m,
     Unfolding: (Monopoly.Street
                   Monopoly.initGame185
                   Monopoly.makeStepFeatures2
                   GHC.Types.False
                   Monopoly.initGame42
                   Monopoly.initGame42) -}
fe01d92e33dd831e6dada8b6d29170a6
  initGame185 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCStringUtf8#
                   Monopoly.initGame186) -}
ebef1c69ab7a079d055b62c20ee480d0
  initGame186 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("\\208\\161\\208\\159 \\208\\159\\208\\166\\208\\148"#) -}
72f5fb6548d054913a971b680b2155ba
  initGame187 :: Monopoly.Street
  {- Strictness: m,
     Unfolding: (Monopoly.Street
                   Monopoly.initGame188
                   Monopoly.makeStepFeatures1
                   GHC.Types.False
                   Monopoly.initGame42
                   Monopoly.initGame42) -}
6842644fe404c81bc7cef77004dde6eb
  initGame188 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCStringUtf8#
                   Monopoly.initGame189) -}
2b0b4bc23d46de4e0c50c818bed0bfd0
  initGame189 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("\\208\\156\\208\\176\\209\\136\\208\\183\\208\\176\\208\\187 1"#) -}
3e61eb1e24280676e73a5965284227c1
  initGame19 :: [Monopoly.Street]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Monopoly.Street
                   Monopoly.initGame135
                   Monopoly.initGame20) -}
6ae4e8a1cc8440ed770a8f636ce54c79
  initGame190 :: Monopoly.Street
  {- Strictness: m,
     Unfolding: (Monopoly.Street
                   Monopoly.initGame193
                   Monopoly.makeStepFeatures1
                   Monopoly.initGame192
                   Monopoly.initGame42
                   Monopoly.initGame191) -}
a6c9cce33e5594f7e8c55ede964ae70b
  initGame191 :: GHC.Types.Int
  {- Strictness: x -}
f442dc252bc9329b3cb6c4affdd30123
  initGame192 :: GHC.Types.Bool
  {- Strictness: x -}
237ea21b98a38b358801f33a5b5740d1
  initGame193 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCStringUtf8#
                   Monopoly.initGame194) -}
2aaeb2ebf323992f3b620d1ac0c1bc1b
  initGame194 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("\\208\\157\\208\\176\\208\\187\\208\\190\\208\\179"#) -}
5e73f973d398a708e33b4782da0fe90e
  initGame195 :: Monopoly.Street
  {- Strictness: m,
     Unfolding: (Monopoly.Street
                   Monopoly.initGame197
                   Monopoly.initGame196
                   GHC.Types.False
                   Monopoly.initGame42
                   Monopoly.initGame42) -}
3031a110093fc42c68c56d8ff31abf08
  initGame196 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 60#) -}
96aee84e00252cb6eba1081a570b0ddd
  initGame197 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCStringUtf8#
                   Monopoly.initGame198) -}
65d36fd21ff69e82cd7fc1bd3a1c426d
  initGame198 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("\\208\\161\\208\\154\\208\\152 \\208\\159\\208\\176\\209\\128\\208\\176\\208\\187\\208\\187\\208\\181\\208\\187\\209\\140\\208\\189\\209\\139\\208\\181 \\208\\178\\209\\139\\209\\135\\208\\184\\209\\129\\208\\187\\208\\181\\208\\189\\208\\184\\209\\143"#) -}
b8094b4a3b67db295ce58f82911b89a2
  initGame199 :: Monopoly.Street
  {- Strictness: m,
     Unfolding: (Monopoly.Street
                   Monopoly.initGame143
                   Monopoly.initGame202
                   GHC.Types.False
                   Monopoly.initGame201
                   Monopoly.initGame200) -}
7dc136afd3b0cf55cee390d55ed5343f
  initGame2 :: [Monopoly.Street]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Monopoly.Street
                   Monopoly.initGame203
                   Monopoly.initGame3) -}
b5c7134ae37c8c328560405f60c6d532
  initGame20 :: [Monopoly.Street]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Monopoly.Street
                   Monopoly.initGame132
                   Monopoly.initGame21) -}
da8b3e5debc00c0f0140f94d00de055b
  initGame200 :: GHC.Types.Int
  {- Strictness: x -}
bb9ce4603e99b3cc08551d4a23808193
  initGame201 :: GHC.Types.Int
  {- Strictness: x -}
0107ed721cf517f8c8352cc63fa4c398
  initGame202 :: GHC.Types.Int
  {- Strictness: x -}
45bb6619ae9d0e26b8b13b9d6d25b422
  initGame203 :: Monopoly.Street
  {- Strictness: m,
     Unfolding: (Monopoly.Street
                   Monopoly.initGame204
                   Monopoly.initGame196
                   GHC.Types.False
                   Monopoly.initGame42
                   Monopoly.initGame42) -}
ca28a6b5c23ece0b0868896d9bab802c
  initGame204 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCStringUtf8#
                   Monopoly.initGame205) -}
86f8b2bda8d5646350a88c62aa8454b2
  initGame205 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("\\208\\161\\208\\154\\208\\152 \\208\\154\\208\\178\\208\\176\\208\\189\\209\\130\\208\\190\\208\\178\\208\\176\\209\\143 \\208\\184\\208\\189\\209\\132\\208\\190\\209\\128\\208\\188\\208\\176\\209\\130\\208\\184\\208\\186\\208\\176"#) -}
4035a68f4da41edf9b0d4e31355555d9
  initGame206 :: Monopoly.Street
  {- Strictness: m,
     Unfolding: (Monopoly.Street
                   Monopoly.initGame211
                   Monopoly.initGame210
                   Monopoly.initGame209
                   Monopoly.initGame208
                   Monopoly.initGame207) -}
1be294bbc72fbe13eef1bc72c322bd47
  initGame207 :: GHC.Types.Int
  {- Strictness: x -}
7bfb2843ca467d6343f6e0c44686da58
  initGame208 :: GHC.Types.Int
  {- Strictness: x -}
7e4b6b1f1d86b30395055b98e95bbc64
  initGame209 :: GHC.Types.Bool
  {- Strictness: x -}
88cf896e0ac65e640db217be422936b5
  initGame21 :: [Monopoly.Street]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Monopoly.Street
                   Monopoly.initGame125
                   Monopoly.initGame22) -}
55ba8e915fb2fd96700d1652e5fd541f
  initGame210 :: GHC.Types.Int
  {- Strictness: x -}
872e6527285f92ec9f21b6ad82247d62
  initGame211 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCStringUtf8#
                   Monopoly.initGame212) -}
a23b30c5e48db487f2719e8b760c7ae6
  initGame212 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("\\208\\161\\209\\130\\208\\176\\209\\128\\209\\130"#) -}
e8b30c842fc551d54df7f1f18080db82
  initGame213 :: Monopoly.Cubes
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (Monopoly.Cubes Monopoly.doStep3 Monopoly.initGame42) -}
d110b4480f882a23602804b256ff0d65
  initGame214 :: [Monopoly.Player]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Monopoly.Player
                   Monopoly.initGame227
                   Monopoly.initGame215) -}
1f2fe594cdd5aa7bdd0e4be2ff5d6d00
  initGame215 :: [Monopoly.Player]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Monopoly.Player
                   Monopoly.initGame225
                   Monopoly.initGame216) -}
a6cf25993f5f2c094ff43b0e541becbb
  initGame216 :: [Monopoly.Player]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Monopoly.Player
                   Monopoly.initGame222
                   Monopoly.initGame217) -}
176459fccffbd9305ee8c5085ca82bcd
  initGame217 :: [Monopoly.Player]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Monopoly.Player
                   Monopoly.initGame218
                   (GHC.Types.[] @ Monopoly.Player)) -}
c409bd90f60047104857eef458acee91
  initGame218 :: Monopoly.Player
  {- Strictness: m,
     Unfolding: (Monopoly.Player
                   Monopoly.initGame220
                   Monopoly.initGame221
                   (GHC.Types.[] @ Monopoly.Street)
                   Monopoly.doStep3
                   Monopoly.initGame219) -}
2a5158308be27e381b4fb32986b94903
  initGame219 :: Graphics.Gloss.Internals.Data.Picture.Point
  {- Unfolding: (case Monopoly.$wgetPlayerPosition
                        Monopoly.initGame220
                        1# of ww { (#,#) ww1 ww2 ->
                 (ww1, ww2) }) -}
d828a652b54227d91600f0b8ec57edbe
  initGame22 :: [Monopoly.Street]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Monopoly.Street
                   Monopoly.initGame122
                   Monopoly.initGame23) -}
793ea3fad2bdca81e4564b9072ba640e
  initGame220 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 4#) -}
65e0591c4ac21cd3f9aeb3761310b9dd
  initGame221 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 15000#) -}
e604b7fa2af1d8087357f59c5ac2b484
  initGame222 :: Monopoly.Player
  {- Strictness: m,
     Unfolding: (Monopoly.Player
                   Monopoly.initGame224
                   Monopoly.initGame221
                   (GHC.Types.[] @ Monopoly.Street)
                   Monopoly.doStep3
                   Monopoly.initGame223) -}
9ebf0d64cd6c418ffc20cde8a662da15
  initGame223 :: Graphics.Gloss.Internals.Data.Picture.Point
  {- Unfolding: (case Monopoly.$wgetPlayerPosition
                        Monopoly.initGame224
                        1# of ww { (#,#) ww1 ww2 ->
                 (ww1, ww2) }) -}
ec036f12b81eb35bbcb3e9383ed6db0d
  initGame224 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 3#) -}
9b9a0db538d91bda6e33daa805390f70
  initGame225 :: Monopoly.Player
  {- Strictness: m,
     Unfolding: (Monopoly.Player
                   Monopoly.doStep2
                   Monopoly.initGame221
                   (GHC.Types.[] @ Monopoly.Street)
                   Monopoly.doStep3
                   Monopoly.initGame226) -}
d1d53713f619eca009b8ff3627d4e355
  initGame226 :: Graphics.Gloss.Internals.Data.Picture.Point
  {- Unfolding: (case Monopoly.$wgetPlayerPosition
                        Monopoly.doStep2
                        1# of ww { (#,#) ww1 ww2 ->
                 (ww1, ww2) }) -}
552bb70834920e97c25d2485a517f35c
  initGame227 :: Monopoly.Player
  {- Strictness: m,
     Unfolding: (Monopoly.Player
                   Monopoly.doStep3
                   Monopoly.initGame221
                   (GHC.Types.[] @ Monopoly.Street)
                   Monopoly.doStep3
                   Monopoly.initGame228) -}
e5185dc3087755c69d40acca08ac7dda
  initGame228 :: Graphics.Gloss.Internals.Data.Picture.Point
  {- Unfolding: (case Monopoly.$wgetPlayerPosition
                        Monopoly.doStep3
                        1# of ww { (#,#) ww1 ww2 ->
                 (ww1, ww2) }) -}
8f20000caa0b62db2e372bac8e97a5aa
  initGame23 :: [Monopoly.Street]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Monopoly.Street
                   Monopoly.initGame117
                   Monopoly.initGame24) -}
96202ed3e69649f0bec93727483bba80
  initGame24 :: [Monopoly.Street]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Monopoly.Street
                   Monopoly.initGame113
                   Monopoly.initGame25) -}
f933a686d075edae983a271c624c7fd2
  initGame25 :: [Monopoly.Street]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Monopoly.Street
                   Monopoly.initGame109
                   Monopoly.initGame26) -}
6ac22f9b5d1580e847f27bd36e913e6c
  initGame26 :: [Monopoly.Street]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Monopoly.Street
                   Monopoly.initGame106
                   Monopoly.initGame27) -}
509bb3ff618bfc0c91813d8dcc622ee2
  initGame27 :: [Monopoly.Street]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Monopoly.Street
                   Monopoly.initGame103
                   Monopoly.initGame28) -}
f801d7bf7cbb5da3f7d6b7693ca244cd
  initGame28 :: [Monopoly.Street]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Monopoly.Street
                   Monopoly.initGame99
                   Monopoly.initGame29) -}
b656ddbfad8aaf580e5d0f6069f9dfe3
  initGame29 :: [Monopoly.Street]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Monopoly.Street
                   Monopoly.initGame95
                   Monopoly.initGame30) -}
6ce026009041501ecc37bd37b697adad
  initGame3 :: [Monopoly.Street]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Monopoly.Street
                   Monopoly.initGame199
                   Monopoly.initGame4) -}
ed4894889a02dacf8fee37377ec7d855
  initGame30 :: [Monopoly.Street]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Monopoly.Street
                   Monopoly.initGame91
                   Monopoly.initGame31) -}
f3941237e1b934c73593b7b156c2929b
  initGame31 :: [Monopoly.Street]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Monopoly.Street
                   Monopoly.initGame84
                   Monopoly.initGame32) -}
e5ff5aa2bbd9b642d7b0beb72e24ab7c
  initGame32 :: [Monopoly.Street]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Monopoly.Street
                   Monopoly.initGame81
                   Monopoly.initGame33) -}
a6c9fb84a1f84aba2ccc6f6ad5f605c5
  initGame33 :: [Monopoly.Street]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Monopoly.Street
                   Monopoly.initGame77
                   Monopoly.initGame34) -}
ba6e83ef5f348a6a897bdd99941aa4e8
  initGame34 :: [Monopoly.Street]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Monopoly.Street
                   Monopoly.initGame70
                   Monopoly.initGame35) -}
c77ed1669d91da70e9293442f98bd491
  initGame35 :: [Monopoly.Street]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Monopoly.Street
                   Monopoly.initGame66
                   Monopoly.initGame36) -}
9399d89b5ce02aca56488d280f360ccb
  initGame36 :: [Monopoly.Street]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Monopoly.Street
                   Monopoly.initGame63
                   Monopoly.initGame37) -}
6ae4d0d8c25fbf4e8c5eb99b73df5ebb
  initGame37 :: [Monopoly.Street]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Monopoly.Street
                   Monopoly.initGame56
                   Monopoly.initGame38) -}
1b02f950c57475a5bb9e0f93d4db66d6
  initGame38 :: [Monopoly.Street]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Monopoly.Street
                   Monopoly.initGame52
                   Monopoly.initGame39) -}
c34290d76fe222f172e95ad037412189
  initGame39 :: [Monopoly.Street]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Monopoly.Street
                   Monopoly.initGame46
                   Monopoly.initGame40) -}
be02fa15e03c2dfa2d0b052a00c3912e
  initGame4 :: [Monopoly.Street]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Monopoly.Street
                   Monopoly.initGame195
                   Monopoly.initGame5) -}
517fa406fa806549138ad5a160241ccd
  initGame40 :: [Monopoly.Street]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Monopoly.Street
                   Monopoly.initGame41
                   (GHC.Types.[] @ Monopoly.Street)) -}
c2c1aeeab31b2dd5449ca384395fe20b
  initGame41 :: Monopoly.Street
  {- Strictness: m,
     Unfolding: (Monopoly.Street
                   Monopoly.initGame44
                   Monopoly.initGame43
                   GHC.Types.False
                   Monopoly.initGame42
                   Monopoly.initGame42) -}
c874d72714a8627f6f85d8a93ac129b0
  initGame42 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
a06c16c725d22a91f5314c800d5dc606
  initGame43 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 400#) -}
290e72617ba4531be8462da602b3f984
  initGame44 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCStringUtf8#
                   Monopoly.initGame45) -}
7554b4f7326b0047aab33e369212449c
  initGame45 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("\\208\\156\\208\\156\\208\\159 \\208\\145\\208\\156\\208\\156\\208\\158"#) -}
21a4b4e812da9d6d0d56894d426d58c0
  initGame46 :: Monopoly.Street
  {- Strictness: m,
     Unfolding: (Monopoly.Street
                   Monopoly.initGame50
                   Monopoly.makeStepFeatures2
                   Monopoly.initGame49
                   Monopoly.initGame48
                   Monopoly.initGame47) -}
d622d7a32badfe31424f81c7325e0f58
  initGame47 :: GHC.Types.Int
  {- Strictness: x -}
404d23dfb0c71d636e899fedab3ed3d0
  initGame48 :: GHC.Types.Int
  {- Strictness: x -}
7fd479f3655eee1d0aa174a76fef3354
  initGame49 :: GHC.Types.Bool
  {- Strictness: x -}
15e4ca5717a1bfd5830d4f82cbe4136a
  initGame5 :: [Monopoly.Street]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Monopoly.Street
                   Monopoly.initGame190
                   Monopoly.initGame6) -}
8aa6e2639ca65ab130f203ad4ec77b27
  initGame50 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCStringUtf8#
                   Monopoly.initGame51) -}
fa689f6922c799f688cadbc1f857d392
  initGame51 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("\\208\\161\\208\\178\\208\\181\\209\\128\\209\\133\\208\\189\\208\\176\\208\\187\\208\\190\\208\\179"#) -}
606bb75ff8c0665ee8c560ef0367b096
  initGame52 :: Monopoly.Street
  {- Strictness: m,
     Unfolding: (Monopoly.Street
                   Monopoly.initGame54
                   Monopoly.initGame53
                   GHC.Types.False
                   Monopoly.initGame42
                   Monopoly.initGame42) -}
356c85768312ff0ece5724b1167824ed
  initGame53 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 350#) -}
b7c55a62962b4ea55fa8187c15cfe5da
  initGame54 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCStringUtf8#
                   Monopoly.initGame55) -}
20cde2e075a930d50531a4e900e5b032
  initGame55 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("\\208\\156\\208\\156\\208\\159 \\208\\156\\208\\144\\208\\162"#) -}
14d32fe420c6cbe3d0ddbfce5d4f0918
  initGame56 :: Monopoly.Street
  {- Strictness: m,
     Unfolding: (Monopoly.Street
                   Monopoly.initGame61
                   Monopoly.initGame60
                   Monopoly.initGame59
                   Monopoly.initGame58
                   Monopoly.initGame57) -}
10fa8ae55d7c24a94a8bc903d2118ee0
  initGame57 :: GHC.Types.Int
  {- Strictness: x -}
cdbb1b7728142c5c1de040b850c9f37b
  initGame58 :: GHC.Types.Int
  {- Strictness: x -}
c4be9c55d8550762941aebc582f616b8
  initGame59 :: GHC.Types.Bool
  {- Strictness: x -}
869cf0bdf73a2f3d5f2e59d63ddf6b37
  initGame6 :: [Monopoly.Street]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Monopoly.Street
                   Monopoly.initGame187
                   Monopoly.initGame7) -}
0abccfdb42b355ac49bc44d6212c5d7b
  initGame60 :: GHC.Types.Int
  {- Strictness: x -}
c5e73be6813b81e21d80776e80e5ee9c
  initGame61 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCStringUtf8#
                   Monopoly.initGame62) -}
0e68de0a9556e3e9992d1560ae123f48
  initGame62 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("\\208\\168\\208\\176\\208\\189\\209\\129"#) -}
a07d8351d36dd91014cb16b53bab3b79
  initGame63 :: Monopoly.Street
  {- Strictness: m,
     Unfolding: (Monopoly.Street
                   Monopoly.initGame64
                   Monopoly.makeStepFeatures1
                   GHC.Types.False
                   Monopoly.initGame42
                   Monopoly.initGame42) -}
65d0d4af20384e9604150293f53c5069
  initGame64 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCStringUtf8#
                   Monopoly.initGame65) -}
6b5bfdb97c00107a1d2f38c1b854559a
  initGame65 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("\\208\\156\\208\\176\\209\\136\\208\\183\\208\\176\\208\\187 4"#) -}
5ab2f529daa4e13f096f506fcb0a2739
  initGame66 :: Monopoly.Street
  {- Strictness: m,
     Unfolding: (Monopoly.Street
                   Monopoly.initGame68
                   Monopoly.initGame67
                   GHC.Types.False
                   Monopoly.initGame42
                   Monopoly.initGame42) -}
865c2541703ee80ec08cf0a4f6df3f91
  initGame67 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 320#) -}
bc46151e6ad076fa632baa9b340f94ac
  initGame68 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCStringUtf8#
                   Monopoly.initGame69) -}
b630f53a82aa1c56a64e10ca3196e010
  initGame69 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("\\208\\144\\208\\175 \\208\\152\\209\\129\\208\\186\\209\\131\\209\\129\\209\\129\\209\\130\\208\\178\\208\\181\\208\\189\\208\\189\\209\\139\\208\\185 \\208\\184\\208\\189\\209\\130\\208\\181\\208\\187\\208\\187\\208\\181\\208\\186\\209\\130"#) -}
b9f7730899880c7d07f45d2452197f9b
  initGame7 :: [Monopoly.Street]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Monopoly.Street
                   Monopoly.initGame184
                   Monopoly.initGame8) -}
358c7ead1aa792a38e84eb5315042f87
  initGame70 :: Monopoly.Street
  {- Strictness: m,
     Unfolding: (Monopoly.Street
                   Monopoly.initGame75
                   Monopoly.initGame74
                   Monopoly.initGame73
                   Monopoly.initGame72
                   Monopoly.initGame71) -}
158a034eab5ecc11908c319122225543
  initGame71 :: GHC.Types.Int
  {- Strictness: x -}
0c27bbe8e814fd175b14e992b670f3f3
  initGame72 :: GHC.Types.Int
  {- Strictness: x -}
ff3c2fff94c91aa17819f979c272f858
  initGame73 :: GHC.Types.Bool
  {- Strictness: x -}
8ba4c17b13ba49b702b1c94853536759
  initGame74 :: GHC.Types.Int
  {- Strictness: x -}
265fd37bb93600ccd800cefd3f1901a4
  initGame75 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCStringUtf8#
                   Monopoly.initGame76) -}
680132b92f60fba51c21d795c21b9dae
  initGame76 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("\\208\\158\\208\\177\\209\\137\\208\\181\\209\\129\\209\\130\\208\\178\\208\\181\\208\\189\\208\\176\\209\\143 \\208\\186\\208\\176\\208\\183\\208\\189\\208\\176"#) -}
2f338a70dfaa0ea3662c73ea8823011c
  initGame77 :: Monopoly.Street
  {- Strictness: m,
     Unfolding: (Monopoly.Street
                   Monopoly.initGame79
                   Monopoly.initGame78
                   GHC.Types.False
                   Monopoly.initGame42
                   Monopoly.initGame42) -}
e9b9f7db47489ca415d3d90789b985db
  initGame78 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 300#) -}
c659a5d5b8534bf7a627b4196e48f85f
  initGame79 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCStringUtf8#
                   Monopoly.initGame80) -}
b50be008a506c45d863167a97fc783ec
  initGame8 :: [Monopoly.Street]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Monopoly.Street
                   Monopoly.initGame179
                   Monopoly.initGame9) -}
5bcb443cc82646abc7853b2a15d92e3c
  initGame80 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("\\208\\144\\208\\175 \\208\\154\\208\\190\\208\\188\\208\\191\\209\\140\\209\\142\\209\\130\\208\\181\\209\\128\\208\\189\\208\\176\\209\\143 \\208\\187\\208\\184\\208\\189\\208\\179\\208\\178\\208\\184\\209\\129\\209\\130\\208\\184\\208\\186\\208\\176"#) -}
4391f2a69ea76ef6054662c2ae946e7b
  initGame81 :: Monopoly.Street
  {- Strictness: m,
     Unfolding: (Monopoly.Street
                   Monopoly.initGame82
                   Monopoly.initGame78
                   GHC.Types.False
                   Monopoly.initGame42
                   Monopoly.initGame42) -}
c6424784d7e836e3ac873120ff0f6954
  initGame82 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCStringUtf8#
                   Monopoly.initGame83) -}
e64d6122af1ce4d443abcbe491a66ea0
  initGame83 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("\\208\\144\\208\\175 \\208\\159\\208\\176\\209\\128\\208\\176\\208\\180\\208\\184\\208\\179\\208\\188\\209\\139 \\208\\191\\209\\128\\208\\190\\208\\179\\209\\128\\208\\176\\208\\188\\208\\188\\208\\184\\209\\128\\208\\190\\208\\178\\208\\176\\208\\189\\208\\184\\209\\143"#) -}
6c60ec50b45d6e0868da358f05fe62d9
  initGame84 :: Monopoly.Street
  {- Strictness: m,
     Unfolding: (Monopoly.Street
                   Monopoly.initGame89
                   Monopoly.initGame88
                   Monopoly.initGame87
                   Monopoly.initGame86
                   Monopoly.initGame85) -}
c1a15d1024cd0c73be4149f8b8e40afe
  initGame85 :: GHC.Types.Int
  {- Strictness: x -}
2b9666b2675c2467bc5aef9d124a5791
  initGame86 :: GHC.Types.Int
  {- Strictness: x -}
236be7ba0370fe6f9ac2f61d3d7009a7
  initGame87 :: GHC.Types.Bool
  {- Strictness: x -}
dce6dfb1269fc1abdd13999dd9c4d6ad
  initGame88 :: GHC.Types.Int
  {- Strictness: x -}
225430e55d3eacf07df8245b8c2ba4b1
  initGame89 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCStringUtf8#
                   Monopoly.initGame90) -}
7400542a592709029bacbae6eae02276
  initGame9 :: [Monopoly.Street]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Monopoly.Street
                   Monopoly.initGame176
                   Monopoly.initGame10) -}
9c56f13f0bb90112b98d8acb95565726
  initGame90 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("\\208\\158\\209\\130\\208\\191\\209\\128\\208\\176\\208\\178\\208\\187\\209\\143\\208\\185\\209\\129\\209\\143 \\208\\178 \\208\\176\\208\\186\\208\\176\\208\\180\\208\\181\\208\\188"#) -}
018d7393a4d13cfdc80a4499a5dd05ca
  initGame91 :: Monopoly.Street
  {- Strictness: m,
     Unfolding: (Monopoly.Street
                   Monopoly.initGame93
                   Monopoly.initGame92
                   GHC.Types.False
                   Monopoly.initGame42
                   Monopoly.initGame42) -}
1d710776cc73ab3d6da3a8071c0bde1b
  initGame92 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 280#) -}
c53bf03fbc50f43f6b976260c3060259
  initGame93 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCStringUtf8#
                   Monopoly.initGame94) -}
c8de2c80ec1b5426a25d186b8bc07dfe
  initGame94 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("\\208\\144\\208\\161\\208\\146\\208\\154 \\208\\156\\208\\181\\208\\180\\208\\184\\208\\176\\208\\187\\208\\176\\208\\177"#) -}
4bdf53bf58c819a48b65218472e8c994
  initGame95 :: Monopoly.Street
  {- Strictness: m,
     Unfolding: (Monopoly.Street
                   Monopoly.initGame97
                   Monopoly.initGame96
                   GHC.Types.False
                   Monopoly.initGame42
                   Monopoly.initGame42) -}
a8e9bfac5735df885c0ceea75be571e9
  initGame96 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 150#) -}
1baae8ab4ba6c82bf344fa3e8bdf6568
  initGame97 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCStringUtf8#
                   Monopoly.initGame98) -}
406a25d926abddcda4587934ae959b47
  initGame98 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("\\208\\162\\208\\181\\209\\133\\208\\189\\208\\190\\209\\129\\209\\132\\208\\181\\209\\128\\208\\176"#) -}
7759bbf58b25a497b62c80ff956fede1
  initGame99 :: Monopoly.Street
  {- Strictness: m,
     Unfolding: (Monopoly.Street
                   Monopoly.initGame101
                   Monopoly.initGame100
                   GHC.Types.False
                   Monopoly.initGame42
                   Monopoly.initGame42) -}
a24465c4a3a38b245b9db1f72c10337c
  initPay :: Monopoly.GameState -> Monopoly.GameState
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U,U,U,U,U,U)>m,
     Unfolding: InlineRule (1, True, True)
                (\ (gameState :: Monopoly.GameState) -> gameState) -}
d2acc733a5daa6be796ee2954e044019
  isPay ::
    Graphics.Gloss.Internals.Data.Picture.Point
    -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S(S)L),1*U(1*U(U),U(U))>,
     Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Graphics.Gloss.Internals.Data.Picture.Point) ->
                 case w of ww { (,) ww1 ww2 ->
                 case ww1 of ww3 { GHC.Types.F# ww4 ->
                 Monopoly.$wisPay ww4 ww2 } }) -}
b6b00bf78dc3a464729bafe1bdc8000f
  isRent :: Monopoly.Street -> GHC.Types.Bool
  RecSel Left Monopoly.Street
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLSLL),1*U(A,A,1*U,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Monopoly.Street) ->
                 case ds of wild { Monopoly.Street ds1 ds2 ds3 ds4 ds5 -> ds3 }) -}
4b1affade5cf4939d9295d9be74b5cab
  isStep ::
    Graphics.Gloss.Internals.Data.Picture.Point -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ (ds :: Graphics.Gloss.Internals.Data.Picture.Point) ->
                 GHC.Types.True) -}
1a9c53ac13a86ba28657215bed54aafd
  isntPay ::
    Graphics.Gloss.Internals.Data.Picture.Point -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S(S)L),1*U(1*U(U),A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: (GHC.Types.Float, GHC.Types.Float)) ->
                 case ds of wild { (,) x y ->
                 case x of wild1 { GHC.Types.F# x1 ->
                 GHC.Prim.tagToEnum#
                   @ GHC.Types.Bool
                   (GHC.Prim.gtFloat# x1 0.0#) } }) -}
e82b4e3318daaeb987adaca730bd19d2
  land :: Monopoly.GameState -> [Monopoly.Street]
  RecSel Left Monopoly.GameState
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLSL),1*U(A,A,A,A,1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Monopoly.GameState) ->
                 case ds of wild { Monopoly.GameState ds1 ds2 ds3 ds4 ds5 ds6 ->
                 ds5 }) -}
4a80d8d1d0fae0d7c24233945ea9b4b2
  loadImages :: GHC.Types.IO Monopoly.Images
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Monopoly.loadImages1
                  `cast`
                (Sym (GHC.Types.N:IO[0] <Monopoly.Images>_R)) -}
fcd3efbe8c88223f79694930fb28ca09
  loadImages1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Monopoly.Images #)
  {- Arity: 1, Strictness: <S,U> -}
8131782c99eb255495f9fc60f510018d
  makeMove :: Monopoly.GameState -> Monopoly.GameState
  {- Arity: 1, Strictness: <S,1*U(U,U(U),U,A,U,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (gameState :: Monopoly.GameState) ->
                 case gameState of wild { Monopoly.GameState ds ds1 ds2 ds3 ds4 ds5 ->
                 Monopoly.makeStepFeatures
                   (Monopoly.changePlayerCell
                      (Monopoly.GameState ds ds1 ds2 Monopoly.doStep1 ds4 ds5)) }) -}
506292a161c82a179ed8aa8626592a22
  makePay :: Monopoly.GameState -> Monopoly.GameState
  {- Arity: 1, Strictness: <S,1*U(U,1*U(U),U,U,U,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (gameState :: Monopoly.GameState) ->
                 case gameState of wild { Monopoly.GameState ds ds1 ds2 ds3 ds4 ds5 ->
                 Monopoly.GameState
                   ds
                   (case ds1 of wild1 { GHC.Types.I# x ->
                    GHC.Types.I# (GHC.Prim.+# (GHC.Prim.andI# x 3#) 1#) })
                   ds2
                   ds3
                   ds4
                   Monopoly.handleGame3 }) -}
3ea580095dde4872feb23056f9b2c970
  makeStepFeatures :: Monopoly.GameState -> Monopoly.GameState
  {- Arity: 1, Strictness: <S(LLLLLS),1*U(U,U(U),U,U,U,U)>m,
     Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Monopoly.GameState) ->
                 case w of ww { Monopoly.GameState ww1 ww2 ww3 ww4 ww5 ww6 ->
                 case Monopoly.$wmakeStepFeatures
                        ww1
                        ww2
                        ww3
                        ww4
                        ww5
                        ww6 of ww7 { (#,,,,,#) ww8 ww9 ww10 ww11 ww12 ww13 ->
                 Monopoly.GameState ww8 ww9 ww10 ww11 ww12 ww13 } }) -}
a9463e4dfe18435be810b6a4215c30b2
  makeStepFeatures1 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 200#) -}
26fd1c0c165071a541e35efb151de72a
  makeStepFeatures2 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 100#) -}
0a10b1c475ab42bce8e36804deec12c5
  money :: Monopoly.Player -> GHC.Types.Int
  RecSel Left Monopoly.Player
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LSLLL),1*U(A,1*U(U),A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Monopoly.Player) ->
                 case ds of wild { Monopoly.Player ds1 ds2 ds3 ds4 ds5 -> ds2 }) -}
70961fe10d74f3228a9a7b063d4d1b60
  move :: Monopoly.Physical a => GHC.Types.Float -> a -> a
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(LLC(C(S))L),U(1*C1(U),A,1*C1(C1(U)),A)><L,A><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   ($dPhysical :: Monopoly.Physical a)
                   (dt :: GHC.Types.Float)
                   (object :: a) ->
                 Monopoly.setPosition
                   @ a
                   $dPhysical
                   (Monopoly.getPosition @ a $dPhysical object)
                   object) -}
4a55c7b8d306fcda65aff980f94d5a1a
  movePlayer ::
    Monopoly.Player
    -> GHC.Types.Int -> GHC.Types.Int -> Monopoly.Player
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S,1*U(U,U,U,U(U),A)><L,1*U(U)><L,U(U)>m, Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: Monopoly.Player)
                   (w1 :: GHC.Types.Int)
                   (w2 :: GHC.Types.Int) ->
                 case w of ww { Monopoly.Player ww1 ww2 ww3 ww4 ww5 ->
                 Monopoly.Player
                   ww1
                   ww2
                   ww3
                   (case ww4 of wild { GHC.Types.I# x ->
                    case w2 of wild1 { GHC.Types.I# y ->
                    case GHC.Classes.modInt#
                           (GHC.Prim.-# (GHC.Prim.+# x y) 1#)
                           40# of ww6 { DEFAULT ->
                    GHC.Types.I# (GHC.Prim.+# ww6 1#) } } })
                   (case ww4 of wild { GHC.Types.I# x ->
                    case w2 of wild1 { GHC.Types.I# y ->
                    case GHC.Classes.modInt#
                           (GHC.Prim.-# (GHC.Prim.+# x y) 1#)
                           40# of ww6 { DEFAULT ->
                    case Monopoly.$wgetPlayerPosition
                           w1
                           (GHC.Prim.+# ww6 1#) of ww7 { (#,#) ww8 ww9 ->
                    (ww8, ww9) } } } }) }) -}
b6b00bf78dc3a464729bafe1bdc8000f
  name :: Monopoly.Street -> GHC.Base.String
  RecSel Left Monopoly.Street
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SLLLL),1*U(1*U,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Monopoly.Street) ->
                 case ds of wild { Monopoly.Street ds1 ds2 ds3 ds4 ds5 -> ds1 }) -}
b6b00bf78dc3a464729bafe1bdc8000f
  owner :: Monopoly.Street -> GHC.Types.Int
  RecSel Left Monopoly.Street
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLS),1*U(A,A,A,A,1*U(U))>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Monopoly.Street) ->
                 case ds of wild { Monopoly.Street ds1 ds2 ds3 ds4 ds5 -> ds5 }) -}
1e6688b8a82215fa18fabeda29f06bb5
  payTax :: Monopoly.GameState -> GHC.Types.Int -> Monopoly.GameState
  {- Arity: 2, Strictness: <S,1*U(U,U(U),U,U,U,U)><L,1*U(U)>m,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Monopoly.GameState) (w1 :: GHC.Types.Int) ->
                 case w of ww { Monopoly.GameState ww1 ww2 ww3 ww4 ww5 ww6 ->
                 case Monopoly.$wpayTax
                        ww1
                        ww2
                        ww3
                        ww4
                        ww5
                        ww6
                        w1 of ww7 { (#,,,,,#) ww8 ww9 ww10 ww11 ww12 ww13 ->
                 Monopoly.GameState ww8 ww9 ww10 ww11 ww12 ww13 } }) -}
0a10b1c475ab42bce8e36804deec12c5
  playerCell :: Monopoly.Player -> GHC.Types.Int
  RecSel Left Monopoly.Player
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLSL),1*U(A,A,A,1*U(U),A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Monopoly.Player) ->
                 case ds of wild { Monopoly.Player ds1 ds2 ds3 ds4 ds5 -> ds4 }) -}
0a10b1c475ab42bce8e36804deec12c5
  playerPosition ::
    Monopoly.Player -> Graphics.Gloss.Internals.Data.Picture.Point
  RecSel Left Monopoly.Player
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLS),1*U(A,A,A,A,1*U(U,U))>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Monopoly.Player) ->
                 case ds of wild { Monopoly.Player ds1 ds2 ds3 ds4 ds5 -> ds5 }) -}
e82b4e3318daaeb987adaca730bd19d2
  players :: Monopoly.GameState -> [Monopoly.Player]
  RecSel Left Monopoly.GameState
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(SLLLLL),1*U(1*U,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Monopoly.GameState) ->
                 case ds of wild { Monopoly.GameState ds1 ds2 ds3 ds4 ds5 ds6 ->
                 ds1 }) -}
b6b00bf78dc3a464729bafe1bdc8000f
  price :: Monopoly.Street -> GHC.Types.Int
  RecSel Left Monopoly.Street
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LSLLL),1*U(A,1*U(U),A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Monopoly.Street) ->
                 case ds of wild { Monopoly.Street ds1 ds2 ds3 ds4 ds5 -> ds2 }) -}
b6b00bf78dc3a464729bafe1bdc8000f
  priceRent :: Monopoly.Street -> GHC.Types.Int
  RecSel Left Monopoly.Street
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLSL),1*U(A,A,A,1*U(U),A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Monopoly.Street) ->
                 case ds of wild { Monopoly.Street ds1 ds2 ds3 ds4 ds5 -> ds4 }) -}
0a10b1c475ab42bce8e36804deec12c5
  property :: Monopoly.Player -> [Monopoly.Street]
  RecSel Left Monopoly.Player
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLSLL),1*U(A,A,1*U,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Monopoly.Player) ->
                 case ds of wild { Monopoly.Player ds1 ds2 ds3 ds4 ds5 -> ds3 }) -}
efb5001204e6110178974924c9ef2583
  satelliteRotationSpeed :: GHC.Types.Float
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.F# 0.1#) -}
7ec450736dacd06f62cd7a6033601267
  screenHeight :: GHC.Num.Num a => a
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLC(S)),1*U(A,A,A,A,A,A,1*C1(U))>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a ($dNum :: GHC.Num.Num a) ->
                 GHC.Num.fromInteger @ a $dNum Monopoly.screenHeight1) -}
5f238d5a60d724959e0f607cc024531e
  screenHeight1 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (800) -}
ad81d0f16e778b24958e18e7770f3a09
  screenWidth :: GHC.Num.Num a => a
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLC(S)),1*U(A,A,A,A,A,A,1*C1(U))>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a ($dNum :: GHC.Num.Num a) ->
                 GHC.Num.fromInteger @ a $dNum Monopoly.screenHeight1) -}
d15a78157415196aa8616bbb4f87e4e1
  secondCube :: Monopoly.Cubes -> GHC.Types.Int
  RecSel Left Monopoly.Cubes
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LS),1*U(A,1*U(U))>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Monopoly.Cubes) ->
                 case ds of wild { Monopoly.Cubes ds1 ds2 -> ds2 }) -}
fc832d6e35cf6709167cfc9e385e82aa
  startGame :: Monopoly.Images -> GHC.Types.IO ()
  {- Arity: 2, Strictness: <L,U(U,U,U,U,U,U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Monopoly.startGame1
                  `cast`
                (<Monopoly.Images>_R ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
9d6bbea38d9ba384d36fb9423cb5a2a7
  startGame1 ::
    Monopoly.Images
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 2, Strictness: <L,U(U,U,U,U,U,U)><S,U>,
     Unfolding: (\ (images :: Monopoly.Images)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case Graphics.Gloss.Internals.Interface.Game.playWithBackendIO1
                        @ Monopoly.GameState
                        @ Graphics.Gloss.Internals.Interface.Backend.GLUT.GLUTState
                        Graphics.Gloss.Internals.Interface.Backend.GLUT.$fBackendGLUTState
                        Graphics.Gloss.Internals.Interface.Backend.GLUT.glutStateInit
                        Graphics.Gloss.Data.Display.FullScreen
                        Graphics.Gloss.Data.Color.white
                        Monopoly.makeStepFeatures2
                        Monopoly.initGame
                        (\ (x :: Monopoly.GameState)
                           (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                         (# s1, Monopoly.drawGameState images x #))
                          `cast`
                        (<Monopoly.GameState>_R
                         ->_R Sym (GHC.Types.N:IO[0]
                                       <Graphics.Gloss.Internals.Data.Picture.Picture>_R))
                        Monopoly.startGame3
                          `cast`
                        (<Graphics.Gloss.Internals.Interface.Event.Event>_R
                         ->_R <Monopoly.GameState>_R
                         ->_R Sym (GHC.Types.N:IO[0] <Monopoly.GameState>_R))
                        Monopoly.startGame2
                          `cast`
                        (<GHC.Types.Float>_R
                         ->_R <Monopoly.GameState>_R
                         ->_R Sym (GHC.Types.N:IO[0] <Monopoly.GameState>_R))
                        GHC.Types.True
                        s of ds1 { (#,#) ipv ipv1 ->
                 (# ipv, GHC.Tuple.() #) }) -}
cc15bb2c0f873381bf1002f3f988f768
  startGame2 ::
    GHC.Types.Float
    -> Monopoly.GameState
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Monopoly.GameState #)
  {- Arity: 3, HasNoCafRefs, Strictness: <L,A><L,U><S,U>,
     Unfolding: InlineRule (3, True, True)
                (\ (time :: GHC.Types.Float)
                   (world1 :: Monopoly.GameState)
                   (s1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 (# s1, world1 #)) -}
21ebec0697a2ab6e18f8760c0554cbea
  startGame3 ::
    Graphics.Gloss.Internals.Interface.Event.Event
    -> Monopoly.GameState
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Monopoly.GameState #)
  {- Arity: 3, Strictness: <L,1*U><L,1*U(U,U(U),U,U,U,U)><S,U>,
     Unfolding: InlineRule (3, True, False)
                (\ (event :: Graphics.Gloss.Internals.Interface.Event.Event)
                   (world1 :: Monopoly.GameState)[OneShot]
                   (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 (# s1, Monopoly.handleGame event world1 #)) -}
7989a8aeddcb858b7b013a0598e3eaf2
  streetMove :: Monopoly.GameState -> Monopoly.GameState
  {- Arity: 1, Strictness: <S(SS(S)LLSL),1*U(U,U(U),U,U,U,U)>m,
     Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Monopoly.GameState) ->
                 case w of ww { Monopoly.GameState ww1 ww2 ww3 ww4 ww5 ww6 ->
                 case ww2 of ww7 { GHC.Types.I# ww8 ->
                 case GHC.List.$w!!
                        @ Monopoly.Player
                        ww1
                        (GHC.Prim.-#
                           ww8
                           1#) of wild { Monopoly.Player ds ds1 ds2 ds3 ds4 ->
                 case ds3 of wild1 { GHC.Types.I# x ->
                 case GHC.List.$w!!
                        @ Monopoly.Street
                        ww5
                        (GHC.Prim.-#
                           x
                           1#) of wild2 { Monopoly.Street ds5 ds6 ds7 ds8 ds9 ->
                 case ds7 of wild3 {
                   GHC.Types.False
                   -> Monopoly.GameState ww1 (GHC.Types.I# ww8) ww3 ww4 ww5 ww6
                   GHC.Types.True
                   -> case Monopoly.$wpayTax
                             ww1
                             (GHC.Types.I# ww8)
                             ww3
                             ww4
                             ww5
                             ww6
                             ds8 of ww9 { (#,,,,,#) ww10 ww11 ww12 ww13 ww14 ww15 ->
                      Monopoly.GameState ww10 ww11 ww12 ww13 ww14 ww15 } } } } } } }) -}
a74b6cdd0ec1c506a545a8f82f714a6e
  throwCubes :: Monopoly.GameState -> Monopoly.GameState
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U,U,U,A,U,U)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (gameState :: Monopoly.GameState) ->
                 case gameState of wild { Monopoly.GameState ds ds1 ds2 ds3 ds4 ds5 ->
                 Monopoly.GameState ds ds1 ds2 Monopoly.doStep1 ds4 ds5 }) -}
e82b4e3318daaeb987adaca730bd19d2
  typeStep :: Monopoly.GameState -> GHC.Base.String
  RecSel Left Monopoly.GameState
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLS),1*U(A,A,A,A,A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Monopoly.GameState) ->
                 case ds of wild { Monopoly.GameState ds1 ds2 ds3 ds4 ds5 ds6 ->
                 ds6 }) -}
95d4bcde59ad58327cd8c1aed6011fa9
  ufoAccel :: GHC.Types.Float
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.F# 15.0#) -}
9b2d9f34fe63eab14425d255f64e8e22
  updateGameState ::
    GHC.Types.Float -> Monopoly.GameState -> Monopoly.GameState
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ (ds :: GHC.Types.Float) -> GHC.Base.id @ Monopoly.GameState) -}
5887f7fc8340c261a5154a245c070d3f
  updatePay ::
    GHC.Types.Float -> Monopoly.GameState -> Monopoly.GameState
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ (ds :: GHC.Types.Float) -> GHC.Base.id @ Monopoly.GameState) -}
instance Monopoly.Physical [Monopoly.Player]
  = Monopoly.$fPhysicalPlayer
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

