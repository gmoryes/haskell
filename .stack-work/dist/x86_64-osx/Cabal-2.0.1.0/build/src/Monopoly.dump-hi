
==================== FINAL INTERFACE ====================
2018-03-20 12:25:03.651567 UTC

interface monopoly-0.1-EHoOAVlKhvJDKzSG2oZd5j:Monopoly 8022
  interface hash: 86495a32351447becd3d853d929060cb
  ABI hash: 4d75e63b75d43bb0f7aed7e2b2c738d4
  export-list hash: 27a9939b96b9e2c124afefa73c22bd48
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 0451a77cc0d8e5d99d548d6441c7dd35
  sig of: Nothing
  used TH splices: False
  where
exports:
  Monopoly.canGo
  Monopoly.chanceCard
  Monopoly.changeBalance
  Monopoly.changePlayerCell
  Monopoly.doStep
  Monopoly.drawGameState
  Monopoly.drawPayMenu
  Monopoly.drawPiece
  Monopoly.drawPlayingField
  Monopoly.getPlayerPosition
  Monopoly.getPriceRent
  Monopoly.getTypeCell
  Monopoly.handleGame
  Monopoly.handlePay
  Monopoly.initCards
  Monopoly.initGame
  Monopoly.initPay
  Monopoly.isPay
  Monopoly.isStep
  Monopoly.isntPay
  Monopoly.loadImages
  Monopoly.makeMove
  Monopoly.makePay
  Monopoly.makeStepFeatures
  Monopoly.move
  Monopoly.movePlayer
  Monopoly.payPrictRent
  Monopoly.payTax
  Monopoly.satelliteRotationSpeed
  Monopoly.screenHeight
  Monopoly.screenWidth
  Monopoly.startGame
  Monopoly.streetMove
  Monopoly.throwCubes
  Monopoly.ufoAccel
  Monopoly.updateGameState
  Monopoly.updatePay
  Monopoly.Cards
  Monopoly.ChanceCard{Monopoly.ChanceCard num price2 text2}
  Monopoly.Cubes{Monopoly.Cubes firstCube secondCube}
  Monopoly.GameState{Monopoly.GameState cubes gamePlayer haveWinner land players typeStep}
  Monopoly.Images{Monopoly.Images imagePayMenu imagePieceBlue imagePieceGreen imagePieceRed imagePieceYellow imagePlayingField}
  Monopoly.Physical{Monopoly.getCell Monopoly.getPosition Monopoly.setCell Monopoly.setPosition}
  Monopoly.Player{Monopoly.Player colour money playerCell playerPosition property}
  Monopoly.Street{Monopoly.Street isRent name owner price priceRent}
module dependencies:
package dependencies: GLURaw-2.0.0.3 GLUT-2.7.0.12
                      JuicyPixels-3.2.9.4 ObjectName-1.1.0.1 OpenGL-3.0.2.0
                      OpenGLRaw-3.2.7.0 StateVar-1.1.0.4 array-0.5.2.0 base-4.10.1.0
                      binary-0.8.5.1 bmp-1.2.6.3 bytestring-0.10.8.2 containers-0.5.10.2
                      deepseq-1.4.3.0 fixed-0.2.1.1 ghc-prim-0.5.1.1 gloss-1.11.1.1
                      gloss-juicy-0.2.2 gloss-rendering-1.11.1.1 half-0.2.2.3
                      integer-gmp-1.0.1.0 mtl-2.2.1 primitive-0.6.3.0 stm-2.4.5.0
                      text-1.2.2.2 transformers-0.5.2.0 vector-0.12.0.1 zlib-0.6.1.2
orphans: vector-0.12.0.1:Data.Vector.Unboxed
         gloss-rendering-1.11.1.1:Graphics.Gloss.Internals.Data.Picture
         stm-2.4.5.0:Control.Monad.STM text-1.2.2.2:Data.Text
         binary-0.8.5.1:Data.Binary.Generic text-1.2.2.2:Data.Text.Show
         bytestring-0.10.8.2:Data.ByteString.Builder
         vector-0.12.0.1:Data.Vector.Fusion.Bundle
         transformers-0.5.2.0:Control.Monad.Trans.Error
         base-4.10.1.0:GHC.Float base-4.10.1.0:GHC.Base
family instance modules: JuicyPixels-3.2.9.4:Codec.Picture.Tga
                         JuicyPixels-3.2.9.4:Codec.Picture.Tiff
                         JuicyPixels-3.2.9.4:Codec.Picture.Types
                         base-4.10.1.0:Control.Applicative base-4.10.1.0:Data.Complex
                         base-4.10.1.0:Data.Either base-4.10.1.0:Data.Functor.Compose
                         base-4.10.1.0:Data.Functor.Const
                         base-4.10.1.0:Data.Functor.Identity
                         base-4.10.1.0:Data.Functor.Product base-4.10.1.0:Data.Functor.Sum
                         base-4.10.1.0:Data.List.NonEmpty base-4.10.1.0:Data.Monoid
                         base-4.10.1.0:Data.Semigroup base-4.10.1.0:Data.Type.Equality
                         base-4.10.1.0:Data.Version base-4.10.1.0:Data.Void
                         base-4.10.1.0:GHC.Exts base-4.10.1.0:GHC.Generics
                         base-4.10.1.0:GHC.IO.Exception base-4.10.1.0:GHC.TypeLits
                         base-4.10.1.0:GHC.TypeNats containers-0.5.10.2:Data.IntMap.Internal
                         containers-0.5.10.2:Data.IntSet.Internal
                         containers-0.5.10.2:Data.Map.Internal
                         containers-0.5.10.2:Data.Sequence.Internal
                         containers-0.5.10.2:Data.Set.Internal containers-0.5.10.2:Data.Tree
                         primitive-0.6.3.0:Control.Monad.Primitive
                         primitive-0.6.3.0:Data.Primitive.Array
                         primitive-0.6.3.0:Data.Primitive.ByteArray text-1.2.2.2:Data.Text
                         vector-0.12.0.1:Data.Vector vector-0.12.0.1:Data.Vector.Primitive
                         vector-0.12.0.1:Data.Vector.Storable
                         vector-0.12.0.1:Data.Vector.Unboxed
                         vector-0.12.0.1:Data.Vector.Unboxed.Base
                         zlib-0.6.1.2:Codec.Compression.Zlib.Stream
import  -/  base-4.10.1.0:Data.Foldable 9ed87455d68e87ff2b5b8725eae9897e
import  -/  base-4.10.1.0:GHC.Base 782fd99b5e36f3698a26179a49afca64
import  -/  base-4.10.1.0:GHC.List e3060fbeb44ce0038e6b4dedf2dd9cf1
import  -/  base-4.10.1.0:GHC.Num 6e1dc5d36d99a802edb39b92bb1923b8
import  -/  base-4.10.1.0:GHC.Real 3c62834bc25e762eabc44149c4cc142d
import  -/  base-4.10.1.0:Prelude 31945b7d0084063347fc52506d3a4020
import  -/  ghc-prim-0.5.1.1:GHC.Classes 93e2660065dce9329577e83d76d8f0d4
import  -/  ghc-prim-0.5.1.1:GHC.Types b1fd0716441595db508c1a74387bf394
import  -/  gloss-1.11.1.1:Graphics.Gloss.Data.Color b7424de5bb205cca1a09501f98c59664
import  -/  gloss-1.11.1.1:Graphics.Gloss.Data.Display 1752ab407945af39220fa83fbf976e16
import  -/  gloss-1.11.1.1:Graphics.Gloss.Data.Picture 0c9db8efb71853e503896b57a301b5c6
import  -/  gloss-1.11.1.1:Graphics.Gloss.Data.Vector 44dc1145b0e25cb800e2c55d0895dbe5
import  -/  gloss-1.11.1.1:Graphics.Gloss.Interface.Pure.Game 247150559a96abad68d2b57b64100a3e
import  -/  gloss-1.11.1.1:Graphics.Gloss.Internals.Interface.Backend.Types 06ea8efd16f2e1213f3498c72fd3e865
import  -/  gloss-1.11.1.1:Graphics.Gloss.Internals.Interface.Event f16844b468f3b0afda143b6d1f143412
import  -/  gloss-juicy-0.2.2:Graphics.Gloss.Juicy 46a9eca8d76b0eb9834882dca76d1776
import  -/  gloss-rendering-1.11.1.1:Graphics.Gloss.Internals.Data.Picture d666c96398fc251f92f60389aa7562f8
78cf08954a4a97e6e70eb90650024072
  $fPhysicalPlayer :: Monopoly.Physical Monopoly.Player
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Monopoly.Player
                  Monopoly.playerPosition
                  Monopoly.playerCell
                  Monopoly.$fPhysicalPlayer_$csetPosition
                  Monopoly.$fPhysicalPlayer_$csetCell -}
3c3dd55184011285e4e152bf31df1b59
  $fPhysicalPlayer_$csetCell ::
    GHC.Types.Int -> Monopoly.Player -> Monopoly.Player
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,1*U(U,U,U,A,U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ (new :: GHC.Types.Int) (player :: Monopoly.Player) ->
                 case player of wild { Monopoly.Player ds ds1 ds2 ds3 ds4 ->
                 Monopoly.Player ds ds1 ds2 new ds4 }) -}
ed2905adb5afd4c601c9d00ac1187c73
  $fPhysicalPlayer_$csetPosition ::
    Graphics.Gloss.Internals.Data.Picture.Point
    -> Monopoly.Player -> Monopoly.Player
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,1*U(U,U,U,U,A)>m,
     Unfolding: InlineRule (2, True, False)
                (\ (new :: Graphics.Gloss.Internals.Data.Picture.Point)
                   (player :: Monopoly.Player) ->
                 case player of wild { Monopoly.Player ds ds1 ds2 ds3 ds4 ->
                 Monopoly.Player ds ds1 ds2 ds3 new }) -}
fc9186785ba14620b9084b210c1b166a
  $tc'C:Physical :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14831751462758654905##
                   579143389657864245##
                   Monopoly.$trModule
                   Monopoly.$tc'C:Physical2
                   1#
                   Monopoly.$tc'C:Physical1) -}
8fe2c7f3808e65f955ef2e7a72d44cd3
  $tc'C:Physical1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
df17e651a73788749aceb26834ca495d
  $tc'C:Physical2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Monopoly.$tc'C:Physical3) -}
d8637616c5a72615cd75219cf1400ed4
  $tc'C:Physical3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'C:Physical"#) -}
a238d52fcd943cf6af59563501985dcb
  $tc'ChanceCard :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16684506854786530181##
                   10862240134661998355##
                   Monopoly.$trModule
                   Monopoly.$tc'ChanceCard2
                   0#
                   Monopoly.$tc'ChanceCard1) -}
bcfb4d7325849a2f6a4601140d2ef98c
  $tc'ChanceCard1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
daf1e96d81f0b6ac7fda7c514c61cc6e
  $tc'ChanceCard2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Monopoly.$tc'ChanceCard3) -}
a39882c1e1216a4fbeda1b68a7e6e7b5
  $tc'ChanceCard3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ChanceCard"#) -}
4fd734913533a9e56e3bf6a91e55daa8
  $tc'Cubes :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2478442684350867704##
                   6878546648676259711##
                   Monopoly.$trModule
                   Monopoly.$tc'Cubes2
                   0#
                   Monopoly.$tc'Cubes1) -}
5b3e72fa1d10317be44d675b83244cd9
  $tc'Cubes1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
af2422e52fe9c79ec1050049576f4280
  $tc'Cubes2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Monopoly.$tc'Cubes3) -}
a2f29976d6b5a780c5e341a9b82b002d
  $tc'Cubes3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Cubes"#) -}
611c5d82dc55ad4f6cf382224ae0c8fa
  $tc'GameState :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12445474607304345465##
                   13319973760133085921##
                   Monopoly.$trModule
                   Monopoly.$tc'GameState2
                   0#
                   Monopoly.$tc'GameState1) -}
fb443d0fc994baff5b05bfa0aeed3054
  $tc'GameState1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
355afac42cc6cfdd1a78951e70b1d1b8
  $tc'GameState2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Monopoly.$tc'GameState3) -}
2ac2c7e6bb5969e9d786305b9ff85640
  $tc'GameState3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'GameState"#) -}
1930d7d64a718758ff5818706e64f822
  $tc'Images :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11650600398452566689##
                   15916080695264304172##
                   Monopoly.$trModule
                   Monopoly.$tc'Images2
                   0#
                   Monopoly.$tc'Images1) -}
bcc7e74e28483d68401b39550702561b
  $tc'Images1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
70974c2ef628691d505cc1bf1a010b12
  $tc'Images2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Monopoly.$tc'Images3) -}
93fa539d5697b555ab2e20f95e47f704
  $tc'Images3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Images"#) -}
e738694526b50d2327d9fe9a51adfa29
  $tc'Player :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2354238558275237365##
                   8235264906853959260##
                   Monopoly.$trModule
                   Monopoly.$tc'Player2
                   0#
                   Monopoly.$tc'Player1) -}
bc55aebdc187289b58dd671525366ffc
  $tc'Player1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
d2ccaa28513dc18035b82de81b9f5dfc
  $tc'Player2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Monopoly.$tc'Player3) -}
2d8c7fb117dcc20c333b581e8ff6440f
  $tc'Player3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Player"#) -}
f8c1c30b16402f02accd0ea623e6e4ed
  $tc'Street :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6393891865602144051##
                   11140179470289761440##
                   Monopoly.$trModule
                   Monopoly.$tc'Street2
                   0#
                   Monopoly.$tc'Street1) -}
a53c933256e245ec4bb8c9476b5e9970
  $tc'Street1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
1756e763ae91c4f3f5432262279ffd03
  $tc'Street2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Monopoly.$tc'Street3) -}
071483ae1c3214f23afdb0be8a73f870
  $tc'Street3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Street"#) -}
54b28ccbf3b934bf6e58c815d2f5bd79
  $tcChanceCard :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10864997254005274989##
                   9225381818848966281##
                   Monopoly.$trModule
                   Monopoly.$tcChanceCard1
                   0#
                   GHC.Types.krep$*) -}
00bb927767b0a6202c033d1ebe553719
  $tcChanceCard1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Monopoly.$tcChanceCard2) -}
c526b98a614671762687d61410319b02
  $tcChanceCard2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ChanceCard"#) -}
dba68f381283720c77d13121d1fcb3e3
  $tcCubes :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14035284667219622413##
                   1095780005506541569##
                   Monopoly.$trModule
                   Monopoly.$tcCubes1
                   0#
                   GHC.Types.krep$*) -}
6b3aed28e2eb0fa8081a18be28fa89b0
  $tcCubes1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Monopoly.$tcCubes2) -}
f3fc5cb295f4b2c1722b6947ab7e3ce4
  $tcCubes2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Cubes"#) -}
5f0655b8952dd696aefa829f5749ee15
  $tcGameState :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6127510352924701552##
                   645970733515722312##
                   Monopoly.$trModule
                   Monopoly.$tcGameState1
                   0#
                   GHC.Types.krep$*) -}
007b239d0767f3122a0f8ccbee899f7b
  $tcGameState1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Monopoly.$tcGameState2) -}
773fa10161979e6bf57b73602434334f
  $tcGameState2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("GameState"#) -}
a4c7b6f3f629b4884bee4caa24815fbd
  $tcImages :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16892324885821936704##
                   17610217353859363776##
                   Monopoly.$trModule
                   Monopoly.$tcImages1
                   0#
                   GHC.Types.krep$*) -}
536c3732174e16efbb54afa0dba5c4e0
  $tcImages1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Monopoly.$tcImages2) -}
ed924718553fda7220337758f0812b76
  $tcImages2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Images"#) -}
a4f36d67fb898dc5312ac51778c81042
  $tcPhysical :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9895433282512726895##
                   9461575238866704718##
                   Monopoly.$trModule
                   Monopoly.$tcPhysical2
                   0#
                   Monopoly.$tcPhysical1) -}
e7ee8f4a118676259094f392f54fdf1e
  $tcPhysical1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
7187e3271f096db685d8a91d2038a89d
  $tcPhysical2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Monopoly.$tcPhysical3) -}
f4135ba9e0bbb4f96c397e2707542c11
  $tcPhysical3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Physical"#) -}
40a09ddeb7360a3a4ba86297b983c241
  $tcPlayer :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7736844479821361884##
                   162166766463859196##
                   Monopoly.$trModule
                   Monopoly.$tcPlayer1
                   0#
                   GHC.Types.krep$*) -}
e0f6a46de0cfa4489104c2517aa2812e
  $tcPlayer1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Monopoly.$tcPlayer2) -}
d7bf0718b0ea801964bbdbbe1e417e59
  $tcPlayer2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Player"#) -}
52dbe3fbdd7504018d9c2d5752e3676b
  $tcStreet :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10051777567812766565##
                   7730598809882436407##
                   Monopoly.$trModule
                   Monopoly.$tcStreet1
                   0#
                   GHC.Types.krep$*) -}
27bbf32392bf5d687f1ab8202d2a362f
  $tcStreet1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Monopoly.$tcStreet2) -}
2821eccbb9cb93db48af522bd94316b2
  $tcStreet2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Street"#) -}
4d3dcae2be777542e34d4c0400d24879
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Monopoly.$trModule3
                   Monopoly.$trModule1) -}
07fae8abc71983e63ded8eb7cff22d1e
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Monopoly.$trModule2) -}
962f795020def0b493c7d216096efcd9
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Monopoly"#) -}
11987e1c44bb9a5648e4d2579b8e9166
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Monopoly.$trModule4) -}
6624772ab9c75abafc5223b63e38b65f
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("monopoly-0.1-EHoOAVlKhvJDKzSG2oZd5j"#) -}
22b887f279957963ebd9facd44861815
  $wchangePlayerCell ::
    [Monopoly.Player]
    -> GHC.Types.Int
    -> GHC.Base.Maybe GHC.Types.Int
    -> Monopoly.Cubes
    -> [Monopoly.Street]
    -> (# [Monopoly.Player], GHC.Types.Int,
          GHC.Base.Maybe GHC.Types.Int, Monopoly.Cubes, [Monopoly.Street],
          GHC.Base.String #)
  {- Arity: 5, Strictness: <L,U><L,U(U)><L,U><L,U(U(U),U(U))><L,U>,
     Inline: [0],
     Unfolding: (\ (ww :: [Monopoly.Player])
                   (ww1 :: GHC.Types.Int)
                   (ww2 :: GHC.Base.Maybe GHC.Types.Int)
                   (ww3 :: Monopoly.Cubes)
                   (ww4 :: [Monopoly.Street]) ->
                 let {
                   cubesSum :: GHC.Types.Int
                   = case ww3 of wild { Monopoly.Cubes ds ds1 ->
                     case ds of wild1 { GHC.Types.I# x ->
                     case ds1 of wild2 { GHC.Types.I# y ->
                     GHC.Types.I# (GHC.Prim.+# x y) } } }
                 } in
                 let {
                   player :: Monopoly.Player
                   = case ww1 of wild { GHC.Types.I# x ->
                     GHC.List.$w!! @ Monopoly.Player ww (GHC.Prim.-# x 1#) }
                 } in
                 (# case ww1 of wild { GHC.Types.I# x ->
                    let {
                      y :: GHC.Prim.Int# = GHC.Prim.-# x 1#
                    } in
                    let {
                      n :: Monopoly.Player
                      = case player of ww5 { Monopoly.Player ww6 ww7 ww8 ww9 ww10 ->
                        Monopoly.Player
                          ww6
                          ww7
                          ww8
                          (case ww9 of wild1 { GHC.Types.I# x1 ->
                           case cubesSum of wild2 { GHC.Types.I# y1 ->
                           case GHC.Classes.modInt#
                                  (GHC.Prim.-# (GHC.Prim.+# x1 y1) 1#)
                                  40# of ww11 { DEFAULT ->
                           GHC.Types.I# (GHC.Prim.+# ww11 1#) } } })
                          (case ww9 of wild1 { GHC.Types.I# x1 ->
                           case cubesSum of wild2 { GHC.Types.I# y1 ->
                           case GHC.Classes.modInt#
                                  (GHC.Prim.-# (GHC.Prim.+# x1 y1) 1#)
                                  40# of ww11 { DEFAULT ->
                           case Monopoly.$wgetPlayerPosition
                                  wild
                                  (GHC.Prim.+# ww11 1#) of ww12 { (#,#) ww13 ww14 ->
                           (ww13, ww14) } } } }) }
                    } in
                    let {
                      n1 :: [Monopoly.Player]
                      = case GHC.List.$wlenAcc
                               @ Monopoly.Player
                               ww
                               0# of ww5 { DEFAULT ->
                        let {
                          y1 :: GHC.Prim.Int# = GHC.Prim.-# ww5 x
                        } in
                        case GHC.Prim.tagToEnum#
                               @ GHC.Types.Bool
                               (GHC.Prim.<# 0# y1) of wild1 {
                          GHC.Types.False -> Monopoly.changePlayerCell21
                          GHC.Types.True
                          -> GHC.List.reverse1
                               @ Monopoly.Player
                               (GHC.List.$wunsafeTake
                                  @ Monopoly.Player
                                  y1
                                  (GHC.List.reverse1
                                     @ Monopoly.Player
                                     ww
                                     (GHC.Types.[] @ Monopoly.Player)))
                               (GHC.Types.[] @ Monopoly.Player) } }
                    } in
                    let {
                      n2 :: [Monopoly.Player] = GHC.Types.: @ Monopoly.Player n n1
                    } in
                    case GHC.Prim.tagToEnum#
                           @ GHC.Types.Bool
                           (GHC.Prim.<# 0# y) of wild1 {
                      GHC.Types.False -> n2
                      GHC.Types.True
                      -> letrec {
                           $wgo :: [Monopoly.Player] -> GHC.Prim.Int# -> [Monopoly.Player]
                             {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0] -}
                           = \ (w :: [Monopoly.Player]) (ww5 :: GHC.Prim.Int#) ->
                             case w of wild2 {
                               [] -> n2
                               : y1 ys
                               -> case ww5 of ds1 {
                                    DEFAULT
                                    -> GHC.Types.:
                                         @ Monopoly.Player
                                         y1
                                         ($wgo ys (GHC.Prim.-# ds1 1#))
                                    1# -> GHC.Types.: @ Monopoly.Player y1 n2 } }
                         } in
                         $wgo ww y } },
                    ww1, ww2, ww3, ww4,
                    case player of ww5 { Monopoly.Player ww6 ww7 ww8 ww9 ww10 ->
                    case ww9 of wild { GHC.Types.I# x ->
                    case cubesSum of wild1 { GHC.Types.I# y ->
                    case GHC.Classes.modInt#
                           (GHC.Prim.-# (GHC.Prim.+# x y) 1#)
                           40# of ww11 { DEFAULT ->
                    Monopoly.$wgetTypeCell
                      (GHC.Prim.+# ww11 1#)
                      (Monopoly.GameState
                         ww
                         ww1
                         ww2
                         ww3
                         ww4
                         Monopoly.changePlayerCell1) } } } } #)) -}
85677049d80ce1ea5f789d3228fe8c7e
  $wdrawGameState ::
    Monopoly.Images
    -> [Monopoly.Player]
    -> GHC.Base.String
    -> Graphics.Gloss.Internals.Data.Picture.Picture
  {- Arity: 3, Strictness: <L,U(1*U,1*U,1*U,1*U,1*U,1*U)><L,U><S,U>,
     Inline: [0] -}
aed6c94f772de239690a9084eab7107b
  $wgetPlayerPosition ::
    GHC.Types.Int
    -> GHC.Prim.Int# -> (# GHC.Types.Float, GHC.Types.Float #)
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*U(U)><S,U>,
     Inline: [0],
     Unfolding: (\ (w :: GHC.Types.Int) (ww :: GHC.Prim.Int#) ->
                 let {
                   $j :: (# GHC.Types.Float, GHC.Types.Float #) <join 0>
                   = let {
                       $j1 :: (# GHC.Types.Float, GHC.Types.Float #) <join 0>
                       = case GHC.Prim.tagToEnum#
                                @ GHC.Types.Bool
                                (GHC.Prim.>=# ww 22#) of wild {
                           GHC.Types.False
                           -> (# GHC.Types.F#
                                   (GHC.Prim.int2Float#
                                      (GHC.Prim.-# 365# (GHC.Prim.*# (GHC.Prim.-# ww 30#) 60#))),
                                 case w of wild1 { GHC.Types.I# x ->
                                 GHC.Types.F#
                                   (GHC.Prim.int2Float#
                                      (GHC.Prim.+# -360# (GHC.Prim.*# x 15#))) } #)
                           GHC.Types.True
                           -> case GHC.Prim.tagToEnum#
                                     @ GHC.Types.Bool
                                     (GHC.Prim.<=# ww 31#) of wild1 {
                                GHC.Types.False
                                -> (# GHC.Types.F#
                                        (GHC.Prim.int2Float#
                                           (GHC.Prim.-#
                                              365#
                                              (GHC.Prim.*# (GHC.Prim.-# ww 30#) 60#))),
                                      case w of wild2 { GHC.Types.I# x ->
                                      GHC.Types.F#
                                        (GHC.Prim.int2Float#
                                           (GHC.Prim.+# -360# (GHC.Prim.*# x 15#))) } #)
                                GHC.Types.True
                                -> (# case w of wild2 { GHC.Types.I# x ->
                                      GHC.Types.F#
                                        (GHC.Prim.int2Float#
                                           (GHC.Prim.-# 360# (GHC.Prim.*# x 15#))) },
                                      GHC.Types.F#
                                        (GHC.Prim.int2Float#
                                           (GHC.Prim.-#
                                              365#
                                              (GHC.Prim.*# (GHC.Prim.-# ww 20#) 60#))) #) } }
                     } in
                     case GHC.Prim.tagToEnum#
                            @ GHC.Types.Bool
                            (GHC.Prim.>=# ww 12#) of wild {
                       GHC.Types.False -> $j1
                       GHC.Types.True
                       -> case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.<=# ww 21#) of wild1 {
                            GHC.Types.False -> $j1
                            GHC.Types.True
                            -> (# GHC.Types.F#
                                    (GHC.Prim.int2Float#
                                       (GHC.Prim.+# -365# (GHC.Prim.*# (GHC.Prim.-# ww 10#) 60#))),
                                  case w of wild2 { GHC.Types.I# x ->
                                  GHC.Types.F#
                                    (GHC.Prim.int2Float#
                                       (GHC.Prim.-# 360# (GHC.Prim.*# x 15#))) } #) } }
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 1#) of wild {
                   GHC.Types.False -> $j
                   GHC.Types.True
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.<=# ww 11#) of wild1 {
                        GHC.Types.False -> $j
                        GHC.Types.True
                        -> (# case w of wild2 { GHC.Types.I# x ->
                              GHC.Types.F#
                                (GHC.Prim.int2Float# (GHC.Prim.+# -360# (GHC.Prim.*# x 15#))) },
                              GHC.Types.F#
                                (GHC.Prim.int2Float#
                                   (GHC.Prim.+# -350# (GHC.Prim.*# ww 60#))) #) } }) -}
ec6266fe2276f6d86aa89bf12d1175ea
  $wgetPriceRent ::
    [Monopoly.Player]
    -> GHC.Types.Int
    -> GHC.Base.Maybe GHC.Types.Int
    -> Monopoly.Cubes
    -> [Monopoly.Street]
    -> GHC.Base.String
    -> (# [Monopoly.Player], GHC.Types.Int,
          GHC.Base.Maybe GHC.Types.Int, Monopoly.Cubes, [Monopoly.Street],
          GHC.Base.String #)
  {- Arity: 6, Strictness: <L,U><L,U(U)><L,U><L,U><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ (ww :: [Monopoly.Player])
                   (ww1 :: GHC.Types.Int)
                   (ww2 :: GHC.Base.Maybe GHC.Types.Int)
                   (ww3 :: Monopoly.Cubes)
                   (ww4 :: [Monopoly.Street])
                   (ww5 :: GHC.Base.String) ->
                 (# case ww1 of ww6 { GHC.Types.I# ww7 ->
                    case GHC.List.$w!!
                           @ Monopoly.Player
                           ww
                           ww7 of wild { Monopoly.Player ds ds1 ds2 ds3 ds4 ->
                    case ds3 of wild1 { GHC.Types.I# x ->
                    case GHC.List.$w!!
                           @ Monopoly.Street
                           ww4
                           (GHC.Prim.-#
                              x
                              1#) of wild2 { Monopoly.Street ds5 ds6 ds7 ds8 ds9 ->
                    case ds9 of wild3 { GHC.Types.I# x1 ->
                    case GHC.List.$w!!
                           @ Monopoly.Player
                           ww
                           (GHC.Prim.-#
                              x1
                              1#) of wild4 { Monopoly.Player ds10 ds11 ds12 ds13 ds14 ->
                    case ds10 of wild5 { GHC.Types.I# x2 ->
                    let {
                      y :: GHC.Prim.Int# = GHC.Prim.-# x2 1#
                    } in
                    let {
                      n :: GHC.Types.Int
                      = case ds11 of wild6 { GHC.Types.I# x3 ->
                        case ds13 of wild7 { GHC.Types.I# x4 ->
                        case GHC.List.$w!!
                               @ Monopoly.Street
                               ww4
                               (GHC.Prim.-#
                                  x4
                                  1#) of wild8 { Monopoly.Street ds15 ds16 ds17 ds18 ds19 ->
                        case ds18 of wild9 { GHC.Types.I# x5 ->
                        GHC.Types.I# (GHC.Prim.+# x3 (GHC.Prim.*# x5 -1#)) } } } }
                    } in
                    let {
                      n1 :: Monopoly.Player = Monopoly.Player wild5 n ds12 ds13 ds14
                    } in
                    let {
                      n2 :: [Monopoly.Player]
                      = case GHC.List.$wlenAcc
                               @ Monopoly.Player
                               ww
                               0# of ww8 { DEFAULT ->
                        let {
                          y1 :: GHC.Prim.Int# = GHC.Prim.-# ww8 x2
                        } in
                        case GHC.Prim.tagToEnum#
                               @ GHC.Types.Bool
                               (GHC.Prim.<# 0# y1) of wild6 {
                          GHC.Types.False -> Monopoly.changePlayerCell21
                          GHC.Types.True
                          -> GHC.List.reverse1
                               @ Monopoly.Player
                               (GHC.List.$wunsafeTake
                                  @ Monopoly.Player
                                  y1
                                  (GHC.List.reverse1
                                     @ Monopoly.Player
                                     ww
                                     (GHC.Types.[] @ Monopoly.Player)))
                               (GHC.Types.[] @ Monopoly.Player) } }
                    } in
                    let {
                      n3 :: [Monopoly.Player] = GHC.Types.: @ Monopoly.Player n1 n2
                    } in
                    case GHC.Prim.tagToEnum#
                           @ GHC.Types.Bool
                           (GHC.Prim.<# 0# y) of wild6 {
                      GHC.Types.False -> n3
                      GHC.Types.True
                      -> letrec {
                           $wgo :: [Monopoly.Player] -> GHC.Prim.Int# -> [Monopoly.Player]
                             {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0] -}
                           = \ (w :: [Monopoly.Player]) (ww8 :: GHC.Prim.Int#) ->
                             case w of wild7 {
                               [] -> n3
                               : y1 ys
                               -> case ww8 of ds15 {
                                    DEFAULT
                                    -> GHC.Types.:
                                         @ Monopoly.Player
                                         y1
                                         ($wgo ys (GHC.Prim.-# ds15 1#))
                                    1# -> GHC.Types.: @ Monopoly.Player y1 n3 } }
                         } in
                         $wgo ww y } } } } } } } },
                    ww1, ww2, ww3, ww4, ww5 #)) -}
d7de114890a43104ee7651b3b45e08bb
  $wgetTypeCell ::
    GHC.Prim.Int# -> Monopoly.GameState -> [GHC.Types.Char]
  {- Arity: 2, Strictness: <S,1*U><L,1*U(A,A,A,A,1*U,A)>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#) (w :: Monopoly.GameState) ->
                 case ww of wild {
                   DEFAULT
                   -> case w of wild1 { Monopoly.GameState ds ds1 ds2 ds3 ds4 ds5 ->
                      case GHC.List.$w!!
                             @ Monopoly.Street
                             ds4
                             (GHC.Prim.-#
                                wild
                                1#) of wild2 { Monopoly.Street ds6 ds7 ds8 ds9 ds10 ->
                      case ds8 of wild3 {
                        GHC.Types.False -> Monopoly.changePlayerCell19
                        GHC.Types.True -> Monopoly.changePlayerCell17 } } }
                   1# -> Monopoly.changePlayerCell15
                   3# -> Monopoly.changePlayerCell13
                   5# -> Monopoly.changePlayerCell11
                   8# -> Monopoly.changePlayerCell9
                   11# -> Monopoly.changePlayerCell7
                   18# -> Monopoly.changePlayerCell13
                   21# -> Monopoly.changePlayerCell7
                   23# -> Monopoly.changePlayerCell9
                   31# -> Monopoly.changePlayerCell5
                   34# -> Monopoly.changePlayerCell13
                   37# -> Monopoly.changePlayerCell9
                   39# -> Monopoly.changePlayerCell3 }) -}
bad03acef8ee0b70fe7001269c377ec2
  $wisPay ::
    GHC.Prim.Float# -> GHC.Types.Float -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><L,U(U)>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Float#) (ww1 :: GHC.Types.Float) ->
                 let {
                   $j :: GHC.Base.Maybe GHC.Types.Bool <join 0>
                   = case GHC.Prim.tagToEnum#
                            @ GHC.Types.Bool
                            (GHC.Prim.gtFloat# ww 0.0#) of wild {
                       GHC.Types.False -> GHC.Base.Nothing @ GHC.Types.Bool
                       GHC.Types.True
                       -> case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.ltFloat# ww 100.0#) of wild1 {
                            GHC.Types.False -> GHC.Base.Nothing @ GHC.Types.Bool
                            GHC.Types.True
                            -> case ww1 of wild2 { GHC.Types.F# x ->
                               case GHC.Prim.tagToEnum#
                                      @ GHC.Types.Bool
                                      (GHC.Prim.gtFloat# x -50.0#) of wild3 {
                                 GHC.Types.False -> GHC.Base.Nothing @ GHC.Types.Bool
                                 GHC.Types.True
                                 -> case GHC.Prim.tagToEnum#
                                           @ GHC.Types.Bool
                                           (GHC.Prim.ltFloat# x 50.0#) of wild4 {
                                      GHC.Types.False -> GHC.Base.Nothing @ GHC.Types.Bool
                                      GHC.Types.True -> Monopoly.handleGame2 } } } } }
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.ltFloat# ww 0.0#) of wild {
                   GHC.Types.False -> $j
                   GHC.Types.True
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.gtFloat# ww -100.0#) of wild1 {
                        GHC.Types.False -> $j
                        GHC.Types.True
                        -> case ww1 of wild2 { GHC.Types.F# x ->
                           case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.gtFloat# x -50.0#) of wild3 {
                             GHC.Types.False -> $j
                             GHC.Types.True
                             -> case GHC.Prim.tagToEnum#
                                       @ GHC.Types.Bool
                                       (GHC.Prim.ltFloat# x 50.0#) of wild4 {
                                  GHC.Types.False -> $j
                                  GHC.Types.True -> Monopoly.handleGame1 } } } } }) -}
d773be70b60b7cdb443667b3af015e87
  $wmakeStepFeatures ::
    [Monopoly.Player]
    -> GHC.Types.Int
    -> GHC.Base.Maybe GHC.Types.Int
    -> Monopoly.Cubes
    -> [Monopoly.Street]
    -> GHC.Base.String
    -> (# [Monopoly.Player], GHC.Types.Int,
          GHC.Base.Maybe GHC.Types.Int, Monopoly.Cubes, [Monopoly.Street],
          GHC.Base.String #)
  {- Arity: 6, Strictness: <L,U><L,U(U)><L,U><L,U><L,U><S,U>,
     Inline: [0],
     Unfolding: (\ (ww :: [Monopoly.Player])
                   (ww1 :: GHC.Types.Int)
                   (ww2 :: GHC.Base.Maybe GHC.Types.Int)
                   (ww3 :: Monopoly.Cubes)
                   (ww4 :: [Monopoly.Street])
                   (ww5 :: GHC.Base.String) ->
                 case GHC.Base.eqString ww5 Monopoly.changePlayerCell15 of wild {
                   GHC.Types.False
                   -> case GHC.Base.eqString
                             ww5
                             Monopoly.changePlayerCell11 of wild1 {
                        GHC.Types.False
                        -> case GHC.Base.eqString ww5 Monopoly.changePlayerCell3 of wild2 {
                             GHC.Types.False
                             -> case GHC.Base.eqString ww5 Monopoly.changePlayerCell7 of wild3 {
                                  GHC.Types.False
                                  -> case GHC.Base.eqString
                                            ww5
                                            Monopoly.changePlayerCell17 of wild4 {
                                       GHC.Types.False -> (# ww, ww1, ww2, ww3, ww4, ww5 #)
                                       GHC.Types.True
                                       -> case Monopoly.$wpayPrictRent
                                                 ww
                                                 ww1
                                                 ww2
                                                 ww3
                                                 ww4
                                                 ww5 of ww6 { (#,,,,,#) ww7 ww8 ww9 ww10 ww11 ww12 ->
                                          Monopoly.$wgetPriceRent ww7 ww8 ww9 ww10 ww11 ww12 } }
                                  GHC.Types.True
                                  -> (# ww,
                                        case ww1 of wild4 { GHC.Types.I# x ->
                                        GHC.Types.I# (GHC.Prim.+# (GHC.Prim.andI# x 3#) 1#) },
                                        ww2, ww3, ww4, ww5 #) }
                             GHC.Types.True
                             -> Monopoly.$wpayTax
                                  ww
                                  ww1
                                  ww2
                                  ww3
                                  ww4
                                  ww5
                                  Monopoly.makeStepFeatures2 }
                        GHC.Types.True
                        -> Monopoly.$wpayTax
                             ww
                             ww1
                             ww2
                             ww3
                             ww4
                             ww5
                             Monopoly.makeStepFeatures1 }
                   GHC.Types.True -> (# ww, ww1, ww2, ww3, ww4, ww5 #) }) -}
6b9b79e661a5de10650a09d24d1c72ee
  $wpayPrictRent ::
    [Monopoly.Player]
    -> GHC.Types.Int
    -> GHC.Base.Maybe GHC.Types.Int
    -> Monopoly.Cubes
    -> [Monopoly.Street]
    -> GHC.Base.String
    -> (# [Monopoly.Player], GHC.Types.Int,
          GHC.Base.Maybe GHC.Types.Int, Monopoly.Cubes, [Monopoly.Street],
          GHC.Base.String #)
  {- Arity: 6, Strictness: <L,U><L,U(U)><L,U><L,U><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ (ww :: [Monopoly.Player])
                   (ww1 :: GHC.Types.Int)
                   (ww2 :: GHC.Base.Maybe GHC.Types.Int)
                   (ww3 :: Monopoly.Cubes)
                   (ww4 :: [Monopoly.Street])
                   (ww5 :: GHC.Base.String) ->
                 (# case ww1 of wild { GHC.Types.I# x ->
                    let {
                      y :: GHC.Prim.Int# = GHC.Prim.-# x 1#
                    } in
                    let {
                      n :: Monopoly.Player
                      = case GHC.List.$w!!
                               @ Monopoly.Player
                               ww
                               y of wild1 { Monopoly.Player ds ds1 ds2 ds3 ds4 ->
                        Monopoly.Player
                          ds
                          (case ds1 of wild2 { GHC.Types.I# x1 ->
                           case ds3 of wild3 { GHC.Types.I# x2 ->
                           case GHC.List.$w!!
                                  @ Monopoly.Street
                                  ww4
                                  (GHC.Prim.-#
                                     x2
                                     1#) of wild4 { Monopoly.Street ds5 ds6 ds7 ds8 ds9 ->
                           case ds8 of wild5 { GHC.Types.I# x3 ->
                           GHC.Types.I# (GHC.Prim.+# x1 (GHC.Prim.*# x3 -1#)) } } } })
                          ds2
                          ds3
                          ds4 }
                    } in
                    let {
                      n1 :: [Monopoly.Player]
                      = case GHC.List.$wlenAcc
                               @ Monopoly.Player
                               ww
                               0# of ww6 { DEFAULT ->
                        let {
                          y1 :: GHC.Prim.Int# = GHC.Prim.-# ww6 x
                        } in
                        case GHC.Prim.tagToEnum#
                               @ GHC.Types.Bool
                               (GHC.Prim.<# 0# y1) of wild1 {
                          GHC.Types.False -> Monopoly.changePlayerCell21
                          GHC.Types.True
                          -> GHC.List.reverse1
                               @ Monopoly.Player
                               (GHC.List.$wunsafeTake
                                  @ Monopoly.Player
                                  y1
                                  (GHC.List.reverse1
                                     @ Monopoly.Player
                                     ww
                                     (GHC.Types.[] @ Monopoly.Player)))
                               (GHC.Types.[] @ Monopoly.Player) } }
                    } in
                    let {
                      n2 :: [Monopoly.Player] = GHC.Types.: @ Monopoly.Player n n1
                    } in
                    case GHC.Prim.tagToEnum#
                           @ GHC.Types.Bool
                           (GHC.Prim.<# 0# y) of wild1 {
                      GHC.Types.False -> n2
                      GHC.Types.True
                      -> letrec {
                           $wgo :: [Monopoly.Player] -> GHC.Prim.Int# -> [Monopoly.Player]
                             {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0] -}
                           = \ (w :: [Monopoly.Player]) (ww6 :: GHC.Prim.Int#) ->
                             case w of wild2 {
                               [] -> n2
                               : y1 ys
                               -> case ww6 of ds1 {
                                    DEFAULT
                                    -> GHC.Types.:
                                         @ Monopoly.Player
                                         y1
                                         ($wgo ys (GHC.Prim.-# ds1 1#))
                                    1# -> GHC.Types.: @ Monopoly.Player y1 n2 } }
                         } in
                         $wgo ww y } },
                    ww1, ww2, ww3, ww4, ww5 #)) -}
e41133266fa081c203811794c2fb5c1e
  $wpayTax ::
    [Monopoly.Player]
    -> GHC.Types.Int
    -> GHC.Base.Maybe GHC.Types.Int
    -> Monopoly.Cubes
    -> [Monopoly.Street]
    -> GHC.Base.String
    -> GHC.Types.Int
    -> (# [Monopoly.Player], GHC.Types.Int,
          GHC.Base.Maybe GHC.Types.Int, Monopoly.Cubes, [Monopoly.Street],
          GHC.Base.String #)
  {- Arity: 7,
     Strictness: <L,U><L,U(U)><L,U><L,U><L,U><L,U><L,1*U(U)>,
     Inline: [0],
     Unfolding: (\ (ww :: [Monopoly.Player])
                   (ww1 :: GHC.Types.Int)
                   (ww2 :: GHC.Base.Maybe GHC.Types.Int)
                   (ww3 :: Monopoly.Cubes)
                   (ww4 :: [Monopoly.Street])
                   (ww5 :: GHC.Base.String)
                   (w :: GHC.Types.Int) ->
                 (# case ww1 of wild { GHC.Types.I# x ->
                    let {
                      y :: GHC.Prim.Int# = GHC.Prim.-# x 1#
                    } in
                    let {
                      n :: Monopoly.Player
                      = case GHC.List.$w!!
                               @ Monopoly.Player
                               ww
                               y of wild1 { Monopoly.Player ds ds1 ds2 ds3 ds4 ->
                        Monopoly.Player
                          ds
                          (case ds1 of wild2 { GHC.Types.I# x1 ->
                           case w of wild3 { GHC.Types.I# y1 ->
                           GHC.Types.I# (GHC.Prim.-# x1 y1) } })
                          ds2
                          ds3
                          ds4 }
                    } in
                    let {
                      n1 :: [Monopoly.Player]
                      = case GHC.List.$wlenAcc
                               @ Monopoly.Player
                               ww
                               0# of ww6 { DEFAULT ->
                        let {
                          y1 :: GHC.Prim.Int# = GHC.Prim.-# ww6 x
                        } in
                        case GHC.Prim.tagToEnum#
                               @ GHC.Types.Bool
                               (GHC.Prim.<# 0# y1) of wild1 {
                          GHC.Types.False -> Monopoly.changePlayerCell21
                          GHC.Types.True
                          -> GHC.List.reverse1
                               @ Monopoly.Player
                               (GHC.List.$wunsafeTake
                                  @ Monopoly.Player
                                  y1
                                  (GHC.List.reverse1
                                     @ Monopoly.Player
                                     ww
                                     (GHC.Types.[] @ Monopoly.Player)))
                               (GHC.Types.[] @ Monopoly.Player) } }
                    } in
                    let {
                      n2 :: [Monopoly.Player] = GHC.Types.: @ Monopoly.Player n n1
                    } in
                    case GHC.Prim.tagToEnum#
                           @ GHC.Types.Bool
                           (GHC.Prim.<# 0# y) of wild1 {
                      GHC.Types.False -> n2
                      GHC.Types.True
                      -> letrec {
                           $wgo :: [Monopoly.Player] -> GHC.Prim.Int# -> [Monopoly.Player]
                             {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0] -}
                           = \ (w1 :: [Monopoly.Player]) (ww6 :: GHC.Prim.Int#) ->
                             case w1 of wild2 {
                               [] -> n2
                               : y1 ys
                               -> case ww6 of ds1 {
                                    DEFAULT
                                    -> GHC.Types.:
                                         @ Monopoly.Player
                                         y1
                                         ($wgo ys (GHC.Prim.-# ds1 1#))
                                    1# -> GHC.Types.: @ Monopoly.Player y1 n2 } }
                         } in
                         $wgo ww y } },
                    case ww1 of wild1 { GHC.Types.I# x ->
                    GHC.Types.I# (GHC.Prim.+# (GHC.Prim.andI# x 3#) 1#) },
                    ww2, ww3, ww4, ww5 #)) -}
4722d1a2b76bd9c017b2a63bbf7ee43b
  type Cards = [Monopoly.ChanceCard]
6bcfbccc32ada50007df2a427dd97d7b
  data ChanceCard
    = ChanceCard {num :: GHC.Types.Int,
                  price2 :: GHC.Types.Int,
                  text2 :: GHC.Base.String}
d15a78157415196aa8616bbb4f87e4e1
  data Cubes
    = Cubes {firstCube :: GHC.Types.Int, secondCube :: GHC.Types.Int}
e82b4e3318daaeb987adaca730bd19d2
  data GameState
    = GameState {players :: [Monopoly.Player],
                 gamePlayer :: GHC.Types.Int,
                 haveWinner :: GHC.Base.Maybe GHC.Types.Int,
                 cubes :: Monopoly.Cubes,
                 land :: [Monopoly.Street],
                 typeStep :: GHC.Base.String}
9704b783e118453906eb0535e16ebb5e
  data Images
    = Images {imagePieceRed :: Graphics.Gloss.Internals.Data.Picture.Picture,
              imagePieceBlue :: Graphics.Gloss.Internals.Data.Picture.Picture,
              imagePieceGreen :: Graphics.Gloss.Internals.Data.Picture.Picture,
              imagePieceYellow :: Graphics.Gloss.Internals.Data.Picture.Picture,
              imagePlayingField :: Graphics.Gloss.Internals.Data.Picture.Picture,
              imagePayMenu :: Graphics.Gloss.Internals.Data.Picture.Picture}
78cf08954a4a97e6e70eb90650024072
  class Physical a where
    getPosition :: a -> Graphics.Gloss.Internals.Data.Picture.Point
    getCell :: a -> GHC.Types.Int
    setPosition :: Graphics.Gloss.Internals.Data.Picture.Point
                   -> a -> a
    setCell :: GHC.Types.Int -> a -> a
    {-# MINIMAL getPosition, getCell, setPosition, setCell #-}
0a10b1c475ab42bce8e36804deec12c5
  data Player
    = Player {colour :: GHC.Types.Int,
              money :: GHC.Types.Int,
              property :: [Monopoly.Street],
              playerCell :: GHC.Types.Int,
              playerPosition :: Graphics.Gloss.Internals.Data.Picture.Point}
b6b00bf78dc3a464729bafe1bdc8000f
  data Street
    = Street {name :: GHC.Base.String,
              price :: GHC.Types.Int,
              isRent :: GHC.Types.Bool,
              priceRent :: GHC.Types.Int,
              owner :: GHC.Types.Int}
2f45452b58e09d1354de9100ae106f2c
  canGo :: Monopoly.GameState -> GHC.Base.Maybe Monopoly.GameState
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>m2,
     Unfolding: InlineRule (0, True, True)
                (GHC.Base.Just @ Monopoly.GameState) -}
4e3710782c66e4ab48b87ceda8911d02
  chanceCard :: Monopoly.GameState -> Monopoly.GameState
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U,U,U,U,U,U)>m,
     Unfolding: InlineRule (1, True, True)
                (\ (gameState :: Monopoly.GameState) -> gameState) -}
8f7ff710511213de6f5acd3bf26e9bbc
  changeBalance ::
    Monopoly.Player -> GHC.Types.Int -> Monopoly.Player
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S,1*U(U,1*U(U),U,U,U)><L,1*U(U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ (player :: Monopoly.Player) (sum :: GHC.Types.Int) ->
                 case player of wild { Monopoly.Player ds ds1 ds2 ds3 ds4 ->
                 Monopoly.Player
                   ds
                   (case ds1 of wild1 { GHC.Types.I# x ->
                    case sum of wild2 { GHC.Types.I# y ->
                    GHC.Types.I# (GHC.Prim.+# x y) } })
                   ds2
                   ds3
                   ds4 }) -}
76057cc18a616ea811398bffaee197d0
  changePlayerCell :: Monopoly.GameState -> Monopoly.GameState
  {- Arity: 1, Strictness: <S,1*U(U,U(U),U,U(U(U),U(U)),U,A)>m,
     Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Monopoly.GameState) ->
                 case w of ww { Monopoly.GameState ww1 ww2 ww3 ww4 ww5 ww6 ->
                 case Monopoly.$wchangePlayerCell
                        ww1
                        ww2
                        ww3
                        ww4
                        ww5 of ww7 { (#,,,,,#) ww8 ww9 ww10 ww11 ww12 ww13 ->
                 Monopoly.GameState ww8 ww9 ww10 ww11 ww12 ww13 } }) -}
f3bb4cfd306f3df9bb48d85237af5fdd
  changePlayerCell1 :: GHC.Base.String
  {- Unfolding: (Control.Exception.Base.absentError
                   @ GHC.Base.String
                   Monopoly.changePlayerCell2) -}
d699fea37affff12209eda7d686d9521
  changePlayerCell10 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("\\209\\136\\208\\176\\208\\189\\209\\129"#) -}
2f29ec810b19dea003154fdb50eeeabf
  changePlayerCell11 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCStringUtf8#
                   Monopoly.changePlayerCell12) -}
ea09e869dff1801db041da946f67ec1a
  changePlayerCell12 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("\\208\\189\\208\\176\\208\\187\\208\\190\\208\\179"#) -}
cd926b5fae5259054bb67e6fb27ac1e2
  changePlayerCell13 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCStringUtf8#
                   Monopoly.changePlayerCell14) -}
2404cb72de8a8b7f01da3279bb5675f3
  changePlayerCell14 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("\\208\\186\\208\\176\\208\\183\\208\\189\\208\\176"#) -}
4c020f4aff0cd69d2b33bf03737aa1f1
  changePlayerCell15 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCStringUtf8#
                   Monopoly.changePlayerCell16) -}
7c8642dadd467211670a4641a48756f9
  changePlayerCell16 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("\\209\\129\\209\\130\\208\\176\\209\\128\\209\\130"#) -}
7ce63d9257b81f50aeb748cb7af68ac2
  changePlayerCell17 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCStringUtf8#
                   Monopoly.changePlayerCell18) -}
3c36c49e2d6e451d5ec1e5cea7930190
  changePlayerCell18 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("\\208\\186\\208\\176\\209\\132\\208\\181\\208\\180\\209\\128\\208\\176 \\208\\183\\208\\176\\208\\189\\209\\143\\209\\130\\208\\176"#) -}
a38b67e7d4462ca74ae137a72546274c
  changePlayerCell19 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCStringUtf8#
                   Monopoly.changePlayerCell20) -}
1ba26251152451b6e5cfbaed1eb9ca74
  changePlayerCell2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ww String"#) -}
cbba80a3e45c9f01429c954936b2882f
  changePlayerCell20 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("\\208\\186\\208\\176\\209\\132\\208\\181\\208\\180\\209\\128\\208\\176 \\209\\129\\208\\178\\208\\190\\208\\177\\208\\190\\208\\180\\208\\189\\208\\176\\209\\143"#) -}
18aed774567890064b3f1b3f7c673973
  changePlayerCell21 :: [Monopoly.Player]
  {- Unfolding: (GHC.List.reverse1
                   @ Monopoly.Player
                   (GHC.Types.[] @ Monopoly.Player)
                   (GHC.Types.[] @ Monopoly.Player)) -}
9916b6a70897379b6e8dac8f07ed9c78
  changePlayerCell3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCStringUtf8#
                   Monopoly.changePlayerCell4) -}
cf1b90aa4e4fa16ecd2ae4e0278712da
  changePlayerCell4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("\\209\\129\\208\\178\\208\\181\\209\\128\\209\\133\\208\\189\\208\\176\\208\\187\\208\\190\\208\\179"#) -}
edc1a5d923000451407141922f834054
  changePlayerCell5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCStringUtf8#
                   Monopoly.changePlayerCell6) -}
9114718b3629a33ef1150da536680143
  changePlayerCell6 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("\\209\\130\\209\\142\\209\\128\\209\\140\\208\\188\\208\\176"#) -}
1efbe2a1417f7e9d56c46247ccbaaa88
  changePlayerCell7 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCStringUtf8#
                   Monopoly.changePlayerCell8) -}
9c4d0cf3a4a11faceca820ce5f3a9f78
  changePlayerCell8 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("\\209\\129\\209\\130\\208\\190\\209\\143\\208\\189\\208\\186\\208\\176"#) -}
cd7840be7cf9a96028b0a575ad137803
  changePlayerCell9 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCStringUtf8#
                   Monopoly.changePlayerCell10) -}
0a10b1c475ab42bce8e36804deec12c5
  colour :: Monopoly.Player -> GHC.Types.Int
  RecSel Left Monopoly.Player
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(SLLLL),1*U(1*U(U),A,A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Monopoly.Player) ->
                 case ds of wild { Monopoly.Player ds1 ds2 ds3 ds4 ds5 -> ds1 }) -}
e82b4e3318daaeb987adaca730bd19d2
  cubes :: Monopoly.GameState -> Monopoly.Cubes
  RecSel Left Monopoly.GameState
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLSLL),1*U(A,A,A,1*U(U,U),A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Monopoly.GameState) ->
                 case ds of wild { Monopoly.GameState ds1 ds2 ds3 ds4 ds5 ds6 ->
                 ds4 }) -}
a8dad92446ef6e8ef3a5d6fdfd7daf30
  doStep ::
    Graphics.Gloss.Internals.Data.Picture.Point
    -> Monopoly.GameState -> Monopoly.GameState
  {- Arity: 2, Strictness: <L,A><S(LLSLLL),1*U(U,U(U),U,U,U,U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ (point :: Graphics.Gloss.Internals.Data.Picture.Point)
                   (gameState :: Monopoly.GameState) ->
                 case gameState of wild { Monopoly.GameState ds ds1 ds2 ds3 ds4 ds5 ->
                 case ds2 of wild1 {
                   GHC.Base.Nothing
                   -> Monopoly.makeStepFeatures
                        (Monopoly.changePlayerCell
                           (Monopoly.GameState
                              ds
                              ds1
                              (GHC.Base.Nothing @ GHC.Types.Int)
                              Monopoly.doStep1
                              ds4
                              ds5))
                   GHC.Base.Just ds6 -> wild } }) -}
88424d588f1f0fead46d259cb72975ae
  doStep1 :: Monopoly.Cubes
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (Monopoly.Cubes Monopoly.doStep3 Monopoly.doStep2) -}
c86669d5b4861b468052a683a135defa
  doStep2 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 2#) -}
1955f56437b5e0131ffc5e903a43dc48
  doStep3 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 1#) -}
4ce82b3f8518877fa679e2bac16de926
  drawGameState ::
    Monopoly.Images
    -> Monopoly.GameState
    -> Graphics.Gloss.Internals.Data.Picture.Picture
  {- Arity: 2,
     Strictness: <L,U(U,U,U,U,U,U)><S(LLLLLS),1*U(U,A,A,A,A,U)>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Monopoly.Images) (w1 :: Monopoly.GameState) ->
                 case w1 of ww { Monopoly.GameState ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Monopoly.$wdrawGameState w ww1 ww6 }) -}
7f0fec3a60b72a70082be1161931190b
  drawPayMenu ::
    Graphics.Gloss.Internals.Data.Picture.Picture
    -> Graphics.Gloss.Internals.Data.Picture.Picture
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>m11,
     Unfolding: InlineRule (1, True, False)
                (\ (image :: Graphics.Gloss.Internals.Data.Picture.Picture) ->
                 Graphics.Gloss.Internals.Data.Picture.Translate
                   Monopoly.drawPayMenu1
                   Monopoly.drawPayMenu1
                   image) -}
a65cf89efc0e2f8ec821805c3ced99e9
  drawPayMenu1 :: GHC.Types.Float
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.F# 0.0#) -}
356c1896fd38ef7c9bdd27a0bd780924
  drawPiece ::
    Graphics.Gloss.Internals.Data.Picture.Picture
    -> Monopoly.Player -> Graphics.Gloss.Internals.Data.Picture.Picture
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,U><L,1*U(A,A,A,A,1*U(1*U,1*U))>m11,
     Unfolding: InlineRule (2, True, False)
                (\ (image :: Graphics.Gloss.Internals.Data.Picture.Picture)
                   (player :: Monopoly.Player) ->
                 let {
                   ds :: (GHC.Types.Float, GHC.Types.Float)
                   = case player of wild { Monopoly.Player ds1 ds2 ds3 ds4 ds5 ->
                     ds5 }
                 } in
                 Graphics.Gloss.Internals.Data.Picture.Translate
                   (case ds of wild { (,) x y -> x })
                   (case ds of wild { (,) x y -> y })
                   (Graphics.Gloss.Internals.Data.Picture.Scale
                      Monopoly.drawPiece_r
                      Monopoly.drawPiece_r
                      image)) -}
d15b86109c92e41c8e972ede2658785b
  drawPiece_r :: GHC.Types.Float
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.F# 2.0#) -}
140c283ba138ad4af45fd4b5b514cdd8
  drawPlayingField ::
    Graphics.Gloss.Internals.Data.Picture.Picture
    -> Graphics.Gloss.Internals.Data.Picture.Picture
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>m11,
     Unfolding: InlineRule (1, True, False)
                (\ (image :: Graphics.Gloss.Internals.Data.Picture.Picture) ->
                 Graphics.Gloss.Internals.Data.Picture.Translate
                   Monopoly.drawPayMenu1
                   Monopoly.drawPayMenu1
                   image) -}
d15a78157415196aa8616bbb4f87e4e1
  firstCube :: Monopoly.Cubes -> GHC.Types.Int
  RecSel Left Monopoly.Cubes
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SL),1*U(1*U(U),A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Monopoly.Cubes) ->
                 case ds of wild { Monopoly.Cubes ds1 ds2 -> ds1 }) -}
e82b4e3318daaeb987adaca730bd19d2
  gamePlayer :: Monopoly.GameState -> GHC.Types.Int
  RecSel Left Monopoly.GameState
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LSLLLL),1*U(A,1*U(U),A,A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Monopoly.GameState) ->
                 case ds of wild { Monopoly.GameState ds1 ds2 ds3 ds4 ds5 ds6 ->
                 ds2 }) -}
b655285bd9c24a5669506db8d0aa31f4
  getPlayerPosition ::
    GHC.Types.Int
    -> GHC.Types.Int -> Graphics.Gloss.Internals.Data.Picture.Point
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*U(U)><S(S),1*U(U)>m,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int) (w1 :: GHC.Types.Int) ->
                 case w1 of ww { GHC.Types.I# ww1 ->
                 case Monopoly.$wgetPlayerPosition w ww1 of ww2 { (#,#) ww3 ww4 ->
                 (ww3, ww4) } }) -}
9e1ded17f4b1622c711e91f2407bd91a
  getPriceRent :: Monopoly.GameState -> Monopoly.GameState
  {- Arity: 1, Strictness: <S,1*U(U,U(U),U,U,U,U)>m, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Monopoly.GameState) ->
                 case w of ww { Monopoly.GameState ww1 ww2 ww3 ww4 ww5 ww6 ->
                 case Monopoly.$wgetPriceRent
                        ww1
                        ww2
                        ww3
                        ww4
                        ww5
                        ww6 of ww7 { (#,,,,,#) ww8 ww9 ww10 ww11 ww12 ww13 ->
                 Monopoly.GameState ww8 ww9 ww10 ww11 ww12 ww13 } }) -}
318b780aa8efd5e8d9d462abd90f6868
  getTypeCell ::
    GHC.Types.Int -> Monopoly.GameState -> GHC.Base.String
  {- Arity: 2, Strictness: <S(S),1*U(1*U)><L,1*U(A,A,A,A,1*U,A)>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int) (w1 :: Monopoly.GameState) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Monopoly.$wgetTypeCell ww1 w1 }) -}
cb11fff5e00a79ba097cc910e13069e4
  handleGame ::
    Graphics.Gloss.Internals.Interface.Event.Event
    -> Monopoly.GameState -> Monopoly.GameState
  {- Arity: 2, Strictness: <S,1*U><S,1*U(U,U(U),U,U,U,U)>m,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Graphics.Gloss.Internals.Interface.Event.Event)
                   (w1 :: Monopoly.GameState) ->
                 case w1 of ww { Monopoly.GameState ww1 ww2 ww3 ww4 ww5 ww6 ->
                 case w of wild {
                   DEFAULT -> Monopoly.GameState ww1 ww2 ww3 ww4 ww5 ww6
                   Graphics.Gloss.Internals.Interface.Event.EventKey ds ds1 ds2 mouse
                   -> case ds of wild1 {
                        DEFAULT -> Monopoly.GameState ww1 ww2 ww3 ww4 ww5 ww6
                        Graphics.Gloss.Internals.Interface.Backend.Types.MouseButton ds3
                        -> case ds3 of wild2 {
                             DEFAULT -> Monopoly.GameState ww1 ww2 ww3 ww4 ww5 ww6
                             Graphics.Gloss.Internals.Interface.Backend.Types.LeftButton
                             -> case ds1 of wild3 {
                                  Graphics.Gloss.Internals.Interface.Backend.Types.Down
                                  -> case GHC.Base.eqString ww6 Monopoly.handleGame3 of wild4 {
                                       GHC.Types.False
                                       -> case GHC.Base.eqString
                                                 ww6
                                                 Monopoly.changePlayerCell19 of wild5 {
                                            GHC.Types.False
                                            -> Monopoly.GameState ww1 ww2 ww3 ww4 ww5 ww6
                                            GHC.Types.True
                                            -> case mouse of ww7 { (,) ww8 ww9 ->
                                               case ww8 of ww10 { GHC.Types.F# ww11 ->
                                               case Monopoly.$wisPay ww11 ww9 of wild6 {
                                                 GHC.Base.Nothing
                                                 -> Monopoly.GameState ww1 ww2 ww3 ww4 ww5 ww6
                                                 GHC.Base.Just ds4
                                                 -> case ds4 of wild7 {
                                                      GHC.Types.False
                                                      -> Monopoly.GameState
                                                           ww1
                                                           (case ww2 of wild8 { GHC.Types.I# x ->
                                                            GHC.Types.I#
                                                              (GHC.Prim.+#
                                                                 (GHC.Prim.andI# x 3#)
                                                                 1#) })
                                                           ww3
                                                           ww4
                                                           ww5
                                                           Monopoly.handleGame3
                                                      GHC.Types.True
                                                      -> Monopoly.GameState
                                                           ww1
                                                           (case ww2 of wild8 { GHC.Types.I# x ->
                                                            GHC.Types.I#
                                                              (GHC.Prim.+#
                                                                 (GHC.Prim.andI# x 3#)
                                                                 1#) })
                                                           ww3
                                                           ww4
                                                           ww5
                                                           Monopoly.handleGame3 } } } } }
                                       GHC.Types.True
                                       -> case ww3 of wild5 {
                                            GHC.Base.Nothing
                                            -> case Monopoly.$wchangePlayerCell
                                                      ww1
                                                      ww2
                                                      (GHC.Base.Nothing @ GHC.Types.Int)
                                                      Monopoly.doStep1
                                                      ww5 of ww7 { (#,,,,,#) ww8 ww9 ww10 ww11 ww12 ww13 ->
                                               case Monopoly.$wmakeStepFeatures
                                                      ww8
                                                      ww9
                                                      ww10
                                                      ww11
                                                      ww12
                                                      ww13 of ww14 { (#,,,,,#) ww15 ww16 ww17 ww18 ww19 ww20 ->
                                               Monopoly.GameState ww15 ww16 ww17 ww18 ww19 ww20 } }
                                            GHC.Base.Just ds4
                                            -> Monopoly.GameState ww1 ww2 wild5 ww4 ww5 ww6 } }
                                  Graphics.Gloss.Internals.Interface.Backend.Types.Up
                                  -> Monopoly.GameState ww1 ww2 ww3 ww4 ww5 ww6 } } } } }) -}
151fa07d901abba15afb8ca0099ee487
  handleGame1 :: GHC.Base.Maybe GHC.Types.Bool
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Base.Just @ GHC.Types.Bool GHC.Types.True) -}
6189111d8b9fd76692e8e3bf2c9ed65e
  handleGame2 :: GHC.Base.Maybe GHC.Types.Bool
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Base.Just @ GHC.Types.Bool GHC.Types.False) -}
567cb98c19df4500c63593302226198d
  handleGame3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCStringUtf8#
                   Monopoly.handleGame4) -}
370eee20576c5a19a59e84e2092991ae
  handleGame4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("\\209\\133\\208\\190\\208\\180"#) -}
673baba606b4ecd2b46d40f8691dca28
  handlePay ::
    Graphics.Gloss.Internals.Interface.Event.Event
    -> Monopoly.GameState -> Monopoly.GameState
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S,1*U><S,1*U(U,U,U,U,U,U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: Graphics.Gloss.Internals.Interface.Event.Event)
                   (eta :: Monopoly.GameState) ->
                 case ds of wild {
                   DEFAULT -> eta
                   Graphics.Gloss.Internals.Interface.Event.EventKey ds1 ds2 ds3 mouse
                   -> case ds1 of wild1 {
                        DEFAULT -> eta
                        Graphics.Gloss.Internals.Interface.Backend.Types.MouseButton ds4
                        -> case ds4 of wild2 {
                             DEFAULT -> eta
                             Graphics.Gloss.Internals.Interface.Backend.Types.LeftButton
                             -> case ds2 of wild3 { DEFAULT -> eta } } } }) -}
e82b4e3318daaeb987adaca730bd19d2
  haveWinner :: Monopoly.GameState -> GHC.Base.Maybe GHC.Types.Int
  RecSel Left Monopoly.GameState
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLSLLL),1*U(A,A,1*U,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Monopoly.GameState) ->
                 case ds of wild { Monopoly.GameState ds1 ds2 ds3 ds4 ds5 ds6 ->
                 ds3 }) -}
9704b783e118453906eb0535e16ebb5e
  imagePayMenu ::
    Monopoly.Images -> Graphics.Gloss.Internals.Data.Picture.Picture
  RecSel Left Monopoly.Images
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLS),1*U(A,A,A,A,A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Monopoly.Images) ->
                 case ds of wild { Monopoly.Images ds1 ds2 ds3 ds4 ds5 ds6 ->
                 ds6 }) -}
9704b783e118453906eb0535e16ebb5e
  imagePieceBlue ::
    Monopoly.Images -> Graphics.Gloss.Internals.Data.Picture.Picture
  RecSel Left Monopoly.Images
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LSLLLL),1*U(A,1*U,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Monopoly.Images) ->
                 case ds of wild { Monopoly.Images ds1 ds2 ds3 ds4 ds5 ds6 ->
                 ds2 }) -}
9704b783e118453906eb0535e16ebb5e
  imagePieceGreen ::
    Monopoly.Images -> Graphics.Gloss.Internals.Data.Picture.Picture
  RecSel Left Monopoly.Images
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLSLLL),1*U(A,A,1*U,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Monopoly.Images) ->
                 case ds of wild { Monopoly.Images ds1 ds2 ds3 ds4 ds5 ds6 ->
                 ds3 }) -}
9704b783e118453906eb0535e16ebb5e
  imagePieceRed ::
    Monopoly.Images -> Graphics.Gloss.Internals.Data.Picture.Picture
  RecSel Left Monopoly.Images
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(SLLLLL),1*U(1*U,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Monopoly.Images) ->
                 case ds of wild { Monopoly.Images ds1 ds2 ds3 ds4 ds5 ds6 ->
                 ds1 }) -}
9704b783e118453906eb0535e16ebb5e
  imagePieceYellow ::
    Monopoly.Images -> Graphics.Gloss.Internals.Data.Picture.Picture
  RecSel Left Monopoly.Images
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLSLL),1*U(A,A,A,1*U,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Monopoly.Images) ->
                 case ds of wild { Monopoly.Images ds1 ds2 ds3 ds4 ds5 ds6 ->
                 ds4 }) -}
9704b783e118453906eb0535e16ebb5e
  imagePlayingField ::
    Monopoly.Images -> Graphics.Gloss.Internals.Data.Picture.Picture
  RecSel Left Monopoly.Images
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLSL),1*U(A,A,A,A,1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Monopoly.Images) ->
                 case ds of wild { Monopoly.Images ds1 ds2 ds3 ds4 ds5 ds6 ->
                 ds5 }) -}
7b969a07be6f667395fe33cd601c38de
  initCards :: Monopoly.Cards -> Monopoly.Cards
  {- Arity: 1, Strictness: <L,A>m2,
     Unfolding: InlineRule (1, True, True)
                (\ (cards :: Monopoly.Cards) -> Monopoly.initCards1) -}
c0a2929a017870d148b1bfe73509ab5d
  initCards1 :: [Monopoly.ChanceCard]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Monopoly.ChanceCard
                   Monopoly.initCards23
                   Monopoly.initCards2) -}
e559df9c2fffa1806d64bb9f3ecbe418
  initCards10 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 4#) -}
53b70f639174effde1c940ed2f4c3772
  initCards11 :: Monopoly.ChanceCard
  {- Strictness: m,
     Unfolding: (Monopoly.ChanceCard
                   Monopoly.initCards15
                   Monopoly.initCards14
                   Monopoly.initCards12) -}
f94131f0d87a4459f050a4b7647b3b5a
  initCards12 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCStringUtf8#
                   Monopoly.initCards13) -}
f56dfdd1fceb29d9a84d452919287e1b
  initCards13 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("\\208\\168\\209\\130\\209\\128\\208\\176\\209\\132 200 \\208\\177\\208\\176\\208\\187\\208\\187\\208\\190\\208\\178!"#) -}
d0737303cc745408157e2b0e1ba51bce
  initCards14 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# -200#) -}
51c1f9e06921667c91e1a3f99e96ced4
  initCards15 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 3#) -}
0922ae8076202812335b6b220f54ddf5
  initCards16 :: Monopoly.ChanceCard
  {- Strictness: m,
     Unfolding: (Monopoly.ChanceCard
                   Monopoly.doStep2
                   Monopoly.makeStepFeatures1
                   Monopoly.initCards17) -}
c52b63e51a55784d03be7055f7c55e03
  initCards17 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCStringUtf8#
                   Monopoly.initCards18) -}
f7c2daf92a70ed2f0d5e424dcaae6beb
  initCards18 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("\\208\\161 \\208\\180\\208\\189\\208\\181\\208\\188 \\209\\128\\208\\190\\208\\182\\208\\180\\208\\181\\208\\189\\208\\184\\209\\143! \\208\\146\\208\\176\\208\\188 \\208\\191\\208\\190\\208\\180\\208\\176\\209\\128\\208\\190\\208\\186 200 \\208\\177\\208\\176\\208\\187\\208\\187\\208\\190\\208\\178"#) -}
e5a8c55d79089200e037650451e56086
  initCards19 :: Monopoly.ChanceCard
  {- Strictness: m,
     Unfolding: (Monopoly.ChanceCard
                   Monopoly.doStep3
                   Monopoly.initCards22
                   Monopoly.initCards20) -}
bc3aea453631dcc21b91a76651da0329
  initCards2 :: [Monopoly.ChanceCard]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Monopoly.ChanceCard
                   Monopoly.initCards19
                   Monopoly.initCards3) -}
e611c5f51258599ec51e8ba24d7caad3
  initCards20 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCStringUtf8#
                   Monopoly.initCards21) -}
0c1cae426e05abf7c6e65f62060ac3ff
  initCards21 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("\\208\\168\\209\\130\\209\\128\\208\\176\\209\\132 100 \\208\\177\\208\\176\\208\\187\\208\\187\\208\\190\\208\\178!"#) -}
edd46c6d9f631bde3986157e7ff4ea0b
  initCards22 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# -100#) -}
34e8107efcd81e0c70e8ee5499592f6f
  initCards23 :: Monopoly.ChanceCard
  {- Strictness: m,
     Unfolding: (Monopoly.ChanceCard
                   Monopoly.initCards9
                   Monopoly.makeStepFeatures2
                   Monopoly.initCards24) -}
127b6fa2ea492eae7ecfa4f30492031f
  initCards24 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCStringUtf8#
                   Monopoly.initCards25) -}
f9ce5fc86527778eebc17bb7613b3483
  initCards25 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("\\208\\146\\208\\176\\208\\188 \\208\\191\\208\\190\\208\\180\\208\\176\\209\\128\\208\\190\\208\\186 100 \\208\\177\\208\\176\\208\\187\\208\\187\\208\\190\\208\\178!"#) -}
40cf2813c80e8f7a0cbea9f48836d284
  initCards3 :: [Monopoly.ChanceCard]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Monopoly.ChanceCard
                   Monopoly.initCards16
                   Monopoly.initCards4) -}
00398ef6dcb565864ceead0fb10a6405
  initCards4 :: [Monopoly.ChanceCard]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Monopoly.ChanceCard
                   Monopoly.initCards11
                   Monopoly.initCards5) -}
68d5eafef04eb4f63ae2ff93a5035616
  initCards5 :: [Monopoly.ChanceCard]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Monopoly.ChanceCard
                   Monopoly.initCards6
                   (GHC.Types.[] @ Monopoly.ChanceCard)) -}
4f6c2f626f5684521c4f51f90c10db85
  initCards6 :: Monopoly.ChanceCard
  {- Strictness: m,
     Unfolding: (Monopoly.ChanceCard
                   Monopoly.initCards10
                   Monopoly.initCards9
                   Monopoly.initCards7) -}
41bc4a0053675513d4a1c3345dc52cf2
  initCards7 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCStringUtf8#
                   Monopoly.initCards8) -}
2c9b6f46cc81726d55ba913460ee0a71
  initCards8 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("\\208\\150\\208\\184\\208\\178\\208\\184\\209\\130\\208\\181 \\209\\129\\208\\191\\208\\190\\208\\186\\208\\190\\208\\185\\208\\189\\208\\190!"#) -}
941f7910bf709bbbeb1ea673c77a8234
  initCards9 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
d3082f7a4fa566dc4d235c241332eaf4
  initGame :: Monopoly.GameState
  {- Strictness: m,
     Unfolding: (Monopoly.GameState
                   Monopoly.initGame213
                   Monopoly.doStep3
                   (GHC.Base.Nothing @ GHC.Types.Int)
                   Monopoly.initGame212
                   Monopoly.initGame1
                   Monopoly.handleGame3) -}
318082e3f36a3f4649672228e246ff34
  initGame1 :: [Monopoly.Street]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Monopoly.Street
                   Monopoly.initGame205
                   Monopoly.initGame2) -}
e858ad0c5b94394a6800fd723cfcd09f
  initGame10 :: [Monopoly.Street]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Monopoly.Street
                   Monopoly.initGame171
                   Monopoly.initGame11) -}
1486d89abafb629db7672cce5bcb7d96
  initGame100 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCStringUtf8#
                   Monopoly.initGame101) -}
bc62945fa6898419a5acc620b0876433
  initGame101 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("\\208\\144\\208\\161\\208\\146\\208\\154 \\208\\155\\208\\146\\208\\154"#) -}
7756d45d1f20413ae49363eef9956062
  initGame102 :: Monopoly.Street
  {- Strictness: m,
     Unfolding: (Monopoly.Street
                   Monopoly.initGame103
                   Monopoly.initGame99
                   GHC.Types.False
                   Monopoly.initCards9
                   Monopoly.initCards9) -}
150fd1070a73200d9e16372bc22e5f9f
  initGame103 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCStringUtf8#
                   Monopoly.initGame104) -}
3ec258dc184e2bec3510e581e993b547
  initGame104 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("\\208\\144\\208\\161\\208\\146\\208\\154 \\208\\155\\208\\145\\208\\152\\208\\161"#) -}
51883a47f622ae98d84df69802af7f05
  initGame105 :: Monopoly.Street
  {- Strictness: m,
     Unfolding: (Monopoly.Street
                   Monopoly.initGame106
                   Monopoly.makeStepFeatures1
                   GHC.Types.False
                   Monopoly.initCards9
                   Monopoly.initCards9) -}
e1e7898293221a300523ff7fb21cc2ce
  initGame106 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCStringUtf8#
                   Monopoly.initGame107) -}
5bddc8ed7406d7d49077067ece48f9a6
  initGame107 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("\\208\\156\\208\\176\\209\\136\\208\\183\\208\\176\\208\\187 3"#) -}
2ff828e1332c621938fb926d61a26feb
  initGame108 :: Monopoly.Street
  {- Strictness: m,
     Unfolding: (Monopoly.Street
                   Monopoly.initGame110
                   Monopoly.initGame109
                   GHC.Types.False
                   Monopoly.initCards9
                   Monopoly.initCards9) -}
9743de3e65cc959f1de0d01e7fce1973
  initGame109 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 240#) -}
385767ac10a4b5af832a1496f352d4df
  initGame11 :: [Monopoly.Street]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Monopoly.Street
                   Monopoly.initGame164
                   Monopoly.initGame12) -}
301a83ee66ed9bdc01bd33986ad037be
  initGame110 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCStringUtf8#
                   Monopoly.initGame111) -}
9b50e381a2a348d3d6b7bd3d8e42673b
  initGame111 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("\\208\\156\\208\\144\\208\\162\\208\\161\\208\\162\\208\\144\\208\\162 \\208\\156\\208\\158\\208\\162\\208\\146\\208\\171"#) -}
1ef8a422169313d447871496d94dc19c
  initGame112 :: Monopoly.Street
  {- Strictness: m,
     Unfolding: (Monopoly.Street
                   Monopoly.initGame114
                   Monopoly.initGame113
                   GHC.Types.False
                   Monopoly.initCards9
                   Monopoly.initCards9) -}
a28d3d3c24002dcc69a97af8e27a17af
  initGame113 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 220#) -}
1b6f047fe5db80e88c75b204afa64eda
  initGame114 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCStringUtf8#
                   Monopoly.initGame115) -}
514f578aa9f7295939087862070edf59
  initGame115 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("\\208\\156\\208\\144\\208\\162\\208\\161\\208\\162\\208\\144\\208\\162 \\208\\148\\208\\147\\208\\156\\208\\161"#) -}
e96856707657bc9816408f7eb8dda3bd
  initGame116 :: Monopoly.Street
  {- Strictness: m,
     Unfolding: (Monopoly.Street
                   Monopoly.initGame60
                   Monopoly.initGame120
                   Monopoly.initGame119
                   Monopoly.initGame118
                   Monopoly.initGame117) -}
6f993c1830e39bf23e54b06b86c582fc
  initGame117 :: GHC.Types.Int
  {- Strictness: x -}
dd90afafbd3d601e394801fbca3890fa
  initGame118 :: GHC.Types.Int
  {- Strictness: x -}
60c7fc6929e39c2c86048c6719f501ac
  initGame119 :: GHC.Types.Bool
  {- Strictness: x -}
1789da1be29cc1839f1f98218e0ffa4a
  initGame12 :: [Monopoly.Street]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Monopoly.Street
                   Monopoly.initGame161
                   Monopoly.initGame13) -}
29bdd87f9480a488993680612e4b6d5c
  initGame120 :: GHC.Types.Int
  {- Strictness: x -}
67860d075957a1f86ce9997d5d20e38a
  initGame121 :: Monopoly.Street
  {- Strictness: m,
     Unfolding: (Monopoly.Street
                   Monopoly.initGame122
                   Monopoly.initGame113
                   GHC.Types.False
                   Monopoly.initCards9
                   Monopoly.initCards9) -}
8fffc15b5b88f7805fea4e082e4d00b4
  initGame122 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCStringUtf8#
                   Monopoly.initGame123) -}
fa011df3e5fdf7c8efb70f280e5341ea
  initGame123 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("\\208\\156\\208\\144\\208\\162\\208\\161\\208\\162\\208\\144\\208\\162 \\208\\162\\208\\181\\208\\190\\209\\128\\208\\184\\209\\143 \\209\\128\\208\\184\\209\\129\\208\\186\\208\\190\\208\\178"#) -}
905d4adb83dcd984b1a1300346a7712b
  initGame124 :: Monopoly.Street
  {- Strictness: m,
     Unfolding: (Monopoly.Street
                   Monopoly.initGame129
                   Monopoly.initGame128
                   Monopoly.initGame127
                   Monopoly.initGame126
                   Monopoly.initGame125) -}
b1a25aa3f992ccad46e171805439abd0
  initGame125 :: GHC.Types.Int
  {- Strictness: x -}
b2bd02c73c92796f0060c0e5602083c4
  initGame126 :: GHC.Types.Int
  {- Strictness: x -}
625f85b3c4874b4c43e1cb9a1c9d6a23
  initGame127 :: GHC.Types.Bool
  {- Strictness: x -}
9f5f5e06bddad48b963930fef8b15aa1
  initGame128 :: GHC.Types.Int
  {- Strictness: x -}
f0f9399195eb572107aaf65e2e06b2df
  initGame129 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCStringUtf8#
                   Monopoly.initGame130) -}
11a018a8858cfa12894315a4a7cfa8c2
  initGame13 :: [Monopoly.Street]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Monopoly.Street
                   Monopoly.initGame158
                   Monopoly.initGame14) -}
d96d257c37f5f0ad9b25442f10580b1f
  initGame130 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("\\208\\145\\208\\181\\209\\129\\208\\191\\208\\187\\208\\176\\209\\130\\208\\189\\208\\176\\209\\143 \\208\\186\\209\\131\\209\\128\\208\\184\\208\\187\\208\\186\\208\\176"#) -}
1e28e00e24464d280cddff1874e7428d
  initGame131 :: Monopoly.Street
  {- Strictness: m,
     Unfolding: (Monopoly.Street
                   Monopoly.initGame132
                   Monopoly.makeStepFeatures1
                   GHC.Types.False
                   Monopoly.initCards9
                   Monopoly.initCards9) -}
d26b7bfd7fd21df71f3585e64043c3ab
  initGame132 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCStringUtf8#
                   Monopoly.initGame133) -}
c073bf6bb3d06fc696340eb778d0427d
  initGame133 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("\\208\\152\\208\\158 \\208\\148\\208\\181\\208\\189\\208\\184\\209\\129\\208\\190\\208\\178"#) -}
d583ef562a384f218f33800b8a0c1778
  initGame134 :: Monopoly.Street
  {- Strictness: m,
     Unfolding: (Monopoly.Street
                   Monopoly.initGame136
                   Monopoly.initGame135
                   GHC.Types.False
                   Monopoly.initCards9
                   Monopoly.initCards9) -}
508d5f17b1ee3e15f8692b3a4f9a9f6c
  initGame135 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 180#) -}
ca443cd101b50cf8cd5e21f7dd7d0e6e
  initGame136 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCStringUtf8#
                   Monopoly.initGame137) -}
0306fb6d932c4412f4877df5858935da
  initGame137 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("\\208\\152\\208\\158 \\208\\157\\208\\190\\208\\178\\208\\184\\208\\186\\208\\190\\208\\178\\208\\176"#) -}
b36aa489fbfae6172b4de1ee2653d6a3
  initGame138 :: Monopoly.Street
  {- Strictness: m,
     Unfolding: (Monopoly.Street
                   Monopoly.initGame142
                   Monopoly.initGame141
                   GHC.Types.False
                   Monopoly.initGame140
                   Monopoly.initGame139) -}
776663a4bfe7f45840edc1e4930d5242
  initGame139 :: GHC.Types.Int
  {- Strictness: x -}
cbc6afee5607e54363de2fe0f0f24c14
  initGame14 :: [Monopoly.Street]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Monopoly.Street
                   Monopoly.initGame154
                   Monopoly.initGame15) -}
bd514a06ebb1fbe3e9d7b0f93ef124c5
  initGame140 :: GHC.Types.Int
  {- Strictness: x -}
cd0b4fe7617db8aa53680671e94035c2
  initGame141 :: GHC.Types.Int
  {- Strictness: x -}
013aa6ddb5f83945028f19919aa24519
  initGame142 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCStringUtf8#
                   Monopoly.initGame143) -}
ad8f42668d9fa96ee100bd336cbc9af3
  initGame143 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("\\208\\158\\208\\177\\209\\137\\208\\181\\209\\129\\209\\130\\208\\178\\208\\181\\208\\189\\208\\189\\208\\176\\209\\143 \\208\\186\\208\\176\\208\\183\\208\\189\\208\\176"#) -}
1242f2d021db391f539d415bbd4e5bd1
  initGame144 :: Monopoly.Street
  {- Strictness: m,
     Unfolding: (Monopoly.Street
                   Monopoly.initGame145
                   Monopoly.initGame135
                   GHC.Types.False
                   Monopoly.initCards9
                   Monopoly.initCards9) -}
4785016e1d7bb3b1701355f9f14690c7
  initGame145 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCStringUtf8#
                   Monopoly.initGame146) -}
8f8f5a4554d514a2ad39f65dbbae00ba
  initGame146 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("\\208\\152\\208\\158 \\208\\156\\208\\190\\209\\128\\208\\190\\208\\183\\208\\190\\208\\178"#) -}
ece6ff3766938eba27cb159f70ba6f4f
  initGame147 :: Monopoly.Street
  {- Strictness: m,
     Unfolding: (Monopoly.Street
                   Monopoly.initGame148
                   Monopoly.makeStepFeatures1
                   GHC.Types.False
                   Monopoly.initCards9
                   Monopoly.initCards9) -}
e7ba78d7f3eadb0b918415805d24d7ad
  initGame148 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCStringUtf8#
                   Monopoly.initGame149) -}
68994e4ec5612281c0a0121c8d07caef
  initGame149 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("\\208\\156\\208\\176\\209\\136\\208\\183\\208\\176\\208\\187 2"#) -}
55997bb9e577cba9db9ca4c9c53e5495
  initGame15 :: [Monopoly.Street]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Monopoly.Street
                   Monopoly.initGame150
                   Monopoly.initGame16) -}
675a141046976ac4747b7701ed26a3fd
  initGame150 :: Monopoly.Street
  {- Strictness: m,
     Unfolding: (Monopoly.Street
                   Monopoly.initGame152
                   Monopoly.initGame151
                   GHC.Types.False
                   Monopoly.initCards9
                   Monopoly.initCards9) -}
c1874261c28a8fc0bdd30798d200947d
  initGame151 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 160#) -}
91904b9db973668f5cb28584949a33f0
  initGame152 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCStringUtf8#
                   Monopoly.initGame153) -}
c8058c89fd2806a15281ddd747af7cba
  initGame153 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("\\208\\156\\208\\176\\209\\130\\208\\186\\208\\184\\208\\177 \\208\\148\\208\\184\\209\\129\\208\\186\\209\\128\\208\\181\\209\\130\\208\\189\\209\\139\\208\\185 \\208\\176\\208\\189\\208\\176\\208\\187\\208\\184\\208\\183"#) -}
4ad1338d69a93e1ca39df77d84e30624
  initGame154 :: Monopoly.Street
  {- Strictness: m,
     Unfolding: (Monopoly.Street
                   Monopoly.initGame156
                   Monopoly.initGame155
                   GHC.Types.False
                   Monopoly.initCards9
                   Monopoly.initCards9) -}
c93719a9f27b397c7f1b5e476368987c
  initGame155 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 140#) -}
3721b8b312c88e65431c73d548392b88
  initGame156 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCStringUtf8#
                   Monopoly.initGame157) -}
26c54cc37017a2bc1d7eb334444e166a
  initGame157 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("\\208\\156\\208\\176\\209\\130\\208\\154\\208\\184\\208\\177 \\208\\148\\208\\164\\208\\161\\208\\144"#) -}
47383cb7b4b59f60e9693347e0853995
  initGame158 :: Monopoly.Street
  {- Strictness: m,
     Unfolding: (Monopoly.Street
                   Monopoly.initGame159
                   Monopoly.initGame95
                   GHC.Types.False
                   Monopoly.initCards9
                   Monopoly.initCards9) -}
f01c4e66f34ba468febda496e451ffd3
  initGame159 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCStringUtf8#
                   Monopoly.initGame160) -}
1d6780fee7631e5022ef70aa2e3e0a2e
  initGame16 :: [Monopoly.Street]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Monopoly.Street
                   Monopoly.initGame147
                   Monopoly.initGame17) -}
6eb10203fb9aa751909319a6e96554ef
  initGame160 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("\\208\\159\\208\\190\\209\\130\\208\\181\\209\\128\\209\\143\\209\\136\\208\\186\\208\\184"#) -}
3c6de2ae22eaa3232ad22875e63c2edd
  initGame161 :: Monopoly.Street
  {- Strictness: m,
     Unfolding: (Monopoly.Street
                   Monopoly.initGame162
                   Monopoly.initGame155
                   GHC.Types.False
                   Monopoly.initCards9
                   Monopoly.initCards9) -}
98e75af71842dbdebe39f87a5cb4dbdc
  initGame162 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCStringUtf8#
                   Monopoly.initGame163) -}
56ab403e7c2b4530c777e8657d1119e2
  initGame163 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("\\208\\156\\208\\176\\209\\130\\208\\154\\208\\184\\208\\177 \\208\\148\\208\\156\\208\\156\\208\\154"#) -}
f72c7854fd40b70446533a4f6089f9e3
  initGame164 :: Monopoly.Street
  {- Strictness: m,
     Unfolding: (Monopoly.Street
                   Monopoly.initGame169
                   Monopoly.initGame168
                   Monopoly.initGame167
                   Monopoly.initGame166
                   Monopoly.initGame165) -}
ec5ed9b4be6b695e1e1d9c2ec78ab8cd
  initGame165 :: GHC.Types.Int
  {- Strictness: x -}
b5b07f225ec8ae980555e4ed3020ad56
  initGame166 :: GHC.Types.Int
  {- Strictness: x -}
c1484f772cec59ba3a8d27a22461762d
  initGame167 :: GHC.Types.Bool
  {- Strictness: x -}
609d9a79dc954dd8dc9cf29828c86951
  initGame168 :: GHC.Types.Int
  {- Strictness: x -}
e04cd858ecf3ac741368c3b4f365159c
  initGame169 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCStringUtf8#
                   Monopoly.initGame170) -}
144db85a1ebb20744899e1d929198c03
  initGame17 :: [Monopoly.Street]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Monopoly.Street
                   Monopoly.initGame144
                   Monopoly.initGame18) -}
01964f0602cd96b9fbea3ba59e3df849
  initGame170 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("\\208\\144\\208\\186\\208\\176\\208\\180\\208\\181\\208\\188"#) -}
085aa0248021f18e79f917ac671bb283
  initGame171 :: Monopoly.Street
  {- Strictness: m,
     Unfolding: (Monopoly.Street
                   Monopoly.initGame173
                   Monopoly.initGame172
                   GHC.Types.False
                   Monopoly.initCards9
                   Monopoly.initCards9) -}
d3fa1492dbf0ed13ff501e2e561ca9ec
  initGame172 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 120#) -}
6354387650738a437b160701f34aed7a
  initGame173 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCStringUtf8#
                   Monopoly.initGame174) -}
3488b17e6fef1124650db2e258812fd4
  initGame174 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("\\208\\161\\208\\159 \\208\\154\\208\\190\\209\\128\\209\\128\\208\\181\\208\\186\\209\\130\\208\\189\\208\\190\\209\\129\\209\\130\\209\\140 \\208\\191\\209\\128\\208\\190\\208\\179\\209\\128\\208\\176\\208\\188\\208\\188"#) -}
bd763c8079c27b711ffd825190e00b1a
  initGame175 :: Monopoly.Street
  {- Strictness: m,
     Unfolding: (Monopoly.Street
                   Monopoly.initGame176
                   Monopoly.makeStepFeatures2
                   GHC.Types.False
                   Monopoly.initCards9
                   Monopoly.initCards9) -}
ecb59050548024a3bf5fd5a23c289a2d
  initGame176 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCStringUtf8#
                   Monopoly.initGame177) -}
a597303c88850da3948a1316b0b52768
  initGame177 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("\\208\\161\\208\\159 \\208\\163\\208\\148\\208\\152\\208\\161"#) -}
1ac176004a153f6c8da306c29900daa0
  initGame178 :: Monopoly.Street
  {- Strictness: m,
     Unfolding: (Monopoly.Street
                   Monopoly.initGame60
                   Monopoly.initGame182
                   Monopoly.initGame181
                   Monopoly.initGame180
                   Monopoly.initGame179) -}
71dcbc9d866fddbfdbef9dcef0379e94
  initGame179 :: GHC.Types.Int
  {- Strictness: x -}
ac870f3c0fd7656982f911797befefe4
  initGame18 :: [Monopoly.Street]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Monopoly.Street
                   Monopoly.initGame138
                   Monopoly.initGame19) -}
77bdc44207b41a14970b9f61feb9cf7f
  initGame180 :: GHC.Types.Int
  {- Strictness: x -}
3257cc3c805913018c50e1a92a66c22d
  initGame181 :: GHC.Types.Bool
  {- Strictness: x -}
1d63c9e8e250f98a20e7fb49faf41d20
  initGame182 :: GHC.Types.Int
  {- Strictness: x -}
f79730cdfe61fddf8a8d056fd6b9cd2c
  initGame183 :: Monopoly.Street
  {- Strictness: m,
     Unfolding: (Monopoly.Street
                   Monopoly.initGame184
                   Monopoly.makeStepFeatures2
                   GHC.Types.False
                   Monopoly.initCards9
                   Monopoly.initCards9) -}
7e607007aa7b599ef83796f4041242bf
  initGame184 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCStringUtf8#
                   Monopoly.initGame185) -}
c2a6912a978774d4dd3d40703c4f3759
  initGame185 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("\\208\\161\\208\\159 \\208\\159\\208\\166\\208\\148"#) -}
982d64d54452035cc8d1eb997087fa69
  initGame186 :: Monopoly.Street
  {- Strictness: m,
     Unfolding: (Monopoly.Street
                   Monopoly.initGame187
                   Monopoly.makeStepFeatures1
                   GHC.Types.False
                   Monopoly.initCards9
                   Monopoly.initCards9) -}
b190e4bfea1e045168b0faa15d4c16e9
  initGame187 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCStringUtf8#
                   Monopoly.initGame188) -}
2f86a8558f00d14b63165d4728e154df
  initGame188 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("\\208\\156\\208\\176\\209\\136\\208\\183\\208\\176\\208\\187 1"#) -}
82ca4c68e5aa252f099502993ab24df3
  initGame189 :: Monopoly.Street
  {- Strictness: m,
     Unfolding: (Monopoly.Street
                   Monopoly.initGame192
                   Monopoly.makeStepFeatures1
                   Monopoly.initGame191
                   Monopoly.initCards9
                   Monopoly.initGame190) -}
ed9e880398e2dc80069565710c7caf9c
  initGame19 :: [Monopoly.Street]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Monopoly.Street
                   Monopoly.initGame134
                   Monopoly.initGame20) -}
15f141f7beb094d96a64b610d0f809a0
  initGame190 :: GHC.Types.Int
  {- Strictness: x -}
8948fca527639c650ed7224ee8a5f70c
  initGame191 :: GHC.Types.Bool
  {- Strictness: x -}
b2fd6af8aa7ea809127d7928817c7d4c
  initGame192 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCStringUtf8#
                   Monopoly.initGame193) -}
1fb13734c9010eee8c867a147a55956e
  initGame193 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("\\208\\157\\208\\176\\208\\187\\208\\190\\208\\179"#) -}
2d5eb0b7fdaf5e0d6ff58d9554bc450e
  initGame194 :: Monopoly.Street
  {- Strictness: m,
     Unfolding: (Monopoly.Street
                   Monopoly.initGame196
                   Monopoly.initGame195
                   GHC.Types.False
                   Monopoly.initCards9
                   Monopoly.initCards9) -}
ceb838341d53de1ba84f4da519633c28
  initGame195 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 60#) -}
defecaa2f48a22032b83f64e74f47e5b
  initGame196 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCStringUtf8#
                   Monopoly.initGame197) -}
c7b013159da8080cae5d24166bd5cecf
  initGame197 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("\\208\\161\\208\\154\\208\\152 \\208\\159\\208\\176\\209\\128\\208\\176\\208\\187\\208\\187\\208\\181\\208\\187\\209\\140\\208\\189\\209\\139\\208\\181 \\208\\178\\209\\139\\209\\135\\208\\184\\209\\129\\208\\187\\208\\181\\208\\189\\208\\184\\209\\143"#) -}
9aba4493761edebc79c086c42684c6b1
  initGame198 :: Monopoly.Street
  {- Strictness: m,
     Unfolding: (Monopoly.Street
                   Monopoly.initGame142
                   Monopoly.initGame201
                   GHC.Types.False
                   Monopoly.initGame200
                   Monopoly.initGame199) -}
0a0bcbcb4ace9da7ae5670eb86a4a327
  initGame199 :: GHC.Types.Int
  {- Strictness: x -}
3954f8674416907b19df7c1a9061cd54
  initGame2 :: [Monopoly.Street]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Monopoly.Street
                   Monopoly.initGame202
                   Monopoly.initGame3) -}
605361d3e97eb02a3ba4fdb5b40af66d
  initGame20 :: [Monopoly.Street]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Monopoly.Street
                   Monopoly.initGame131
                   Monopoly.initGame21) -}
da8b3e5debc00c0f0140f94d00de055b
  initGame200 :: GHC.Types.Int
  {- Strictness: x -}
bb9ce4603e99b3cc08551d4a23808193
  initGame201 :: GHC.Types.Int
  {- Strictness: x -}
9f4426872b57bbba571cbcb6f26b5c81
  initGame202 :: Monopoly.Street
  {- Strictness: m,
     Unfolding: (Monopoly.Street
                   Monopoly.initGame203
                   Monopoly.initGame195
                   GHC.Types.False
                   Monopoly.initCards9
                   Monopoly.initCards9) -}
60895bf44bc0e4d8f63dae2881c7f202
  initGame203 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCStringUtf8#
                   Monopoly.initGame204) -}
8bc0a2649ffe4aff846d6d04f6297449
  initGame204 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("\\208\\161\\208\\154\\208\\152 \\208\\154\\208\\178\\208\\176\\208\\189\\209\\130\\208\\190\\208\\178\\208\\176\\209\\143 \\208\\184\\208\\189\\209\\132\\208\\190\\209\\128\\208\\188\\208\\176\\209\\130\\208\\184\\208\\186\\208\\176"#) -}
d7320e93cb5bd071bf3eb44a4964adce
  initGame205 :: Monopoly.Street
  {- Strictness: m,
     Unfolding: (Monopoly.Street
                   Monopoly.initGame210
                   Monopoly.initGame209
                   Monopoly.initGame208
                   Monopoly.initGame207
                   Monopoly.initGame206) -}
c364ecd1b31fc78ac0b51c670c8cbdb5
  initGame206 :: GHC.Types.Int
  {- Strictness: x -}
1be294bbc72fbe13eef1bc72c322bd47
  initGame207 :: GHC.Types.Int
  {- Strictness: x -}
8d45fcc6ed2494433b00e8b0935f806c
  initGame208 :: GHC.Types.Bool
  {- Strictness: x -}
263b43fce7c51831da71e3c7332d9d88
  initGame209 :: GHC.Types.Int
  {- Strictness: x -}
0075e8599fae43eb41923fc989097cce
  initGame21 :: [Monopoly.Street]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Monopoly.Street
                   Monopoly.initGame124
                   Monopoly.initGame22) -}
4652a4459eea3fbb484e6821eba14cac
  initGame210 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCStringUtf8#
                   Monopoly.initGame211) -}
801f92bb0b9cb73331dd67d89c50fb06
  initGame211 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("\\208\\161\\209\\130\\208\\176\\209\\128\\209\\130"#) -}
db89ae3d89d34a638b14772b9888ddb2
  initGame212 :: Monopoly.Cubes
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (Monopoly.Cubes Monopoly.doStep3 Monopoly.initCards9) -}
a56b457f717e3f1e0cc56093c84afaac
  initGame213 :: [Monopoly.Player]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Monopoly.Player
                   Monopoly.initGame224
                   Monopoly.initGame214) -}
038d8e857d456a23387bcde567ab46ae
  initGame214 :: [Monopoly.Player]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Monopoly.Player
                   Monopoly.initGame222
                   Monopoly.initGame215) -}
d02a54a94ed9204ca7c232fa6163bd32
  initGame215 :: [Monopoly.Player]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Monopoly.Player
                   Monopoly.initGame220
                   Monopoly.initGame216) -}
0633a683e85b36ecdce602d9c945464f
  initGame216 :: [Monopoly.Player]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Monopoly.Player
                   Monopoly.initGame217
                   (GHC.Types.[] @ Monopoly.Player)) -}
89e8a9387e87b2abcd2cdff5b3216ca6
  initGame217 :: Monopoly.Player
  {- Strictness: m,
     Unfolding: (Monopoly.Player
                   Monopoly.initCards10
                   Monopoly.initGame219
                   (GHC.Types.[] @ Monopoly.Street)
                   Monopoly.doStep3
                   Monopoly.initGame218) -}
25ea4524ddcb3b2889ff52a5774f6ce3
  initGame218 :: Graphics.Gloss.Internals.Data.Picture.Point
  {- Unfolding: (case Monopoly.$wgetPlayerPosition
                        Monopoly.initCards10
                        1# of ww { (#,#) ww1 ww2 ->
                 (ww1, ww2) }) -}
7400db411c5c335ad48339b8a4629576
  initGame219 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 15000#) -}
1c203c545b8a1b8efaa8406e81f9e133
  initGame22 :: [Monopoly.Street]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Monopoly.Street
                   Monopoly.initGame121
                   Monopoly.initGame23) -}
aa1387b94f133268e76d76f9a606adf7
  initGame220 :: Monopoly.Player
  {- Strictness: m,
     Unfolding: (Monopoly.Player
                   Monopoly.initCards15
                   Monopoly.initGame219
                   (GHC.Types.[] @ Monopoly.Street)
                   Monopoly.doStep3
                   Monopoly.initGame221) -}
a62f19d8d9746d524baa86264344fb93
  initGame221 :: Graphics.Gloss.Internals.Data.Picture.Point
  {- Unfolding: (case Monopoly.$wgetPlayerPosition
                        Monopoly.initCards15
                        1# of ww { (#,#) ww1 ww2 ->
                 (ww1, ww2) }) -}
55eba1f12ffbcd8b201b8410563a642d
  initGame222 :: Monopoly.Player
  {- Strictness: m,
     Unfolding: (Monopoly.Player
                   Monopoly.doStep2
                   Monopoly.initGame219
                   (GHC.Types.[] @ Monopoly.Street)
                   Monopoly.doStep3
                   Monopoly.initGame223) -}
e79ef2f0c43be889a02d1881eee9e456
  initGame223 :: Graphics.Gloss.Internals.Data.Picture.Point
  {- Unfolding: (case Monopoly.$wgetPlayerPosition
                        Monopoly.doStep2
                        1# of ww { (#,#) ww1 ww2 ->
                 (ww1, ww2) }) -}
4988b872f5cf6b3b158acc58094a3398
  initGame224 :: Monopoly.Player
  {- Strictness: m,
     Unfolding: (Monopoly.Player
                   Monopoly.doStep3
                   Monopoly.initGame219
                   (GHC.Types.[] @ Monopoly.Street)
                   Monopoly.doStep3
                   Monopoly.initGame225) -}
33e74cd5e1381a156b7bc807011b4ce0
  initGame225 :: Graphics.Gloss.Internals.Data.Picture.Point
  {- Unfolding: (case Monopoly.$wgetPlayerPosition
                        Monopoly.doStep3
                        1# of ww { (#,#) ww1 ww2 ->
                 (ww1, ww2) }) -}
916a91ea3be30454ede76e72e87c0239
  initGame23 :: [Monopoly.Street]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Monopoly.Street
                   Monopoly.initGame116
                   Monopoly.initGame24) -}
581949ff4c82dfb62b036f1708a93aea
  initGame24 :: [Monopoly.Street]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Monopoly.Street
                   Monopoly.initGame112
                   Monopoly.initGame25) -}
95144ccaf99e29c282b18a325b536133
  initGame25 :: [Monopoly.Street]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Monopoly.Street
                   Monopoly.initGame108
                   Monopoly.initGame26) -}
ba7a8ea880f9135e78ee3131fc7c5ebd
  initGame26 :: [Monopoly.Street]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Monopoly.Street
                   Monopoly.initGame105
                   Monopoly.initGame27) -}
39de9fb0015385f524fcc8ff64095ba8
  initGame27 :: [Monopoly.Street]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Monopoly.Street
                   Monopoly.initGame102
                   Monopoly.initGame28) -}
f19b9ad11608579df95230e4be5199a7
  initGame28 :: [Monopoly.Street]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Monopoly.Street
                   Monopoly.initGame98
                   Monopoly.initGame29) -}
ffc678dace67c6163f7a13f96e93dc10
  initGame29 :: [Monopoly.Street]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Monopoly.Street
                   Monopoly.initGame94
                   Monopoly.initGame30) -}
46cb58790cb147443f7494917d607e1a
  initGame3 :: [Monopoly.Street]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Monopoly.Street
                   Monopoly.initGame198
                   Monopoly.initGame4) -}
4ea6fc1dcdad023edb48ff56902338b5
  initGame30 :: [Monopoly.Street]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Monopoly.Street
                   Monopoly.initGame90
                   Monopoly.initGame31) -}
34468c876ac9efe6584759b04bd0fa7f
  initGame31 :: [Monopoly.Street]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Monopoly.Street
                   Monopoly.initGame83
                   Monopoly.initGame32) -}
4fd9ae87fcd9594b57c2d8dd2e1f489a
  initGame32 :: [Monopoly.Street]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Monopoly.Street
                   Monopoly.initGame80
                   Monopoly.initGame33) -}
b8d6db9e8f6e3aa93e9d368b2a41246c
  initGame33 :: [Monopoly.Street]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Monopoly.Street
                   Monopoly.initGame76
                   Monopoly.initGame34) -}
2b255523bc12bf797c03d433a2df8985
  initGame34 :: [Monopoly.Street]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Monopoly.Street
                   Monopoly.initGame69
                   Monopoly.initGame35) -}
05ce4733a158d0c079e6fb384c6046b7
  initGame35 :: [Monopoly.Street]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Monopoly.Street
                   Monopoly.initGame65
                   Monopoly.initGame36) -}
be57c5020227cec36afdf0f650ddb280
  initGame36 :: [Monopoly.Street]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Monopoly.Street
                   Monopoly.initGame62
                   Monopoly.initGame37) -}
28d11f927019f514f37bdc55576c83a0
  initGame37 :: [Monopoly.Street]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Monopoly.Street
                   Monopoly.initGame55
                   Monopoly.initGame38) -}
d072c31cf321eba9d269f5b4c1f2d217
  initGame38 :: [Monopoly.Street]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Monopoly.Street
                   Monopoly.initGame51
                   Monopoly.initGame39) -}
ea6d2d4727777925b1b8379522ef58f6
  initGame39 :: [Monopoly.Street]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Monopoly.Street
                   Monopoly.initGame45
                   Monopoly.initGame40) -}
09bba693f92033b89aa9f50a238b2600
  initGame4 :: [Monopoly.Street]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Monopoly.Street
                   Monopoly.initGame194
                   Monopoly.initGame5) -}
a51626d218d94acdcbc88333e18f935a
  initGame40 :: [Monopoly.Street]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Monopoly.Street
                   Monopoly.initGame41
                   (GHC.Types.[] @ Monopoly.Street)) -}
7bd15f70be96291735f19614b6a6b2e3
  initGame41 :: Monopoly.Street
  {- Strictness: m,
     Unfolding: (Monopoly.Street
                   Monopoly.initGame43
                   Monopoly.initGame42
                   GHC.Types.False
                   Monopoly.initCards9
                   Monopoly.initCards9) -}
2aebb4927f2742b86ed15e2ee4242a19
  initGame42 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 400#) -}
31dcb23d1810b84ece26c3d7ce60a0e1
  initGame43 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCStringUtf8#
                   Monopoly.initGame44) -}
e944637825fc2f43cc3d462105292e8a
  initGame44 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("\\208\\156\\208\\156\\208\\159 \\208\\145\\208\\156\\208\\156\\208\\158"#) -}
84802f5c8ec74e4d4550eb2133e13f0d
  initGame45 :: Monopoly.Street
  {- Strictness: m,
     Unfolding: (Monopoly.Street
                   Monopoly.initGame49
                   Monopoly.makeStepFeatures2
                   Monopoly.initGame48
                   Monopoly.initGame47
                   Monopoly.initGame46) -}
070e87f621ec67d4a616de50dce76232
  initGame46 :: GHC.Types.Int
  {- Strictness: x -}
d622d7a32badfe31424f81c7325e0f58
  initGame47 :: GHC.Types.Int
  {- Strictness: x -}
ed3220b121b866d69391a0d432613291
  initGame48 :: GHC.Types.Bool
  {- Strictness: x -}
7f4622fbf710d21b0e319aa9f668d87c
  initGame49 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCStringUtf8#
                   Monopoly.initGame50) -}
05cfbf572bc5d42e33f57e6e3eabd8d2
  initGame5 :: [Monopoly.Street]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Monopoly.Street
                   Monopoly.initGame189
                   Monopoly.initGame6) -}
fcb5a5ddf3aacda56f0d2e4dd2d5669a
  initGame50 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("\\208\\161\\208\\178\\208\\181\\209\\128\\209\\133\\208\\189\\208\\176\\208\\187\\208\\190\\208\\179"#) -}
d091b9f7f4a2b5fc89e1c4d570b562b8
  initGame51 :: Monopoly.Street
  {- Strictness: m,
     Unfolding: (Monopoly.Street
                   Monopoly.initGame53
                   Monopoly.initGame52
                   GHC.Types.False
                   Monopoly.initCards9
                   Monopoly.initCards9) -}
232f150528e6c2f5b005ad4bcdaaada4
  initGame52 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 350#) -}
b1a1ce72b156b6d9c56fd65ea94df038
  initGame53 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCStringUtf8#
                   Monopoly.initGame54) -}
c96c053ba2722aee54b672fac2c0d5c0
  initGame54 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("\\208\\156\\208\\156\\208\\159 \\208\\156\\208\\144\\208\\162"#) -}
8669a39b7b464f0f34f37d7d1d8aa0e0
  initGame55 :: Monopoly.Street
  {- Strictness: m,
     Unfolding: (Monopoly.Street
                   Monopoly.initGame60
                   Monopoly.initGame59
                   Monopoly.initGame58
                   Monopoly.initGame57
                   Monopoly.initGame56) -}
79f26ee1c6a9207a5f01f4fcb49c1659
  initGame56 :: GHC.Types.Int
  {- Strictness: x -}
10fa8ae55d7c24a94a8bc903d2118ee0
  initGame57 :: GHC.Types.Int
  {- Strictness: x -}
af87d30f12c95c826764775b59e7ab69
  initGame58 :: GHC.Types.Bool
  {- Strictness: x -}
9a67f0262bb7de88fe0f11f5dc357eec
  initGame59 :: GHC.Types.Int
  {- Strictness: x -}
9c6aea9345440552504791bc76a1ec3f
  initGame6 :: [Monopoly.Street]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Monopoly.Street
                   Monopoly.initGame186
                   Monopoly.initGame7) -}
6597836b68a4ed10d8d3c0720cd8a0fc
  initGame60 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCStringUtf8#
                   Monopoly.initGame61) -}
a11339bdcd97bc28eb6b7a37d5064a98
  initGame61 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("\\208\\168\\208\\176\\208\\189\\209\\129"#) -}
88a66617c84373af503e0d202750b275
  initGame62 :: Monopoly.Street
  {- Strictness: m,
     Unfolding: (Monopoly.Street
                   Monopoly.initGame63
                   Monopoly.makeStepFeatures1
                   GHC.Types.False
                   Monopoly.initCards9
                   Monopoly.initCards9) -}
6c7bd91b7b8d5590fb804083a68a8981
  initGame63 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCStringUtf8#
                   Monopoly.initGame64) -}
01e3c0f8641656a82e4bd98acbb9848f
  initGame64 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("\\208\\156\\208\\176\\209\\136\\208\\183\\208\\176\\208\\187 4"#) -}
cdb1e71bb1b7edf8439ab9beec5cb209
  initGame65 :: Monopoly.Street
  {- Strictness: m,
     Unfolding: (Monopoly.Street
                   Monopoly.initGame67
                   Monopoly.initGame66
                   GHC.Types.False
                   Monopoly.initCards9
                   Monopoly.initCards9) -}
b5a5e9315b8f364a510a637bfd9cb2d3
  initGame66 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 320#) -}
91e84fc11f941efe42b12173d0a4ffed
  initGame67 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCStringUtf8#
                   Monopoly.initGame68) -}
c9e3d356db5fb86844370278221f29a8
  initGame68 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("\\208\\144\\208\\175 \\208\\152\\209\\129\\208\\186\\209\\131\\209\\129\\209\\129\\209\\130\\208\\178\\208\\181\\208\\189\\208\\189\\209\\139\\208\\185 \\208\\184\\208\\189\\209\\130\\208\\181\\208\\187\\208\\187\\208\\181\\208\\186\\209\\130"#) -}
0c062cda735a6cac5c56a2e819b68e2b
  initGame69 :: Monopoly.Street
  {- Strictness: m,
     Unfolding: (Monopoly.Street
                   Monopoly.initGame74
                   Monopoly.initGame73
                   Monopoly.initGame72
                   Monopoly.initGame71
                   Monopoly.initGame70) -}
f4d7f05e729c752415df2fc5497a0e38
  initGame7 :: [Monopoly.Street]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Monopoly.Street
                   Monopoly.initGame183
                   Monopoly.initGame8) -}
89027e6f5d5a248eb29d8ae152b9d02c
  initGame70 :: GHC.Types.Int
  {- Strictness: x -}
158a034eab5ecc11908c319122225543
  initGame71 :: GHC.Types.Int
  {- Strictness: x -}
1e5e15f76c2471077bf0c6b492c5cf85
  initGame72 :: GHC.Types.Bool
  {- Strictness: x -}
b7d91e2a5447b073e47f502c4d710d41
  initGame73 :: GHC.Types.Int
  {- Strictness: x -}
118fc16b540e509e2ac3e899f342f913
  initGame74 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCStringUtf8#
                   Monopoly.initGame75) -}
c06f3c9e68fef0a0eac3f98735aff8f5
  initGame75 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("\\208\\158\\208\\177\\209\\137\\208\\181\\209\\129\\209\\130\\208\\178\\208\\181\\208\\189\\208\\176\\209\\143 \\208\\186\\208\\176\\208\\183\\208\\189\\208\\176"#) -}
ced5672733ed31e018ad6ca7b46dcc49
  initGame76 :: Monopoly.Street
  {- Strictness: m,
     Unfolding: (Monopoly.Street
                   Monopoly.initGame78
                   Monopoly.initGame77
                   GHC.Types.False
                   Monopoly.initCards9
                   Monopoly.initCards9) -}
8723dbcddee227fbceeeffa17f2c4363
  initGame77 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 300#) -}
e397bf743cf39cbc007420548efcd9bf
  initGame78 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCStringUtf8#
                   Monopoly.initGame79) -}
d2743b460c513c67d2e307c1335e63ba
  initGame79 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("\\208\\144\\208\\175 \\208\\154\\208\\190\\208\\188\\208\\191\\209\\140\\209\\142\\209\\130\\208\\181\\209\\128\\208\\189\\208\\176\\209\\143 \\208\\187\\208\\184\\208\\189\\208\\179\\208\\178\\208\\184\\209\\129\\209\\130\\208\\184\\208\\186\\208\\176"#) -}
f32d6e724939514acf638322bef39842
  initGame8 :: [Monopoly.Street]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Monopoly.Street
                   Monopoly.initGame178
                   Monopoly.initGame9) -}
77484580a735d27c7da44e7e21be05bd
  initGame80 :: Monopoly.Street
  {- Strictness: m,
     Unfolding: (Monopoly.Street
                   Monopoly.initGame81
                   Monopoly.initGame77
                   GHC.Types.False
                   Monopoly.initCards9
                   Monopoly.initCards9) -}
9891e84e1afb611602b8515af9759d01
  initGame81 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCStringUtf8#
                   Monopoly.initGame82) -}
64851c6c079b588e98340cdde7a9c23c
  initGame82 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("\\208\\144\\208\\175 \\208\\159\\208\\176\\209\\128\\208\\176\\208\\180\\208\\184\\208\\179\\208\\188\\209\\139 \\208\\191\\209\\128\\208\\190\\208\\179\\209\\128\\208\\176\\208\\188\\208\\188\\208\\184\\209\\128\\208\\190\\208\\178\\208\\176\\208\\189\\208\\184\\209\\143"#) -}
da8cec4ab0358f28ffe57f7fc3bec0af
  initGame83 :: Monopoly.Street
  {- Strictness: m,
     Unfolding: (Monopoly.Street
                   Monopoly.initGame88
                   Monopoly.initGame87
                   Monopoly.initGame86
                   Monopoly.initGame85
                   Monopoly.initGame84) -}
1e33b54118894a2032403083f3d2758e
  initGame84 :: GHC.Types.Int
  {- Strictness: x -}
c1a15d1024cd0c73be4149f8b8e40afe
  initGame85 :: GHC.Types.Int
  {- Strictness: x -}
9322e8cae60b15a4056ce1a8b3c53c66
  initGame86 :: GHC.Types.Bool
  {- Strictness: x -}
665c2cf1a920b9d0d9592e6f17839be4
  initGame87 :: GHC.Types.Int
  {- Strictness: x -}
ecf64cdf1cc91d1a9987c878d95b01a3
  initGame88 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCStringUtf8#
                   Monopoly.initGame89) -}
02b2078fae59fb67fb6a5036db489fd0
  initGame89 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("\\208\\158\\209\\130\\208\\191\\209\\128\\208\\176\\208\\178\\208\\187\\209\\143\\208\\185\\209\\129\\209\\143 \\208\\178 \\208\\176\\208\\186\\208\\176\\208\\180\\208\\181\\208\\188"#) -}
9c974a7f1e6c786b59531d922cc87cbe
  initGame9 :: [Monopoly.Street]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Monopoly.Street
                   Monopoly.initGame175
                   Monopoly.initGame10) -}
cbba17f353f623552b409aaacb999805
  initGame90 :: Monopoly.Street
  {- Strictness: m,
     Unfolding: (Monopoly.Street
                   Monopoly.initGame92
                   Monopoly.initGame91
                   GHC.Types.False
                   Monopoly.initCards9
                   Monopoly.initCards9) -}
253eb4b016cbe02941b3bb265295d8ac
  initGame91 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 280#) -}
d0b5c386f39794d124e09002c64cc4b1
  initGame92 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCStringUtf8#
                   Monopoly.initGame93) -}
00fbd8559086eefedc8936718488c73b
  initGame93 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("\\208\\144\\208\\161\\208\\146\\208\\154 \\208\\156\\208\\181\\208\\180\\208\\184\\208\\176\\208\\187\\208\\176\\208\\177"#) -}
2f2e47f6f73352b556d88fb2829722db
  initGame94 :: Monopoly.Street
  {- Strictness: m,
     Unfolding: (Monopoly.Street
                   Monopoly.initGame96
                   Monopoly.initGame95
                   GHC.Types.False
                   Monopoly.initCards9
                   Monopoly.initCards9) -}
fd17a69f3aec7c79330024a5142a6f02
  initGame95 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 150#) -}
a691bea110b17a0803d4a8f02f58ac20
  initGame96 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCStringUtf8#
                   Monopoly.initGame97) -}
2541c23920b1745c686ec6e1e4ba758e
  initGame97 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("\\208\\162\\208\\181\\209\\133\\208\\189\\208\\190\\209\\129\\209\\132\\208\\181\\209\\128\\208\\176"#) -}
226ae069895c8c512865a183793a0209
  initGame98 :: Monopoly.Street
  {- Strictness: m,
     Unfolding: (Monopoly.Street
                   Monopoly.initGame100
                   Monopoly.initGame99
                   GHC.Types.False
                   Monopoly.initCards9
                   Monopoly.initCards9) -}
8980f7d188827f79f468c509f7eda995
  initGame99 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 260#) -}
a24465c4a3a38b245b9db1f72c10337c
  initPay :: Monopoly.GameState -> Monopoly.GameState
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U,U,U,U,U,U)>m,
     Unfolding: InlineRule (1, True, True)
                (\ (gameState :: Monopoly.GameState) -> gameState) -}
d2acc733a5daa6be796ee2954e044019
  isPay ::
    Graphics.Gloss.Internals.Data.Picture.Point
    -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S(S)L),1*U(1*U(U),U(U))>,
     Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Graphics.Gloss.Internals.Data.Picture.Point) ->
                 case w of ww { (,) ww1 ww2 ->
                 case ww1 of ww3 { GHC.Types.F# ww4 ->
                 Monopoly.$wisPay ww4 ww2 } }) -}
b6b00bf78dc3a464729bafe1bdc8000f
  isRent :: Monopoly.Street -> GHC.Types.Bool
  RecSel Left Monopoly.Street
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLSLL),1*U(A,A,1*U,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Monopoly.Street) ->
                 case ds of wild { Monopoly.Street ds1 ds2 ds3 ds4 ds5 -> ds3 }) -}
4b1affade5cf4939d9295d9be74b5cab
  isStep ::
    Graphics.Gloss.Internals.Data.Picture.Point -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ (ds :: Graphics.Gloss.Internals.Data.Picture.Point) ->
                 GHC.Types.True) -}
1a9c53ac13a86ba28657215bed54aafd
  isntPay ::
    Graphics.Gloss.Internals.Data.Picture.Point -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S(S)L),1*U(1*U(U),A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: (GHC.Types.Float, GHC.Types.Float)) ->
                 case ds of wild { (,) x y ->
                 case x of wild1 { GHC.Types.F# x1 ->
                 GHC.Prim.tagToEnum#
                   @ GHC.Types.Bool
                   (GHC.Prim.gtFloat# x1 0.0#) } }) -}
e82b4e3318daaeb987adaca730bd19d2
  land :: Monopoly.GameState -> [Monopoly.Street]
  RecSel Left Monopoly.GameState
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLSL),1*U(A,A,A,A,1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Monopoly.GameState) ->
                 case ds of wild { Monopoly.GameState ds1 ds2 ds3 ds4 ds5 ds6 ->
                 ds5 }) -}
4a80d8d1d0fae0d7c24233945ea9b4b2
  loadImages :: GHC.Types.IO Monopoly.Images
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Monopoly.loadImages1
                  `cast`
                (Sym (GHC.Types.N:IO[0] <Monopoly.Images>_R)) -}
fcd3efbe8c88223f79694930fb28ca09
  loadImages1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Monopoly.Images #)
  {- Arity: 1, Strictness: <S,U> -}
30fd1e2a3fe267efa704d2d4b00a7f70
  makeMove :: Monopoly.GameState -> Monopoly.GameState
  {- Arity: 1, Strictness: <S,1*U(U,U(U),U,A,U,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (gameState :: Monopoly.GameState) ->
                 case gameState of wild { Monopoly.GameState ds ds1 ds2 ds3 ds4 ds5 ->
                 Monopoly.makeStepFeatures
                   (Monopoly.changePlayerCell
                      (Monopoly.GameState ds ds1 ds2 Monopoly.doStep1 ds4 ds5)) }) -}
506292a161c82a179ed8aa8626592a22
  makePay :: Monopoly.GameState -> Monopoly.GameState
  {- Arity: 1, Strictness: <S,1*U(U,1*U(U),U,U,U,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (gameState :: Monopoly.GameState) ->
                 case gameState of wild { Monopoly.GameState ds ds1 ds2 ds3 ds4 ds5 ->
                 Monopoly.GameState
                   ds
                   (case ds1 of wild1 { GHC.Types.I# x ->
                    GHC.Types.I# (GHC.Prim.+# (GHC.Prim.andI# x 3#) 1#) })
                   ds2
                   ds3
                   ds4
                   Monopoly.handleGame3 }) -}
3e09619abbaf1d578f5cadb48c45b779
  makeStepFeatures :: Monopoly.GameState -> Monopoly.GameState
  {- Arity: 1, Strictness: <S(LLLLLS),1*U(U,U(U),U,U,U,U)>m,
     Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Monopoly.GameState) ->
                 case w of ww { Monopoly.GameState ww1 ww2 ww3 ww4 ww5 ww6 ->
                 case Monopoly.$wmakeStepFeatures
                        ww1
                        ww2
                        ww3
                        ww4
                        ww5
                        ww6 of ww7 { (#,,,,,#) ww8 ww9 ww10 ww11 ww12 ww13 ->
                 Monopoly.GameState ww8 ww9 ww10 ww11 ww12 ww13 } }) -}
a9463e4dfe18435be810b6a4215c30b2
  makeStepFeatures1 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 200#) -}
26fd1c0c165071a541e35efb151de72a
  makeStepFeatures2 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 100#) -}
0a10b1c475ab42bce8e36804deec12c5
  money :: Monopoly.Player -> GHC.Types.Int
  RecSel Left Monopoly.Player
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LSLLL),1*U(A,1*U(U),A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Monopoly.Player) ->
                 case ds of wild { Monopoly.Player ds1 ds2 ds3 ds4 ds5 -> ds2 }) -}
70961fe10d74f3228a9a7b063d4d1b60
  move :: Monopoly.Physical a => GHC.Types.Float -> a -> a
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(LLC(C(S))L),U(1*C1(U),A,1*C1(C1(U)),A)><L,A><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   ($dPhysical :: Monopoly.Physical a)
                   (dt :: GHC.Types.Float)
                   (object :: a) ->
                 Monopoly.setPosition
                   @ a
                   $dPhysical
                   (Monopoly.getPosition @ a $dPhysical object)
                   object) -}
4a55c7b8d306fcda65aff980f94d5a1a
  movePlayer ::
    Monopoly.Player
    -> GHC.Types.Int -> GHC.Types.Int -> Monopoly.Player
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S,1*U(U,U,U,U(U),A)><L,1*U(U)><L,U(U)>m, Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: Monopoly.Player)
                   (w1 :: GHC.Types.Int)
                   (w2 :: GHC.Types.Int) ->
                 case w of ww { Monopoly.Player ww1 ww2 ww3 ww4 ww5 ->
                 Monopoly.Player
                   ww1
                   ww2
                   ww3
                   (case ww4 of wild { GHC.Types.I# x ->
                    case w2 of wild1 { GHC.Types.I# y ->
                    case GHC.Classes.modInt#
                           (GHC.Prim.-# (GHC.Prim.+# x y) 1#)
                           40# of ww6 { DEFAULT ->
                    GHC.Types.I# (GHC.Prim.+# ww6 1#) } } })
                   (case ww4 of wild { GHC.Types.I# x ->
                    case w2 of wild1 { GHC.Types.I# y ->
                    case GHC.Classes.modInt#
                           (GHC.Prim.-# (GHC.Prim.+# x y) 1#)
                           40# of ww6 { DEFAULT ->
                    case Monopoly.$wgetPlayerPosition
                           w1
                           (GHC.Prim.+# ww6 1#) of ww7 { (#,#) ww8 ww9 ->
                    (ww8, ww9) } } } }) }) -}
b6b00bf78dc3a464729bafe1bdc8000f
  name :: Monopoly.Street -> GHC.Base.String
  RecSel Left Monopoly.Street
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SLLLL),1*U(1*U,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Monopoly.Street) ->
                 case ds of wild { Monopoly.Street ds1 ds2 ds3 ds4 ds5 -> ds1 }) -}
6bcfbccc32ada50007df2a427dd97d7b
  num :: Monopoly.ChanceCard -> GHC.Types.Int
  RecSel Left Monopoly.ChanceCard
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SLL),1*U(1*U(U),A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Monopoly.ChanceCard) ->
                 case ds of wild { Monopoly.ChanceCard ds1 ds2 ds3 -> ds1 }) -}
b6b00bf78dc3a464729bafe1bdc8000f
  owner :: Monopoly.Street -> GHC.Types.Int
  RecSel Left Monopoly.Street
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLS),1*U(A,A,A,A,1*U(U))>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Monopoly.Street) ->
                 case ds of wild { Monopoly.Street ds1 ds2 ds3 ds4 ds5 -> ds5 }) -}
b568f09998b4fba439049bc2bf7dc70f
  payPrictRent :: Monopoly.GameState -> Monopoly.GameState
  {- Arity: 1, Strictness: <S,1*U(U,U(U),U,U,U,U)>m, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Monopoly.GameState) ->
                 case w of ww { Monopoly.GameState ww1 ww2 ww3 ww4 ww5 ww6 ->
                 case Monopoly.$wpayPrictRent
                        ww1
                        ww2
                        ww3
                        ww4
                        ww5
                        ww6 of ww7 { (#,,,,,#) ww8 ww9 ww10 ww11 ww12 ww13 ->
                 Monopoly.GameState ww8 ww9 ww10 ww11 ww12 ww13 } }) -}
3c29d567890de449c0cf3eb480535961
  payTax :: Monopoly.GameState -> GHC.Types.Int -> Monopoly.GameState
  {- Arity: 2, Strictness: <S,1*U(U,U(U),U,U,U,U)><L,1*U(U)>m,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Monopoly.GameState) (w1 :: GHC.Types.Int) ->
                 case w of ww { Monopoly.GameState ww1 ww2 ww3 ww4 ww5 ww6 ->
                 case Monopoly.$wpayTax
                        ww1
                        ww2
                        ww3
                        ww4
                        ww5
                        ww6
                        w1 of ww7 { (#,,,,,#) ww8 ww9 ww10 ww11 ww12 ww13 ->
                 Monopoly.GameState ww8 ww9 ww10 ww11 ww12 ww13 } }) -}
0a10b1c475ab42bce8e36804deec12c5
  playerCell :: Monopoly.Player -> GHC.Types.Int
  RecSel Left Monopoly.Player
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLSL),1*U(A,A,A,1*U(U),A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Monopoly.Player) ->
                 case ds of wild { Monopoly.Player ds1 ds2 ds3 ds4 ds5 -> ds4 }) -}
0a10b1c475ab42bce8e36804deec12c5
  playerPosition ::
    Monopoly.Player -> Graphics.Gloss.Internals.Data.Picture.Point
  RecSel Left Monopoly.Player
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLS),1*U(A,A,A,A,1*U(U,U))>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Monopoly.Player) ->
                 case ds of wild { Monopoly.Player ds1 ds2 ds3 ds4 ds5 -> ds5 }) -}
e82b4e3318daaeb987adaca730bd19d2
  players :: Monopoly.GameState -> [Monopoly.Player]
  RecSel Left Monopoly.GameState
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(SLLLLL),1*U(1*U,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Monopoly.GameState) ->
                 case ds of wild { Monopoly.GameState ds1 ds2 ds3 ds4 ds5 ds6 ->
                 ds1 }) -}
b6b00bf78dc3a464729bafe1bdc8000f
  price :: Monopoly.Street -> GHC.Types.Int
  RecSel Left Monopoly.Street
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LSLLL),1*U(A,1*U(U),A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Monopoly.Street) ->
                 case ds of wild { Monopoly.Street ds1 ds2 ds3 ds4 ds5 -> ds2 }) -}
6bcfbccc32ada50007df2a427dd97d7b
  price2 :: Monopoly.ChanceCard -> GHC.Types.Int
  RecSel Left Monopoly.ChanceCard
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LSL),1*U(A,1*U(U),A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Monopoly.ChanceCard) ->
                 case ds of wild { Monopoly.ChanceCard ds1 ds2 ds3 -> ds2 }) -}
b6b00bf78dc3a464729bafe1bdc8000f
  priceRent :: Monopoly.Street -> GHC.Types.Int
  RecSel Left Monopoly.Street
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLSL),1*U(A,A,A,1*U(U),A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Monopoly.Street) ->
                 case ds of wild { Monopoly.Street ds1 ds2 ds3 ds4 ds5 -> ds4 }) -}
0a10b1c475ab42bce8e36804deec12c5
  property :: Monopoly.Player -> [Monopoly.Street]
  RecSel Left Monopoly.Player
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLSLL),1*U(A,A,1*U,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Monopoly.Player) ->
                 case ds of wild { Monopoly.Player ds1 ds2 ds3 ds4 ds5 -> ds3 }) -}
efb5001204e6110178974924c9ef2583
  satelliteRotationSpeed :: GHC.Types.Float
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.F# 0.1#) -}
7ec450736dacd06f62cd7a6033601267
  screenHeight :: GHC.Num.Num a => a
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLC(S)),1*U(A,A,A,A,A,A,1*C1(U))>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a ($dNum :: GHC.Num.Num a) ->
                 GHC.Num.fromInteger @ a $dNum Monopoly.screenHeight1) -}
5f238d5a60d724959e0f607cc024531e
  screenHeight1 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (800) -}
ad81d0f16e778b24958e18e7770f3a09
  screenWidth :: GHC.Num.Num a => a
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLC(S)),1*U(A,A,A,A,A,A,1*C1(U))>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a ($dNum :: GHC.Num.Num a) ->
                 GHC.Num.fromInteger @ a $dNum Monopoly.screenHeight1) -}
d15a78157415196aa8616bbb4f87e4e1
  secondCube :: Monopoly.Cubes -> GHC.Types.Int
  RecSel Left Monopoly.Cubes
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LS),1*U(A,1*U(U))>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Monopoly.Cubes) ->
                 case ds of wild { Monopoly.Cubes ds1 ds2 -> ds2 }) -}
6f40410dcc35e17594bff1c02f4cdb52
  startGame :: Monopoly.Images -> GHC.Types.IO ()
  {- Arity: 2, Strictness: <L,U(U,U,U,U,U,U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Monopoly.startGame1
                  `cast`
                (<Monopoly.Images>_R ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
c121759d2e72fa648926659ca01ece94
  startGame1 ::
    Monopoly.Images
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 2, Strictness: <L,U(U,U,U,U,U,U)><S,U>,
     Unfolding: (\ (images :: Monopoly.Images)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case Graphics.Gloss.Internals.Interface.Game.playWithBackendIO1
                        @ Monopoly.GameState
                        @ Graphics.Gloss.Internals.Interface.Backend.GLUT.GLUTState
                        Graphics.Gloss.Internals.Interface.Backend.GLUT.$fBackendGLUTState
                        Graphics.Gloss.Internals.Interface.Backend.GLUT.glutStateInit
                        Graphics.Gloss.Data.Display.FullScreen
                        Graphics.Gloss.Data.Color.white
                        Monopoly.makeStepFeatures2
                        Monopoly.initGame
                        (\ (x :: Monopoly.GameState)
                           (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                         (# s1, Monopoly.drawGameState images x #))
                          `cast`
                        (<Monopoly.GameState>_R
                         ->_R Sym (GHC.Types.N:IO[0]
                                       <Graphics.Gloss.Internals.Data.Picture.Picture>_R))
                        Monopoly.startGame3
                          `cast`
                        (<Graphics.Gloss.Internals.Interface.Event.Event>_R
                         ->_R <Monopoly.GameState>_R
                         ->_R Sym (GHC.Types.N:IO[0] <Monopoly.GameState>_R))
                        Monopoly.startGame2
                          `cast`
                        (<GHC.Types.Float>_R
                         ->_R <Monopoly.GameState>_R
                         ->_R Sym (GHC.Types.N:IO[0] <Monopoly.GameState>_R))
                        GHC.Types.True
                        s of ds1 { (#,#) ipv ipv1 ->
                 (# ipv, GHC.Tuple.() #) }) -}
cc15bb2c0f873381bf1002f3f988f768
  startGame2 ::
    GHC.Types.Float
    -> Monopoly.GameState
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Monopoly.GameState #)
  {- Arity: 3, HasNoCafRefs, Strictness: <L,A><L,U><S,U>,
     Unfolding: InlineRule (3, True, True)
                (\ (time :: GHC.Types.Float)
                   (world1 :: Monopoly.GameState)
                   (s1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 (# s1, world1 #)) -}
88fb903fad8188a6727f9e32f44ccffc
  startGame3 ::
    Graphics.Gloss.Internals.Interface.Event.Event
    -> Monopoly.GameState
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Monopoly.GameState #)
  {- Arity: 3, Strictness: <L,1*U><L,1*U(U,U(U),U,U,U,U)><S,U>,
     Unfolding: InlineRule (3, True, False)
                (\ (event :: Graphics.Gloss.Internals.Interface.Event.Event)
                   (world1 :: Monopoly.GameState)[OneShot]
                   (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 (# s1, Monopoly.handleGame event world1 #)) -}
37bc29a988e31ca7acb8ea522ffc1769
  streetMove :: Monopoly.GameState -> Monopoly.GameState
  {- Arity: 1, Strictness: <S(SS(S)LLSL),1*U(U,U(U),U,U,U,U)>m,
     Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Monopoly.GameState) ->
                 case w of ww { Monopoly.GameState ww1 ww2 ww3 ww4 ww5 ww6 ->
                 case ww2 of ww7 { GHC.Types.I# ww8 ->
                 case GHC.List.$w!!
                        @ Monopoly.Player
                        ww1
                        (GHC.Prim.-#
                           ww8
                           1#) of wild { Monopoly.Player ds ds1 ds2 ds3 ds4 ->
                 case ds3 of wild1 { GHC.Types.I# x ->
                 case GHC.List.$w!!
                        @ Monopoly.Street
                        ww5
                        (GHC.Prim.-#
                           x
                           1#) of wild2 { Monopoly.Street ds5 ds6 ds7 ds8 ds9 ->
                 case ds7 of wild3 {
                   GHC.Types.False
                   -> Monopoly.GameState ww1 (GHC.Types.I# ww8) ww3 ww4 ww5 ww6
                   GHC.Types.True
                   -> case Monopoly.$wpayTax
                             ww1
                             (GHC.Types.I# ww8)
                             ww3
                             ww4
                             ww5
                             ww6
                             ds8 of ww9 { (#,,,,,#) ww10 ww11 ww12 ww13 ww14 ww15 ->
                      Monopoly.GameState ww10 ww11 ww12 ww13 ww14 ww15 } } } } } } }) -}
6bcfbccc32ada50007df2a427dd97d7b
  text2 :: Monopoly.ChanceCard -> GHC.Base.String
  RecSel Left Monopoly.ChanceCard
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLS),1*U(A,A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Monopoly.ChanceCard) ->
                 case ds of wild { Monopoly.ChanceCard ds1 ds2 ds3 -> ds3 }) -}
a74b6cdd0ec1c506a545a8f82f714a6e
  throwCubes :: Monopoly.GameState -> Monopoly.GameState
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U,U,U,A,U,U)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (gameState :: Monopoly.GameState) ->
                 case gameState of wild { Monopoly.GameState ds ds1 ds2 ds3 ds4 ds5 ->
                 Monopoly.GameState ds ds1 ds2 Monopoly.doStep1 ds4 ds5 }) -}
e82b4e3318daaeb987adaca730bd19d2
  typeStep :: Monopoly.GameState -> GHC.Base.String
  RecSel Left Monopoly.GameState
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLS),1*U(A,A,A,A,A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Monopoly.GameState) ->
                 case ds of wild { Monopoly.GameState ds1 ds2 ds3 ds4 ds5 ds6 ->
                 ds6 }) -}
95d4bcde59ad58327cd8c1aed6011fa9
  ufoAccel :: GHC.Types.Float
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.F# 15.0#) -}
9b2d9f34fe63eab14425d255f64e8e22
  updateGameState ::
    GHC.Types.Float -> Monopoly.GameState -> Monopoly.GameState
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ (ds :: GHC.Types.Float) -> GHC.Base.id @ Monopoly.GameState) -}
5887f7fc8340c261a5154a245c070d3f
  updatePay ::
    GHC.Types.Float -> Monopoly.GameState -> Monopoly.GameState
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ (ds :: GHC.Types.Float) -> GHC.Base.id @ Monopoly.GameState) -}
instance Monopoly.Physical [Monopoly.Player]
  = Monopoly.$fPhysicalPlayer
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

